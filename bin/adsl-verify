#!/usr/bin/env ruby

require 'pathname'
require 'optparse'
require 'ostruct'

GEM_BIN_PATH = Pathname.new(File.expand_path(__FILE__)).parent
GEM_LIB_PATH = GEM_BIN_PATH.parent + "lib"
$LOAD_PATH.unshift GEM_LIB_PATH unless $LOAD_PATH.include? GEM_LIB_PATH

require 'adsl/bin/bin'

options = ADSL::Bin::Bin::DEFAULT_OPTS.dup

OptionParser.new do |opts|
  opts.banner = "Usage: verify-adsl [options] [input_file]"
  opts.separator ""
  opts.separator "Specific options:"

  opts.on("-p", "--prover PROVER",
          "Specify the theorem prover used to verifying the specification",
          "  Only 'z3' and 'spass' are supported thus far",
          "  Default: #{ options[:prover] }") do |lang|
    options[:prover] = lang
  end

  opts.on("--translate",
          "Translate the specification onto the target language, skipping verification.") do |translate|
    options[:translate] = true
  end
  
  opts.on("-h", "--[no-]halt-on-error",
          "Halt verification on the first error encountered. Default: #{options[:halt_on_error]}") do |halt|
    options[:halt_on_error] = halt
  end
  
  opts.on("-o", "--output-format FORMAT",
          "Sets the output format. Options: text, csv, or silent", 
          "  Default: #{ options[:output] }") do |format|
    options[:output] = format
  end

  opts.on("-t", "--timeout TIMEOUT", Integer,
          "Timeout for verifying each individual conjecture, in seconds.",
          "  Use -1 to allow infinite time for each conjecture. Default: #{ options[:timeout] } sec") do |timeout|
    raise OptionParser::InvalidArgument, "Timeout has to be a non-negative integer, or -1" if timeout < -1
    options[:timeout] = timeout
  end

  opts.on("-a", "--actions ACTIONS",
          "A colon separated list of actions to be verified.",
          "  Only actions whose name contains any of the arguments will be vefified",
          "  All actions are verified by default") do |actions|
    options[:actions] = actions.split(':').map(&:strip)
  end

  opts.on("-r", "--problems PROBLEMS",
          "A colon separated list of invariant names to be verified,",
          "  or 'ac' for access control checking.",
          "  Only invariants whose name contains any of the arguments will be vefified",
          "  All invariants are verified by default") do |invs|
    options[:problems] = invs.split(':').map(&:strip)
  end

  opts.on_tail("--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

unless ARGV.empty?
  raise "Invalid usage. Run verify-adsl --help for instructions" if ARGV.length != 1
  options[:input] = ARGV.first
end

bin = ADSL::Bin::Bin.new options
begin
  bin.run
rescue Exception => e
  $stderr.puts "Error thrown"
  $stderr.puts e.message unless e.message.nil? or e.message.strip.length == 0
  $stderr.puts e.backtrace
  exit -1
end

exit 0
