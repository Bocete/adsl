#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.2
# from lexical definition file "./lib/parser/adsl_parser.rex".
#++

require 'racc/parser'
require 'parser/adsl_ast'

module ADSL
class ADSLParser < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader :lineno
  attr_reader :filename

  def scan_setup ; end

  def action &block
    yield
  end

  def scan_str( str )
    scan_evaluate  str
    do_parse
  end

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_evaluate  f.read
    end
  end

  def scan_file( filename )
    load_file  filename
    do_parse
  end

  def next_token
    @rex_tokens.shift
  end

  def scan_evaluate( str )
    scan_setup
    @rex_tokens = []
    @lineno  =  1
    ss = StringScanner.new(str)
    state = nil
    until ss.eos?
      text = ss.peek(1)
      @lineno  +=  1  if text == "\n"
      case state
      when nil
        case
        when (text = ss.scan(/\/\/[^\n\z]*/))
          ;

        when (text = ss.scan(/\#[^\n\z]*/))
          ;

        when (text = ss.scan(/\/\*(?:[^\*]*(?:\*+[^\/]+)?)*\*\//))
          ;

        when (text = ss.scan(/class\b/))
           @rex_tokens.push action { [:class, lineno] }

        when (text = ss.scan(/extends\b/))
           @rex_tokens.push action { [:extends, lineno] }

        when (text = ss.scan(/inverseof\b/))
           @rex_tokens.push action { [:inverseof, lineno] }

        when (text = ss.scan(/create\b/))
           @rex_tokens.push action { [:create, lineno] }

        when (text = ss.scan(/delete\b/))
           @rex_tokens.push action { [:delete, lineno] }

        when (text = ss.scan(/foreach\b/))
           @rex_tokens.push action { [:foreach, lineno] }

        when (text = ss.scan(/either\b/))
           @rex_tokens.push action { [:either, lineno] }

        when (text = ss.scan(/action\b/))
           @rex_tokens.push action { [:action, lineno] }

        when (text = ss.scan(/or\b/))
           @rex_tokens.push action { [:or, lineno] }

        when (text = ss.scan(/subset\b/))
           @rex_tokens.push action { [:subset, lineno] }

        when (text = ss.scan(/oneof\b/))
           @rex_tokens.push action { [:oneof, lineno] }

        when (text = ss.scan(/\.\s*all\b/))
           @rex_tokens.push action { [:dotall, lineno] }

        when (text = ss.scan(/forall\b/))
           @rex_tokens.push action { [:forall, lineno] }

        when (text = ss.scan(/exists\b/))
           @rex_tokens.push action { [:exists, lineno] }

        when (text = ss.scan(/in\b/))
           @rex_tokens.push action { [:in, lineno] }

        when (text = ss.scan(/invariant\b/))
           @rex_tokens.push action { [:invariant, lineno] }

        when (text = ss.scan(/true\b/))
           @rex_tokens.push action { [:true, lineno] }

        when (text = ss.scan(/false\b/))
           @rex_tokens.push action { [:false, lineno] }

        when (text = ss.scan(/!=/))
           @rex_tokens.push action { [text, lineno] }

        when (text = ss.scan(/!|not\b/))
           @rex_tokens.push action { [:not, lineno] }

        when (text = ss.scan(/and\b/))
           @rex_tokens.push action { [:and, lineno] }

        when (text = ss.scan(/equal\b/))
           @rex_tokens.push action { [:equal, lineno] }

        when (text = ss.scan(/equiv\b/))
           @rex_tokens.push action { [:equiv, lineno] }

        when (text = ss.scan(/empty\b/))
           @rex_tokens.push action { [:empty, lineno] }

        when (text = ss.scan(/implies\b/))
           @rex_tokens.push action { [:implies, lineno] }

        when (text = ss.scan(/\.\./))
           @rex_tokens.push action { [text, lineno] }

        when (text = ss.scan(/[{}:\(\)\.,]/))
           @rex_tokens.push action { [text, lineno] }

        when (text = ss.scan(/\+=/))
           @rex_tokens.push action { [text, lineno] }

        when (text = ss.scan(/\-=/))
           @rex_tokens.push action { [text, lineno] }

        when (text = ss.scan(/==/))
           @rex_tokens.push action { [text, lineno] }

        when (text = ss.scan(/<=>/))
           @rex_tokens.push action { [text, lineno] }

        when (text = ss.scan(/<=/))
           @rex_tokens.push action { [text, lineno] }

        when (text = ss.scan(/=>/))
           @rex_tokens.push action { [text, lineno] }

        when (text = ss.scan(/=/))
           @rex_tokens.push action { [text, lineno] }

        when (text = ss.scan(/\+/))
           @rex_tokens.push action { [text, lineno] }

        when (text = ss.scan(/[01]/))
           @rex_tokens.push action { [text, lineno] }

        when (text = ss.scan(/\w+/))
           @rex_tokens.push action { [:IDENT, ADSLIdent.new(:lineno => lineno, :text => text)] }

        when (text = ss.scan(/\s/))
          ;

        when (text = ss.scan(/./))
           @rex_tokens.push action { [:unknown_symbol, [text, lineno]] }

        else
          text = ss.string[ss.pos .. -1]
          raise  ScanError, "can not match: '" + text + "'"
        end  # if

      else
        raise  ScanError, "undefined state: '" + state.to_s + "'"
      end  # case state
    end  # until ss
  end  # def scan_evaluate

end # class
end # module
