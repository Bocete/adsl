#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser/adsl_parser.rex'
require 'fol/first_order_logic'

module ADSL

class ADSLParser < Racc::Parser

module_eval(<<'...end adsl_parser.racc/module_eval...', 'adsl_parser.racc', 138)

# generated by racc
  def generate_ast(str)
    scan str
    # do_parse
  end

  def parse(str)
    generate_ast(str).typecheck_and_resolve
  end

...end adsl_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    46,    48,    47,    44,    45,    46,    48,    47,    44,    45,
    46,    48,    47,    44,    45,    46,    48,    47,    44,    45,
    46,    48,    47,    44,    45,    56,    57,    36,   144,   145,
    15,   142,    68,    18,    70,    15,   114,    68,    18,    70,
    91,   113,   122,    95,    96,    83,   140,   100,    58,    35,
   149,    67,   103,    97,    15,   151,    17,    18,    19,   102,
    23,    24,   103,    33,    31,    32,    25,    30,    27,    28,
    51,   -36,    15,    81,    17,    18,    19,    26,    23,    24,
   115,    33,    31,    32,    25,    30,    27,    28,    51,   116,
    15,   117,    17,    18,    19,    26,    23,    24,    98,    33,
    31,    32,    25,    30,    27,    28,    16,   122,    15,   123,
    17,    18,    19,    26,    23,    24,    81,    33,    31,    32,
    25,    30,    27,    28,    51,   -37,    15,   125,    17,    18,
    19,    26,    23,    24,   126,    33,    31,    32,    25,    30,
    27,    28,    51,   -39,    15,    73,    17,    18,    19,    26,
    23,    24,    81,    33,    31,    32,    25,    30,    27,    28,
    51,    72,    15,   130,    17,    18,    19,    26,    23,    24,
    65,    33,    31,    32,    25,    30,    27,    28,    51,   -20,
    15,    62,    17,    18,    19,    26,    23,    24,    60,    33,
    31,    32,    25,    30,    27,    28,    51,   135,    15,    46,
    17,    18,    19,    26,    23,    24,    59,    33,    31,    32,
    25,    30,    27,    28,    51,    55,    15,   146,    17,    18,
    19,    26,    23,    24,    46,    33,    31,    32,    25,    30,
    27,    28,    51,   148,    15,    54,    17,    18,    19,    26,
    23,    24,   103,    33,    31,    32,    25,    30,    27,    28,
    51,    50,    15,    49,    17,    18,    19,    26,    23,    24,
    43,    33,    31,    32,    25,    30,    27,    28,    51,   154,
    15,   155,    17,    18,    19,    26,    23,    24,    42,    33,
    31,    32,    25,    30,    27,    28,    51,   157,    15,   -40,
    17,    18,    19,    26,    23,    24,    41,    33,    31,    32,
    25,    30,    27,    28,    51,   159,    15,   160,    17,    18,
    19,    26,    23,    24,   122,    33,    31,    32,    25,    30,
    27,    28,    51,   162,    15,   -41,    17,    18,    19,    26,
    23,    24,   106,    33,    31,    32,    25,    30,    27,    28,
    51,    15,   167,    17,    18,    19,    40,    26,   144,   145,
    15,   142,    68,    18,    70,   103,    15,    51,    17,    18,
    19,    15,   169,    68,    18,    70,   140,    15,   170,    68,
    18,    70,    51,   110,   163,   164,    15,    67,    17,    18,
    19,   109,    15,    67,    68,    18,    70,    15,   171,    68,
    18,    70,    51,    15,   108,    68,    18,    70,    67,   112,
   165,   166,    15,    67,    68,    18,    70,   104,    15,    67,
    68,    18,    70,    15,    38,    17,    18,    19,    67,    15,
   108,    17,    18,    19,    67,   107,   118,   119,    15,    51,
    17,    18,    19,   103,    15,    51,    17,    18,    19,    15,
   101,    68,    18,    70,    51,     6,     6,    37,     7,     7,
    51,     6,   174,   175,     7,    67,     8,     8,     6,    95,
    96,     7,     8,    46,    48,    47,    44,    45,   122,     8,
    46,    48,    47,    44,    45,    46,    48,    47,    44,    45,
    46,    48,    47,    44,    45,   137,    95,    96,    95,    96,
    46,    48,    47,    44,    45,   147,   105,   -36,   103,   103,
    39,    46,    48,    47,    46,    48,    47,    34,    14,    13,
     9,   182,   103,   103,   122 ]

racc_action_check = [
    85,    85,    85,    85,    85,    84,    84,    84,    84,    84,
    53,    53,    53,    53,    53,   127,   127,   127,   127,   127,
   133,   133,   133,   133,   133,    29,    29,    13,   122,   122,
   122,   122,   122,   122,   122,    40,    85,    40,    40,    40,
    61,    84,   176,    61,    61,    53,   122,    65,    29,    13,
   127,    40,   176,    62,   113,   133,   113,   113,   113,    69,
   113,   113,    69,   113,   113,   113,   113,   113,   113,   113,
   113,    51,   107,    50,   107,   107,   107,   113,   107,   107,
    89,   107,   107,   107,   107,   107,   107,   107,   107,    90,
     8,    93,     8,     8,     8,   107,     8,     8,    63,     8,
     8,     8,     8,     8,     8,     8,     8,    98,    39,    99,
    39,    39,    39,     8,    39,    39,    49,    39,    39,    39,
    39,    39,    39,    39,    39,   102,   112,   103,   112,   112,
   112,    39,   112,   112,   104,   112,   112,   112,   112,   112,
   112,   112,   112,   106,    44,    43,    44,    44,    44,   112,
    44,    44,   108,    44,    44,    44,    44,    44,    44,    44,
    44,    42,   114,   111,   114,   114,   114,    44,   114,   114,
    38,   114,   114,   114,   114,   114,   114,   114,   114,    37,
   164,    36,   164,   164,   164,   114,   164,   164,    33,   164,
   164,   164,   164,   164,   164,   164,   164,   117,    45,    78,
    45,    45,    45,   164,    45,    45,    30,    45,    45,    45,
    45,    45,    45,    45,    45,    28,    46,   123,    46,    46,
    46,    45,    46,    46,    77,    46,    46,    46,    46,    46,
    46,    46,    46,   126,    47,    27,    47,    47,    47,    46,
    47,    47,   129,    47,    47,    47,    47,    47,    47,    47,
    47,    24,    55,    23,    55,    55,    55,    47,    55,    55,
    21,    55,    55,    55,    55,    55,    55,    55,    55,   135,
    54,   138,    54,    54,    54,    55,    54,    54,    19,    54,
    54,    54,    54,    54,    54,    54,    54,   140,    48,   141,
    48,    48,    48,    54,    48,    48,    18,    48,    48,    48,
    48,    48,    48,    48,    48,   143,    26,   144,    26,    26,
    26,    48,    26,    26,   145,    26,    26,    26,    26,    26,
    26,    26,    26,   146,    25,    73,    25,    25,    25,    26,
    25,    25,    72,    25,    25,    25,    25,    25,    25,    25,
    25,   115,   154,   115,   115,   115,    17,    25,   139,   139,
   139,   139,   139,   139,   139,   158,   166,   115,   166,   166,
   166,   170,   159,   170,   170,   170,   139,   142,   160,   142,
   142,   142,   166,    81,   150,   150,    56,   170,    56,    56,
    56,    81,   157,   142,   157,   157,   157,    41,   161,    41,
    41,    41,    56,   110,    82,   110,   110,   110,   157,    82,
   152,   152,   174,    41,   174,   174,   174,    70,   175,   110,
   175,   175,   175,    57,    15,    57,    57,    57,   174,    58,
    79,    58,    58,    58,   175,    79,    94,    94,    59,    57,
    59,    59,    59,   168,    60,    58,    60,    60,    60,   101,
    68,   101,   101,   101,    59,     0,     4,    14,     0,     4,
    60,     3,   169,   169,     3,   101,     0,     4,     5,   118,
   118,     5,     3,   172,   172,   172,   172,   172,   171,     5,
    22,    22,    22,    22,    22,   132,   132,   132,   132,   132,
    66,    66,    66,    66,    66,   120,    64,    64,   120,   120,
   131,   131,   131,   131,   131,   124,    71,    16,   124,    71,
    16,    75,    75,    75,    74,    74,    74,     9,     7,     6,
     1,   177,   179,   180,   182 ]

racc_action_pointer = [
   434,   510,   nil,   440,   435,   447,   476,   475,    73,   507,
   nil,   nil,   nil,    15,   407,   374,   453,   306,   256,   238,
   nil,   216,   464,   213,   211,   307,   289,   195,   175,    23,
   166,   nil,   nil,   148,   nil,   nil,   148,   138,   137,    91,
    18,   370,   128,   112,   127,   181,   199,   217,   271,    83,
    40,    27,   nil,     4,   253,   235,   359,   396,   402,   411,
   417,     5,    19,    57,   448,     6,   474,   nil,   400,    18,
   367,   455,   291,   281,   498,   495,   nil,   218,   193,   378,
   nil,   348,   352,   nil,    -1,    -6,   nil,   nil,   nil,    38,
    48,   nil,   nil,    58,   390,   nil,   nil,   nil,    73,    76,
   nil,   422,    81,    94,   101,   nil,    99,    55,   119,   nil,
   376,   122,   109,    37,   145,   324,   nil,   164,   421,   nil,
   450,   nil,    13,   184,   454,   nil,   192,     9,   nil,   198,
   nil,   484,   469,    14,   nil,   256,   nil,   nil,   236,   333,
   244,   245,   350,   261,   274,   280,   281,   nil,   nil,   nil,
   333,   nil,   359,   nil,   309,   nil,   nil,   365,   311,   329,
   321,   378,   nil,   nil,   163,   nil,   339,   nil,   389,   407,
   344,   434,   457,   nil,   385,   391,     8,   501,   nil,   468,
   469,   nil,   480,   nil ]

racc_action_default = [
    -5,   -76,    -1,    -5,    -5,    -5,   -76,   -76,   -76,   -76,
    -2,    -3,    -4,   -76,   -76,   -76,   -42,   -76,   -76,   -76,
   -40,   -76,   -46,   -76,   -76,   -76,   -76,   -76,   -76,   -76,
   -76,   -63,   -64,   -76,   184,    -9,   -76,   -22,   -76,   -76,
   -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,
   -76,   -42,   -50,   -76,   -76,   -76,   -76,   -76,   -76,   -76,
   -76,   -76,   -76,   -76,   -76,   -76,   -47,   -36,   -76,   -76,
   -76,   -76,   -76,   -45,   -51,   -52,   -53,   -54,   -55,   -76,
   -67,   -76,   -71,   -56,   -76,   -76,   -59,   -60,   -62,   -76,
   -76,    -6,    -8,   -76,   -11,   -14,   -15,    -9,   -76,   -76,
   -35,   -76,   -43,   -76,   -76,   -38,   -44,   -76,   -76,   -68,
   -76,   -76,   -76,   -76,   -76,   -76,   -65,   -76,   -76,   -13,
   -76,   -18,   -25,   -76,   -76,   -41,   -76,   -76,   -66,   -69,
   -49,   -70,   -73,   -76,   -75,   -17,   -12,    -7,   -76,   -25,
   -36,   -27,   -76,   -76,   -76,   -76,   -19,   -37,   -39,   -48,
   -76,   -58,   -76,   -10,   -76,   -23,   -24,   -76,   -28,   -76,
   -76,   -76,   -21,   -57,   -76,   -61,   -76,   -16,   -26,   -41,
   -76,   -76,   -72,   -74,   -76,   -76,   -76,   -32,   -34,   -29,
   -30,   -31,   -76,   -33 ]

racc_goto_table = [
    22,    69,    71,   121,    86,    87,    88,    89,    90,   138,
    61,   141,    79,    82,     1,    64,     2,    52,    53,    10,
    11,    12,    63,   177,   136,   153,   156,    99,   141,   111,
   150,    66,   152,   128,   nil,   nil,    74,    75,    76,    77,
    78,   nil,   nil,   nil,   nil,   nil,    84,    85,   nil,   nil,
   161,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   124,   134,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   129,   120,   nil,   nil,   nil,   178,   nil,   nil,   nil,
   nil,   181,   nil,   143,   nil,   nil,   nil,   183,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   127,
   143,   nil,   nil,   158,   131,   132,   133,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   173,   nil,   nil,   nil,   168,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   176,   nil,   nil,   nil,   179,   180,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   172 ]

racc_goto_check = [
    20,    16,    16,    12,    19,    19,    19,    19,    19,    14,
     6,    17,    21,    21,     1,    13,     2,    20,    20,     2,
     2,     2,    11,    18,    10,     9,    14,     8,    17,    22,
    23,    20,    24,    25,   nil,   nil,    20,    20,    20,    20,
    20,   nil,   nil,   nil,   nil,   nil,    20,    20,   nil,   nil,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    16,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    16,     6,   nil,   nil,   nil,    12,   nil,   nil,   nil,
   nil,    12,   nil,    16,   nil,   nil,   nil,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,
    16,   nil,   nil,    16,    20,    20,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,    16,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    16,   nil,   nil,   nil,    16,    16,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    20 ]

racc_goto_pointer = [
   nil,    14,    16,   nil,   nil,   nil,   -25,   nil,   -37,  -110,
   -94,   -15,   -95,   -22,  -113,   nil,   -39,  -111,  -148,   -52,
    -8,   -37,   -53,  -102,  -102,   -75 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,   nil,    92,    93,   nil,
    94,   nil,   nil,   nil,   nil,   139,    21,    20,   nil,    29,
   nil,   nil,   nil,   nil,   nil,    80 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 49, :_reduce_1,
  2, 50, :_reduce_2,
  2, 50, :_reduce_3,
  2, 50, :_reduce_4,
  0, 50, :_reduce_5,
  5, 51, :_reduce_6,
  7, 51, :_reduce_7,
  2, 54, :_reduce_8,
  0, 54, :_reduce_9,
  4, 55, :_reduce_10,
  1, 56, :_reduce_11,
  3, 56, :_reduce_12,
  2, 56, :_reduce_13,
  1, 58, :_reduce_14,
  1, 58, :_reduce_15,
  2, 57, :_reduce_16,
  0, 57, :_reduce_17,
  6, 52, :_reduce_18,
  4, 59, :_reduce_19,
  0, 59, :_reduce_20,
  5, 61, :_reduce_21,
  0, 61, :_reduce_22,
  3, 60, :_reduce_23,
  2, 62, :_reduce_24,
  0, 62, :_reduce_25,
  3, 63, :_reduce_26,
  1, 63, :_reduce_27,
  2, 63, :_reduce_28,
  5, 63, :_reduce_29,
  5, 63, :_reduce_30,
  5, 63, :_reduce_31,
  4, 63, :_reduce_32,
  3, 66, :_reduce_33,
  1, 66, :_reduce_34,
  4, 65, :_reduce_35,
  1, 64, :_reduce_36,
  4, 64, :_reduce_37,
  4, 64, :_reduce_38,
  4, 64, :_reduce_39,
  1, 64, :_reduce_40,
  3, 64, :_reduce_41,
  1, 67, :_reduce_42,
  4, 67, :_reduce_43,
  4, 67, :_reduce_44,
  3, 67, :_reduce_45,
  2, 53, :_reduce_46,
  4, 53, :_reduce_47,
  6, 68, :_reduce_48,
  5, 68, :_reduce_49,
  2, 68, :_reduce_50,
  3, 68, :_reduce_51,
  3, 68, :_reduce_52,
  3, 68, :_reduce_53,
  3, 68, :_reduce_54,
  3, 68, :_reduce_55,
  3, 68, :_reduce_56,
  7, 68, :_reduce_57,
  6, 68, :_reduce_58,
  3, 68, :_reduce_59,
  3, 68, :_reduce_60,
  7, 68, :_reduce_61,
  3, 68, :_reduce_62,
  1, 68, :_reduce_63,
  1, 68, :_reduce_64,
  4, 68, :_reduce_65,
  3, 69, :_reduce_66,
  1, 69, :_reduce_67,
  2, 73, :_reduce_68,
  3, 73, :_reduce_69,
  2, 70, :_reduce_70,
  0, 70, :_reduce_71,
  3, 71, :_reduce_72,
  0, 71, :_reduce_73,
  3, 72, :_reduce_74,
  0, 72, :_reduce_75 ]

racc_reduce_n = 76

racc_shift_n = 184

racc_token_table = {
  false => 0,
  :error => 1,
  "==" => 2,
  "!=" => 3,
  :noassoc => 4,
  :NOT => 5,
  "<=>" => 6,
  "<=" => 7,
  "=>" => 8,
  :and => 9,
  :or => 10,
  :class => 11,
  :extends => 12,
  :inverseof => 13,
  :action => 14,
  :foreach => 15,
  :either => 16,
  :create => 17,
  :delete => 18,
  :subset => 19,
  :oneof => 20,
  :allof => 21,
  :invariant => 22,
  :forall => 23,
  :exists => 24,
  :in => 25,
  :empty => 26,
  :true => 27,
  :false => 28,
  :not => 29,
  :equal => 30,
  :equiv => 31,
  :implies => 32,
  :IDENT => 33,
  "{" => 34,
  "}" => 35,
  ".." => 36,
  "+" => 37,
  "0" => 38,
  "1" => 39,
  "(" => 40,
  ")" => 41,
  "," => 42,
  "=" => 43,
  "." => 44,
  "+=" => 45,
  "-=" => 46,
  ":" => 47 }

racc_nt_base = 48

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"==\"",
  "\"!=\"",
  "noassoc",
  "NOT",
  "\"<=>\"",
  "\"<=\"",
  "\"=>\"",
  "and",
  "or",
  "class",
  "extends",
  "inverseof",
  "action",
  "foreach",
  "either",
  "create",
  "delete",
  "subset",
  "oneof",
  "allof",
  "invariant",
  "forall",
  "exists",
  "in",
  "empty",
  "true",
  "false",
  "not",
  "equal",
  "equiv",
  "implies",
  "IDENT",
  "\"{\"",
  "\"}\"",
  "\"..\"",
  "\"+\"",
  "\"0\"",
  "\"1\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "\"=\"",
  "\".\"",
  "\"+=\"",
  "\"-=\"",
  "\":\"",
  "$start",
  "adslspec",
  "root_elems",
  "class_decl",
  "action_decl",
  "invariant_decl",
  "rel_decls",
  "rel_decl",
  "cardinality",
  "inverse_suffix",
  "card_number",
  "action_args",
  "block",
  "additional_args",
  "statements",
  "statement",
  "objset",
  "create_objset",
  "eitherblocks",
  "invariant_objset",
  "formula",
  "quantifier_parameters_with_commas",
  "optional_formula",
  "additional_formulae",
  "additional_invariant_objsets",
  "quantifier_parameter" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'adsl_parser.racc', 11)
  def _reduce_1(val, _values, result)
     return ADSLSpec.new :lineno => lineno, :classes => val[0][0], :actions => val[0][1], :invariants => val[0][2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 13)
  def _reduce_2(val, _values, result)
     val[1][0].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 14)
  def _reduce_3(val, _values, result)
     val[1][1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 15)
  def _reduce_4(val, _values, result)
     val[1][2].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 16)
  def _reduce_5(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 19)
  def _reduce_6(val, _values, result)
     return ADSLClass.new :lineno => val[0], :name => val[1], :relations => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 21)
  def _reduce_7(val, _values, result)
     return ADSLClass.new :lineno => val[0], :name => val[1], :parent_name => val[3], :relations => val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 23)
  def _reduce_8(val, _values, result)
     val[0] << val[1]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 24)
  def _reduce_9(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 26)
  def _reduce_10(val, _values, result)
     return ADSLRelation.new :lineno => val[0][2], :cardinality => val[0].first(2), :to_class_name => val[1], :name => val[2], :inverse_of_name => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 28)
  def _reduce_11(val, _values, result)
     return [val[0][0], val[0][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 29)
  def _reduce_12(val, _values, result)
     return [val[0][0], val[2][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 30)
  def _reduce_13(val, _values, result)
     return [val[0][0], 1.0/0.0, val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 32)
  def _reduce_14(val, _values, result)
     return [0, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 33)
  def _reduce_15(val, _values, result)
     return [1, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 35)
  def _reduce_16(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 36)
  def _reduce_17(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 38)
  def _reduce_18(val, _values, result)
     return ADSLAction.new(:lineno => val[0], :name => val[1], :arg_cardinalities => val[3][0], :arg_types => val[3][1], :arg_names => val[3][2], :block => val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 40)
  def _reduce_19(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 41)
  def _reduce_20(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 43)
  def _reduce_21(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 44)
  def _reduce_22(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 46)
  def _reduce_23(val, _values, result)
     return ADSLBlock.new :lineno => val[0], :statements => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 48)
  def _reduce_24(val, _values, result)
     val[1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 49)
  def _reduce_25(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 51)
  def _reduce_26(val, _values, result)
     return ADSLAssignment.new :lineno => val[0].lineno, :var_name => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 52)
  def _reduce_27(val, _values, result)
     return ADSLObjsetStmt.new :lineno => val[0].lineno, :objset => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 53)
  def _reduce_28(val, _values, result)
     return ADSLDeleteObj.new :lineno => val[0], :objset => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 54)
  def _reduce_29(val, _values, result)
     return ADSLCreateTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 55)
  def _reduce_30(val, _values, result)
     return ADSLDeleteTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 56)
  def _reduce_31(val, _values, result)
     return ADSLForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 57)
  def _reduce_32(val, _values, result)
     val[3].unshift val[1]; return ADSLEither.new :lineno => val[0], :blocks => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 59)
  def _reduce_33(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 60)
  def _reduce_34(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 62)
  def _reduce_35(val, _values, result)
     return ADSLCreateObj.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 64)
  def _reduce_36(val, _values, result)
     return ADSLVariable.new :lineno => val[0].lineno, :var_name => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 65)
  def _reduce_37(val, _values, result)
     return ADSLSubset.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 66)
  def _reduce_38(val, _values, result)
     return ADSLOneOf.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 67)
  def _reduce_39(val, _values, result)
     return ADSLAllOf.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 68)
  def _reduce_40(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 69)
  def _reduce_41(val, _values, result)
     return ADSLDereference.new :lineno => val[0].lineno, :objset => val[0], :rel_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 71)
  def _reduce_42(val, _values, result)
     return ADSLVariable.new :lineno => val[0].lineno, :var_name => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 72)
  def _reduce_43(val, _values, result)
     return ADSLSubset.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 73)
  def _reduce_44(val, _values, result)
     return ADSLAllOf.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 74)
  def _reduce_45(val, _values, result)
     return ADSLDereference.new :lineno => val[0].lineno, :objset => val[0], :rel_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 76)
  def _reduce_46(val, _values, result)
     return ADSLInvariant.new :lineno => val[0], :name => nil, :formula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 77)
  def _reduce_47(val, _values, result)
     return ADSLInvariant.new :lineno => val[0], :name => val[1], :formula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 80)
  def _reduce_48(val, _values, result)
     return ADSLForAll.new :lineno => val[0], :vars => val[2], :subformula => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 82)
  def _reduce_49(val, _values, result)
     return ADSLExists.new :lineno => val[0], :vars => val[2], :subformula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 84)
  def _reduce_50(val, _values, result)
     return ADSLNot.new :lineno => val[0], :subformula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 86)
  def _reduce_51(val, _values, result)
     return ADSLAnd.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 88)
  def _reduce_52(val, _values, result)
     return ADSLOr.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 90)
  def _reduce_53(val, _values, result)
     return ADSLEquiv.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 92)
  def _reduce_54(val, _values, result)
     return ADSLImplies.new :lineno => val[0].lineno, :subformula1 => val[0], :subformula2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 94)
  def _reduce_55(val, _values, result)
     return ADSLImplies.new :lineno => val[0].lineno, :subformula1 => val[2], :subformula2 => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 95)
  def _reduce_56(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 97)
  def _reduce_57(val, _values, result)
     return ADSLEquiv.new :lineno => val[0], :subformulae => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 99)
  def _reduce_58(val, _values, result)
     return ADSLImplies.new :lineno => val[0], :subformula1 => val[2], :subformula2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 101)
  def _reduce_59(val, _values, result)
     return ADSLEqual.new :lineno => val[0].lineno, :objsets => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 103)
  def _reduce_60(val, _values, result)
     return ADSLNot.new(:lineno => val[0].lineno, :subformula => ADSLEqual.new(:lineno => val[0].lineno, :objsets => [val[0], val[2]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 105)
  def _reduce_61(val, _values, result)
     return ADSLEqual.new :lineno => val[0], :objsets => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 106)
  def _reduce_62(val, _values, result)
     return ADSLIn.new :lineno => val[0].lineno, :objset1 => val[0], :objset2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 107)
  def _reduce_63(val, _values, result)
     return ADSLBoolean.new :lineno => val[0], :bool_value => true 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 108)
  def _reduce_64(val, _values, result)
     return ADSLBoolean.new :lineno => val[0], :bool_value => false 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 109)
  def _reduce_65(val, _values, result)
     return ADSLEmpty.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 112)
  def _reduce_66(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 113)
  def _reduce_67(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 115)
  def _reduce_68(val, _values, result)
     return [val[1], ADSLAllOf.new(:lineno => val[0].lineno, :class_name => val[0]), val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 116)
  def _reduce_69(val, _values, result)
     return [val[0], val[2], val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 118)
  def _reduce_70(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 119)
  def _reduce_71(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 121)
  def _reduce_72(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 122)
  def _reduce_73(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 124)
  def _reduce_74(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 125)
  def _reduce_75(val, _values, result)
     return [] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ADSLParser


end
