#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser/adsl_parser.rex'
require 'fol/first_order_logic'

module ADSL

class ADSLParser < Racc::Parser

module_eval(<<'...end adsl_parser.racc/module_eval...', 'adsl_parser.racc', 139)

# generated by racc
  def generate_ast(str)
    scan str
    # do_parse
  end

  def parse(str)
    generate_ast(str).typecheck_and_resolve
  end

...end adsl_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    46,    48,    47,    44,    45,    46,    48,    47,    44,    45,
    46,    48,    47,    44,    45,    46,    48,    47,    44,    45,
    46,    48,    47,    44,    45,    56,    57,    36,   144,   145,
    15,   142,    68,    18,    70,    15,   113,    68,    18,    70,
    91,   114,   122,    95,    96,   149,   140,   -37,    58,    35,
    83,    67,   103,    72,    15,   151,    17,    18,    19,   -37,
    23,    24,    39,    33,    31,    32,    25,    30,    27,    28,
    51,    65,    15,   115,    17,    18,    19,    26,    23,    24,
   116,    33,    31,    32,    25,    30,    27,    28,    51,   117,
    15,    46,    17,    18,    19,    26,    23,    24,   122,    33,
    31,    32,    25,    30,    27,    28,    16,   123,    15,   -20,
    17,    18,    19,    26,    23,    24,   -38,    33,    31,    32,
    25,    30,    27,    28,    51,   125,    15,   126,    17,    18,
    19,    26,    23,    24,   -40,    33,    31,    32,    25,    30,
    27,    28,    51,    62,    15,    81,    17,    18,    19,    26,
    23,    24,    60,    33,    31,    32,    25,    30,    27,    28,
    51,   130,    15,    59,    17,    18,    19,    26,    23,    24,
    55,    33,    31,    32,    25,    30,    27,    28,    51,    54,
    15,    50,    17,    18,    19,    26,    23,    24,   135,    33,
    31,    32,    25,    30,    27,    28,    51,    46,    15,   -42,
    17,    18,    19,    26,    23,    24,    49,    33,    31,    32,
    25,    30,    27,    28,    51,   146,    15,   106,    17,    18,
    19,    26,    23,    24,   148,    33,    31,    32,    25,    30,
    27,    28,    51,   104,    15,   103,    17,    18,    19,    26,
    23,    24,   101,    33,    31,    32,    25,    30,    27,    28,
    51,   100,    15,    43,    17,    18,    19,    26,    23,    24,
   154,    33,    31,    32,    25,    30,    27,    28,    51,   155,
    15,    42,    17,    18,    19,    26,    23,    24,   157,    33,
    31,    32,    25,    30,    27,    28,    51,   -41,    15,    41,
    17,    18,    19,    26,    23,    24,   159,    33,    31,    32,
    25,    30,    27,    28,    51,   160,    15,   122,    17,    18,
    19,    26,    23,    24,   162,    33,    31,    32,    25,    30,
    27,    28,    51,    98,    15,    73,    17,    18,    19,    26,
    23,    24,   167,    33,    31,    32,    25,    30,    27,    28,
    51,    15,    40,    68,    18,    70,   103,    26,   144,   145,
    15,   142,    68,    18,    70,   169,    15,    67,    68,    18,
    70,    15,   170,    68,    18,    70,   140,    15,   171,    68,
    18,    70,    67,   110,    95,    96,    15,    67,    17,    18,
    19,   109,    15,    67,    17,    18,    19,    15,    97,    68,
    18,    70,    51,    15,   108,    68,    18,    70,    51,   112,
    95,    96,    15,    67,    17,    18,    19,    38,    15,    67,
    17,    18,    19,    15,   103,    68,    18,    70,    51,    15,
   108,    68,    18,    70,    51,   107,   118,   119,    15,    67,
    68,    18,    70,    81,    15,    67,    17,    18,    19,    15,
    37,    17,    18,    19,    67,    15,   122,    17,    18,    19,
    51,     6,    81,     6,     7,    51,     7,     6,   163,   164,
     7,    51,     8,     6,     8,    34,     7,    14,     8,    46,
    48,    47,    44,    45,     8,    46,    48,    47,    44,    45,
    46,    48,    47,    44,    45,    46,    48,    47,    44,    45,
    46,    48,    47,    44,    45,   137,    13,   147,    95,    96,
   103,   176,   105,   174,   175,   103,   102,   165,   166,   103,
    46,    48,    47,    46,    48,    47,     9,   184,   103,   103,
   103,   122 ]

racc_action_check = [
    84,    84,    84,    84,    84,    85,    85,    85,    85,    85,
   127,   127,   127,   127,   127,    53,    53,    53,    53,    53,
   133,   133,   133,   133,   133,    29,    29,    13,   122,   122,
   122,   122,   122,   122,   122,    40,    84,    40,    40,    40,
    61,    85,   177,    61,    61,   127,   122,    51,    29,    13,
    53,    40,   177,    42,   113,   133,   113,   113,   113,    16,
   113,   113,    16,   113,   113,   113,   113,   113,   113,   113,
   113,    38,    46,    89,    46,    46,    46,   113,    46,    46,
    90,    46,    46,    46,    46,    46,    46,    46,    46,    93,
     8,    78,     8,     8,     8,    46,     8,     8,    98,     8,
     8,     8,     8,     8,     8,     8,     8,    99,    45,    37,
    45,    45,    45,     8,    45,    45,   102,    45,    45,    45,
    45,    45,    45,    45,    45,   103,    44,   104,    44,    44,
    44,    45,    44,    44,   106,    44,    44,    44,    44,    44,
    44,    44,    44,    36,    47,   108,    47,    47,    47,    44,
    47,    47,    33,    47,    47,    47,    47,    47,    47,    47,
    47,   111,    39,    30,    39,    39,    39,    47,    39,    39,
    28,    39,    39,    39,    39,    39,    39,    39,    39,    27,
   164,    24,   164,   164,   164,    39,   164,   164,   117,   164,
   164,   164,   164,   164,   164,   164,   164,    77,    48,    73,
    48,    48,    48,   164,    48,    48,    23,    48,    48,    48,
    48,    48,    48,    48,    48,   123,   107,    72,   107,   107,
   107,    48,   107,   107,   126,   107,   107,   107,   107,   107,
   107,   107,   107,    70,   112,   129,   112,   112,   112,   107,
   112,   112,    68,   112,   112,   112,   112,   112,   112,   112,
   112,    65,    54,    21,    54,    54,    54,   112,    54,    54,
   135,    54,    54,    54,    54,    54,    54,    54,    54,   138,
    55,    19,    55,    55,    55,    54,    55,    55,   140,    55,
    55,    55,    55,    55,    55,    55,    55,   141,   114,    18,
   114,   114,   114,    55,   114,   114,   143,   114,   114,   114,
   114,   114,   114,   114,   114,   144,    26,   145,    26,    26,
    26,   114,    26,    26,   146,    26,    26,    26,    26,    26,
    26,    26,    26,    63,    25,    43,    25,    25,    25,    26,
    25,    25,   154,    25,    25,    25,    25,    25,    25,    25,
    25,   110,    17,   110,   110,   110,   158,    25,   139,   139,
   139,   139,   139,   139,   139,   159,   142,   110,   142,   142,
   142,   101,   160,   101,   101,   101,   139,   157,   161,   157,
   157,   157,   142,    81,   118,   118,   166,   101,   166,   166,
   166,    81,   115,   157,   115,   115,   115,    41,    62,    41,
    41,    41,   166,   170,    82,   170,   170,   170,   115,    82,
    64,    64,    57,    41,    57,    57,    57,    15,    59,   170,
    59,    59,    59,   174,   168,   174,   174,   174,    57,   175,
    79,   175,   175,   175,    59,    79,    94,    94,   176,   174,
   176,   176,   176,    49,    58,   175,    58,    58,    58,    60,
    14,    60,    60,    60,   176,    56,   171,    56,    56,    56,
    58,     5,    50,     4,     5,    60,     4,     0,   150,   150,
     0,    56,     5,     3,     4,     9,     3,     7,     0,   131,
   131,   131,   131,   131,     3,    22,    22,    22,    22,    22,
   172,   172,   172,   172,   172,    66,    66,    66,    66,    66,
   132,   132,   132,   132,   132,   120,     6,   124,   120,   120,
   124,   169,    71,   169,   169,    71,    69,   152,   152,    69,
    74,    74,    74,    75,    75,    75,     1,   178,   180,   181,
   182,   184 ]

racc_action_pointer = [
   446,   516,   nil,   452,   442,   440,   463,   434,    73,   465,
   nil,   nil,   nil,    15,   400,   367,    15,   302,   249,   231,
   nil,   209,   469,   166,   141,   307,   289,   139,   130,    23,
   123,   nil,   nil,   112,   nil,   nil,   110,    68,    38,   145,
    18,   370,    20,   292,   109,    91,    55,   127,   181,   400,
   419,     3,   nil,     9,   235,   253,   428,   385,   417,   391,
   422,     5,   354,   282,   362,   210,   479,   nil,   202,   465,
   193,   461,   176,   155,   504,   507,   nil,   191,    85,   378,
   nil,   348,   352,   nil,    -6,    -1,   nil,   nil,   nil,    31,
    39,   nil,   nil,    56,   390,   nil,   nil,   nil,    64,    74,
   nil,   344,    72,    92,    94,   nil,    90,   199,   112,   nil,
   324,   120,   217,    37,   271,   365,   nil,   155,   336,   nil,
   460,   nil,    13,   182,   456,   nil,   183,     4,   nil,   191,
   nil,   463,   484,    14,   nil,   247,   nil,   nil,   234,   333,
   235,   243,   339,   252,   272,   273,   272,   nil,   nil,   nil,
   417,   nil,   466,   nil,   299,   nil,   nil,   350,   302,   322,
   315,   358,   nil,   nil,   163,   nil,   359,   nil,   370,   458,
   376,   412,   474,   nil,   396,   402,   411,     8,   507,   nil,
   474,   475,   476,   nil,   487,   nil ]

racc_action_default = [
    -5,   -77,    -1,    -5,    -5,    -5,   -77,   -77,   -77,   -77,
    -2,    -3,    -4,   -77,   -77,   -77,   -43,   -77,   -77,   -77,
   -41,   -77,   -47,   -77,   -77,   -77,   -77,   -77,   -77,   -77,
   -77,   -64,   -65,   -77,   186,    -9,   -77,   -22,   -77,   -77,
   -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,   -77,
   -77,   -43,   -51,   -77,   -77,   -77,   -77,   -77,   -77,   -77,
   -77,   -77,   -77,   -77,   -77,   -77,   -48,   -37,   -77,   -77,
   -77,   -77,   -77,   -46,   -52,   -53,   -54,   -55,   -56,   -77,
   -68,   -77,   -72,   -57,   -77,   -77,   -60,   -61,   -63,   -77,
   -77,    -6,    -8,   -77,   -11,   -14,   -15,    -9,   -77,   -77,
   -36,   -77,   -44,   -77,   -77,   -39,   -45,   -77,   -77,   -69,
   -77,   -77,   -77,   -77,   -77,   -77,   -66,   -77,   -77,   -13,
   -77,   -18,   -25,   -77,   -77,   -42,   -77,   -77,   -67,   -70,
   -50,   -71,   -74,   -77,   -76,   -17,   -12,    -7,   -77,   -25,
   -37,   -27,   -77,   -77,   -77,   -77,   -19,   -38,   -40,   -49,
   -77,   -59,   -77,   -10,   -77,   -23,   -24,   -77,   -28,   -77,
   -77,   -77,   -21,   -58,   -77,   -62,   -77,   -16,   -26,   -42,
   -77,   -77,   -73,   -75,   -77,   -77,   -77,   -77,   -33,   -35,
   -29,   -30,   -31,   -32,   -77,   -34 ]

racc_goto_table = [
    22,    69,    71,   121,    86,    87,    88,    89,    90,   138,
    61,   141,    79,    82,     1,    64,     2,    52,    53,    10,
    11,    12,    63,   178,   136,   153,   156,    99,   141,   111,
   150,    66,   152,   128,   nil,   nil,    74,    75,    76,    77,
    78,   nil,   nil,   nil,   nil,   nil,    84,    85,   nil,   nil,
   161,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   124,   134,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   129,   120,   nil,   nil,   nil,   179,   nil,   nil,   nil,
   nil,   nil,   183,   143,   nil,   nil,   nil,   nil,   nil,   185,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   127,
   143,   nil,   nil,   158,   131,   132,   133,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   173,   nil,   nil,   nil,   168,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   177,   nil,   nil,   nil,   180,   181,   182,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   172 ]

racc_goto_check = [
    20,    16,    16,    12,    19,    19,    19,    19,    19,    14,
     6,    17,    21,    21,     1,    13,     2,    20,    20,     2,
     2,     2,    11,    18,    10,     9,    14,     8,    17,    22,
    23,    20,    24,    25,   nil,   nil,    20,    20,    20,    20,
    20,   nil,   nil,   nil,   nil,   nil,    20,    20,   nil,   nil,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    16,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    16,     6,   nil,   nil,   nil,    12,   nil,   nil,   nil,
   nil,   nil,    12,    16,   nil,   nil,   nil,   nil,   nil,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,
    16,   nil,   nil,    16,    20,    20,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,    16,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    16,   nil,   nil,   nil,    16,    16,    16,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    20 ]

racc_goto_pointer = [
   nil,    14,    16,   nil,   nil,   nil,   -25,   nil,   -37,  -110,
   -94,   -15,   -95,   -22,  -113,   nil,   -39,  -111,  -148,   -52,
    -8,   -37,   -53,  -102,  -102,   -75 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,   nil,    92,    93,   nil,
    94,   nil,   nil,   nil,   nil,   139,    21,    20,   nil,    29,
   nil,   nil,   nil,   nil,   nil,    80 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 49, :_reduce_1,
  2, 50, :_reduce_2,
  2, 50, :_reduce_3,
  2, 50, :_reduce_4,
  0, 50, :_reduce_5,
  5, 51, :_reduce_6,
  7, 51, :_reduce_7,
  2, 54, :_reduce_8,
  0, 54, :_reduce_9,
  4, 55, :_reduce_10,
  1, 56, :_reduce_11,
  3, 56, :_reduce_12,
  2, 56, :_reduce_13,
  1, 58, :_reduce_14,
  1, 58, :_reduce_15,
  2, 57, :_reduce_16,
  0, 57, :_reduce_17,
  6, 52, :_reduce_18,
  4, 59, :_reduce_19,
  0, 59, :_reduce_20,
  5, 61, :_reduce_21,
  0, 61, :_reduce_22,
  3, 60, :_reduce_23,
  2, 62, :_reduce_24,
  0, 62, :_reduce_25,
  3, 63, :_reduce_26,
  1, 63, :_reduce_27,
  2, 63, :_reduce_28,
  5, 63, :_reduce_29,
  5, 63, :_reduce_30,
  5, 63, :_reduce_31,
  5, 63, :_reduce_32,
  4, 63, :_reduce_33,
  3, 66, :_reduce_34,
  1, 66, :_reduce_35,
  4, 65, :_reduce_36,
  1, 64, :_reduce_37,
  4, 64, :_reduce_38,
  4, 64, :_reduce_39,
  4, 64, :_reduce_40,
  1, 64, :_reduce_41,
  3, 64, :_reduce_42,
  1, 67, :_reduce_43,
  4, 67, :_reduce_44,
  4, 67, :_reduce_45,
  3, 67, :_reduce_46,
  2, 53, :_reduce_47,
  4, 53, :_reduce_48,
  6, 68, :_reduce_49,
  5, 68, :_reduce_50,
  2, 68, :_reduce_51,
  3, 68, :_reduce_52,
  3, 68, :_reduce_53,
  3, 68, :_reduce_54,
  3, 68, :_reduce_55,
  3, 68, :_reduce_56,
  3, 68, :_reduce_57,
  7, 68, :_reduce_58,
  6, 68, :_reduce_59,
  3, 68, :_reduce_60,
  3, 68, :_reduce_61,
  7, 68, :_reduce_62,
  3, 68, :_reduce_63,
  1, 68, :_reduce_64,
  1, 68, :_reduce_65,
  4, 68, :_reduce_66,
  3, 69, :_reduce_67,
  1, 69, :_reduce_68,
  2, 73, :_reduce_69,
  3, 73, :_reduce_70,
  2, 70, :_reduce_71,
  0, 70, :_reduce_72,
  3, 71, :_reduce_73,
  0, 71, :_reduce_74,
  3, 72, :_reduce_75,
  0, 72, :_reduce_76 ]

racc_reduce_n = 77

racc_shift_n = 186

racc_token_table = {
  false => 0,
  :error => 1,
  "==" => 2,
  "!=" => 3,
  :noassoc => 4,
  :NOT => 5,
  "<=>" => 6,
  "<=" => 7,
  "=>" => 8,
  :and => 9,
  :or => 10,
  :class => 11,
  :extends => 12,
  :inverseof => 13,
  :action => 14,
  :foreach => 15,
  :either => 16,
  :create => 17,
  :delete => 18,
  :subset => 19,
  :oneof => 20,
  :allof => 21,
  :invariant => 22,
  :forall => 23,
  :exists => 24,
  :in => 25,
  :empty => 26,
  :true => 27,
  :false => 28,
  :not => 29,
  :equal => 30,
  :equiv => 31,
  :implies => 32,
  :IDENT => 33,
  "{" => 34,
  "}" => 35,
  ".." => 36,
  "+" => 37,
  "0" => 38,
  "1" => 39,
  "(" => 40,
  ")" => 41,
  "," => 42,
  "=" => 43,
  "." => 44,
  "+=" => 45,
  "-=" => 46,
  ":" => 47 }

racc_nt_base = 48

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"==\"",
  "\"!=\"",
  "noassoc",
  "NOT",
  "\"<=>\"",
  "\"<=\"",
  "\"=>\"",
  "and",
  "or",
  "class",
  "extends",
  "inverseof",
  "action",
  "foreach",
  "either",
  "create",
  "delete",
  "subset",
  "oneof",
  "allof",
  "invariant",
  "forall",
  "exists",
  "in",
  "empty",
  "true",
  "false",
  "not",
  "equal",
  "equiv",
  "implies",
  "IDENT",
  "\"{\"",
  "\"}\"",
  "\"..\"",
  "\"+\"",
  "\"0\"",
  "\"1\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "\"=\"",
  "\".\"",
  "\"+=\"",
  "\"-=\"",
  "\":\"",
  "$start",
  "adslspec",
  "root_elems",
  "class_decl",
  "action_decl",
  "invariant_decl",
  "rel_decls",
  "rel_decl",
  "cardinality",
  "inverse_suffix",
  "card_number",
  "action_args",
  "block",
  "additional_args",
  "statements",
  "statement",
  "objset",
  "create_objset",
  "eitherblocks",
  "invariant_objset",
  "formula",
  "quantifier_parameters_with_commas",
  "optional_formula",
  "additional_formulae",
  "additional_invariant_objsets",
  "quantifier_parameter" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'adsl_parser.racc', 11)
  def _reduce_1(val, _values, result)
     return ADSLSpec.new :lineno => lineno, :classes => val[0][0], :actions => val[0][1], :invariants => val[0][2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 13)
  def _reduce_2(val, _values, result)
     val[1][0].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 14)
  def _reduce_3(val, _values, result)
     val[1][1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 15)
  def _reduce_4(val, _values, result)
     val[1][2].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 16)
  def _reduce_5(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 19)
  def _reduce_6(val, _values, result)
     return ADSLClass.new :lineno => val[0], :name => val[1], :relations => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 21)
  def _reduce_7(val, _values, result)
     return ADSLClass.new :lineno => val[0], :name => val[1], :parent_name => val[3], :relations => val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 23)
  def _reduce_8(val, _values, result)
     val[0] << val[1]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 24)
  def _reduce_9(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 26)
  def _reduce_10(val, _values, result)
     return ADSLRelation.new :lineno => val[0][2], :cardinality => val[0].first(2), :to_class_name => val[1], :name => val[2], :inverse_of_name => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 28)
  def _reduce_11(val, _values, result)
     return [val[0][0], val[0][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 29)
  def _reduce_12(val, _values, result)
     return [val[0][0], val[2][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 30)
  def _reduce_13(val, _values, result)
     return [val[0][0], 1.0/0.0, val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 32)
  def _reduce_14(val, _values, result)
     return [0, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 33)
  def _reduce_15(val, _values, result)
     return [1, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 35)
  def _reduce_16(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 36)
  def _reduce_17(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 38)
  def _reduce_18(val, _values, result)
     return ADSLAction.new(:lineno => val[0], :name => val[1], :arg_cardinalities => val[3][0], :arg_types => val[3][1], :arg_names => val[3][2], :block => val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 40)
  def _reduce_19(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 41)
  def _reduce_20(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 43)
  def _reduce_21(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 44)
  def _reduce_22(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 46)
  def _reduce_23(val, _values, result)
     return ADSLBlock.new :lineno => val[0], :statements => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 48)
  def _reduce_24(val, _values, result)
     val[1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 49)
  def _reduce_25(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 51)
  def _reduce_26(val, _values, result)
     return ADSLAssignment.new :lineno => val[0].lineno, :var_name => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 52)
  def _reduce_27(val, _values, result)
     return ADSLObjsetStmt.new :lineno => val[0].lineno, :objset => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 53)
  def _reduce_28(val, _values, result)
     return ADSLDeleteObj.new :lineno => val[0], :objset => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 54)
  def _reduce_29(val, _values, result)
     return ADSLCreateTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 55)
  def _reduce_30(val, _values, result)
     return ADSLDeleteTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 56)
  def _reduce_31(val, _values, result)
     return ADSLSetTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 57)
  def _reduce_32(val, _values, result)
     return ADSLForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 58)
  def _reduce_33(val, _values, result)
     val[3].unshift val[1]; return ADSLEither.new :lineno => val[0], :blocks => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 60)
  def _reduce_34(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 61)
  def _reduce_35(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 63)
  def _reduce_36(val, _values, result)
     return ADSLCreateObj.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 65)
  def _reduce_37(val, _values, result)
     return ADSLVariable.new :lineno => val[0].lineno, :var_name => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 66)
  def _reduce_38(val, _values, result)
     return ADSLSubset.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 67)
  def _reduce_39(val, _values, result)
     return ADSLOneOf.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 68)
  def _reduce_40(val, _values, result)
     return ADSLAllOf.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 69)
  def _reduce_41(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 70)
  def _reduce_42(val, _values, result)
     return ADSLDereference.new :lineno => val[0].lineno, :objset => val[0], :rel_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 72)
  def _reduce_43(val, _values, result)
     return ADSLVariable.new :lineno => val[0].lineno, :var_name => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 73)
  def _reduce_44(val, _values, result)
     return ADSLSubset.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 74)
  def _reduce_45(val, _values, result)
     return ADSLAllOf.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 75)
  def _reduce_46(val, _values, result)
     return ADSLDereference.new :lineno => val[0].lineno, :objset => val[0], :rel_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 77)
  def _reduce_47(val, _values, result)
     return ADSLInvariant.new :lineno => val[0], :name => nil, :formula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 78)
  def _reduce_48(val, _values, result)
     return ADSLInvariant.new :lineno => val[0], :name => val[1], :formula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 81)
  def _reduce_49(val, _values, result)
     return ADSLForAll.new :lineno => val[0], :vars => val[2], :subformula => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 83)
  def _reduce_50(val, _values, result)
     return ADSLExists.new :lineno => val[0], :vars => val[2], :subformula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 85)
  def _reduce_51(val, _values, result)
     return ADSLNot.new :lineno => val[0], :subformula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 87)
  def _reduce_52(val, _values, result)
     return ADSLAnd.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 89)
  def _reduce_53(val, _values, result)
     return ADSLOr.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 91)
  def _reduce_54(val, _values, result)
     return ADSLEquiv.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 93)
  def _reduce_55(val, _values, result)
     return ADSLImplies.new :lineno => val[0].lineno, :subformula1 => val[0], :subformula2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 95)
  def _reduce_56(val, _values, result)
     return ADSLImplies.new :lineno => val[0].lineno, :subformula1 => val[2], :subformula2 => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 96)
  def _reduce_57(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 98)
  def _reduce_58(val, _values, result)
     return ADSLEquiv.new :lineno => val[0], :subformulae => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 100)
  def _reduce_59(val, _values, result)
     return ADSLImplies.new :lineno => val[0], :subformula1 => val[2], :subformula2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 102)
  def _reduce_60(val, _values, result)
     return ADSLEqual.new :lineno => val[0].lineno, :objsets => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 104)
  def _reduce_61(val, _values, result)
     return ADSLNot.new(:lineno => val[0].lineno, :subformula => ADSLEqual.new(:lineno => val[0].lineno, :objsets => [val[0], val[2]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 106)
  def _reduce_62(val, _values, result)
     return ADSLEqual.new :lineno => val[0], :objsets => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 107)
  def _reduce_63(val, _values, result)
     return ADSLIn.new :lineno => val[0].lineno, :objset1 => val[0], :objset2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 108)
  def _reduce_64(val, _values, result)
     return ADSLBoolean.new :lineno => val[0], :bool_value => true 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 109)
  def _reduce_65(val, _values, result)
     return ADSLBoolean.new :lineno => val[0], :bool_value => false 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 110)
  def _reduce_66(val, _values, result)
     return ADSLEmpty.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 113)
  def _reduce_67(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 114)
  def _reduce_68(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 116)
  def _reduce_69(val, _values, result)
     return [val[1], ADSLAllOf.new(:lineno => val[0].lineno, :class_name => val[0]), val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 117)
  def _reduce_70(val, _values, result)
     return [val[0], val[2], val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 119)
  def _reduce_71(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 120)
  def _reduce_72(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 122)
  def _reduce_73(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 123)
  def _reduce_74(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 125)
  def _reduce_75(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 126)
  def _reduce_76(val, _values, result)
     return [] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ADSLParser


end
