#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'adsl/parser/adsl_parser.rex'
require 'adsl/fol/first_order_logic'

module ADSL
  module Parser

class ADSLParser < Racc::Parser

module_eval(<<'...end adsl_parser.racc/module_eval...', 'adsl_parser.racc', 152)

# generated by racc
  def generate_ast(str)
    scan str
    # do_parse
  end

  def parse(str)
    generate_ast(str).typecheck_and_resolve
  end

...end adsl_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    50,    52,    51,    48,    49,    50,    52,    51,    48,    49,
    50,    52,    51,    48,    49,    50,    52,    51,    48,    49,
    50,    52,    51,    48,    49,    38,    44,    38,   170,    44,
   149,    44,    44,    44,    36,    50,    50,    52,    51,    48,
    49,   106,   111,   108,   105,    45,    46,   112,    44,   106,
   115,    86,   110,   107,    44,    44,   143,   120,   120,   121,
    35,   145,   103,   113,    39,   168,   169,   100,   114,   101,
   120,    19,    47,    95,    96,    16,    17,    18,   122,    23,
    24,    44,    33,    21,    30,    31,    25,    29,    27,    28,
    84,    55,    50,    52,    51,    48,    49,    19,    26,   157,
   158,    16,    17,    18,    32,    23,    24,   104,    33,    21,
    30,    31,    25,    29,    27,    28,   126,    55,    50,    52,
    51,    48,    49,    19,    26,    95,    96,    16,    17,    18,
    32,    23,    24,   102,    33,    21,    30,    31,    25,    29,
    27,    28,   133,    55,    91,    95,    96,    95,    96,    19,
    26,   159,   160,    16,    17,    18,    32,    23,    24,    44,
    33,    21,    30,    31,    25,    29,    27,    28,    98,    55,
    50,    52,    51,    48,    49,    19,    26,   116,   117,    16,
    17,    18,    32,    23,    24,    97,    33,    21,    30,    31,
    25,    29,    27,    28,   131,    55,    50,    52,    51,    48,
    49,    19,    26,    38,    84,    16,    17,    18,    32,    23,
    24,    84,    33,    21,    30,    31,    25,    29,    27,    28,
   141,    55,    50,    52,    51,    48,    49,    19,    26,   142,
    73,    16,    17,    18,    32,    23,    24,    44,    33,    21,
    30,    31,    25,    29,    27,    28,    70,    55,    50,    52,
    51,   -20,    63,    19,    26,    44,   148,    16,    17,    18,
    32,    23,    24,    50,    33,    21,    30,    31,    25,    29,
    27,    28,    61,    55,    50,    52,    51,   151,    60,    19,
    26,   153,   120,    16,    17,    18,    32,    23,    24,    59,
    33,    21,    30,    31,    25,    29,    27,    28,   156,    55,
    58,    54,   161,   162,    44,    19,    26,   163,   164,    16,
    17,    18,    32,    23,    24,    53,    33,    21,    30,    31,
    25,    29,    27,    28,    43,    55,    42,    41,    40,   120,
   175,    19,    26,    37,    44,    16,    17,    18,    32,    23,
    24,    34,    33,    21,    30,    31,    25,    29,    27,    28,
    14,    55,    13,     9,   180,   120,    44,    19,    26,    44,
    44,    16,    17,    18,    32,    23,    24,   120,    33,    21,
    30,    31,    25,    29,    27,    28,   nil,    55,   nil,   nil,
   nil,   nil,   nil,    19,    26,   nil,   nil,    16,    17,    18,
    32,    23,    24,   nil,    33,    21,    30,    31,    25,    29,
    27,    28,   nil,    15,   nil,   nil,   nil,   nil,   nil,    19,
    26,   nil,   nil,    16,    17,    18,    32,    23,    24,   nil,
    33,    21,    30,    31,    25,    29,    27,    28,   nil,    55,
   nil,   nil,   nil,   nil,   nil,    19,    26,   nil,   nil,    16,
    17,    18,    32,    23,    24,   nil,    33,    21,    30,    31,
    25,    29,    27,    28,   nil,    55,   nil,   nil,   nil,   nil,
   nil,    19,    26,   nil,   nil,    16,    17,    18,    32,    23,
    24,   nil,    33,    21,    30,    31,    25,    29,    27,    28,
   nil,    55,   nil,   nil,   nil,   nil,   nil,    19,    26,   nil,
   nil,    16,    17,    18,    32,    23,    24,   nil,    33,    21,
    30,    31,    25,    29,    27,    28,   nil,    55,   nil,   138,
   139,    19,   137,   140,    26,    16,    17,    18,   nil,   nil,
    32,   nil,     6,    21,   nil,     7,   138,   139,    19,   137,
   140,    55,    16,    17,    18,     8,   nil,    19,   nil,   nil,
    21,    16,    17,    18,   nil,   nil,    19,   nil,    55,    21,
    16,    17,    18,   nil,   nil,    19,   nil,    55,    21,    16,
    17,    18,   nil,   nil,    19,   nil,    55,    21,    16,    17,
    18,   nil,   nil,    19,   nil,    55,    21,    16,    17,    18,
   nil,   nil,    19,   nil,    71,    21,    16,    17,    18,   nil,
   nil,    19,   nil,    55,    21,    16,    17,    18,   nil,   nil,
    19,   nil,    55,    21,    16,    17,    18,   nil,   nil,    19,
   nil,    55,    21,    16,    17,    18,   nil,   nil,    19,   nil,
    55,    21,    16,    17,    18,   nil,   nil,    19,   nil,    55,
    21,    16,    17,    18,   nil,   nil,    19,   nil,    55,    21,
    16,    17,    18,   nil,   nil,    19,   nil,    55,    21,    16,
    17,    18,   nil,   nil,    19,   nil,    55,    21,    16,    17,
    18,   nil,   nil,    19,   nil,    55,    21,    16,    17,    18,
   nil,   nil,    19,   nil,    55,    21,    16,    17,    18,   nil,
   nil,    19,   nil,    55,    21,    16,    17,    18,   nil,   nil,
   nil,     6,    55,    21,     7,     6,     6,   nil,     7,     7,
   nil,    55,   nil,   nil,     8,   nil,   nil,   nil,     8,     8 ]

racc_action_check = [
    87,    87,    87,    87,    87,    88,    88,    88,    88,    88,
    57,    57,    57,    57,    57,   123,   123,   123,   123,   123,
   129,   129,   129,   129,   129,    15,    89,    71,   162,   171,
   134,    68,    90,    69,    13,    80,   155,   155,   155,   155,
   155,    82,    87,    84,    82,    20,    20,    88,    76,    85,
    93,    57,    85,    84,    20,    75,   123,    98,   171,    99,
    13,   129,    71,    89,    15,   162,   162,    68,    90,    69,
   155,   111,    20,    65,    65,   111,   111,   111,   104,   111,
   111,    74,   111,   111,   111,   111,   111,   111,   111,   111,
   106,   111,   166,   166,   166,   166,   166,   112,   111,   144,
   144,   112,   112,   112,   111,   112,   112,    72,   112,   112,
   112,   112,   112,   112,   112,   112,   109,   112,   128,   128,
   128,   128,   128,   158,   112,   116,   116,   158,   158,   158,
   112,   158,   158,    70,   158,   158,   158,   158,   158,   158,
   158,   158,   118,   158,    62,   118,   118,    62,    62,    50,
   158,   146,   146,    50,    50,    50,   158,    50,    50,    66,
    50,    50,    50,    50,    50,    50,    50,    50,    64,    50,
    67,    67,    67,    67,    67,    39,    50,    94,    94,    39,
    39,    39,    50,    39,    39,    63,    39,    39,    39,    39,
    39,    39,    39,    39,   115,    39,    22,    22,    22,    22,
    22,   105,    39,    55,    54,   105,   105,   105,    39,   105,
   105,    53,   105,   105,   105,   105,   105,   105,   105,   105,
   121,   105,   127,   127,   127,   127,   127,    49,   105,   122,
    44,    49,    49,    49,   105,    49,    49,   125,    49,    49,
    49,    49,    49,    49,    49,    49,    42,    49,    78,    78,
    78,    37,    36,    25,    49,   130,   131,    25,    25,    25,
    49,    25,    25,    81,    25,    25,    25,    25,    25,    25,
    25,    25,    33,    25,    77,    77,    77,   136,    29,    26,
    25,   138,   139,    26,    26,    26,    25,    26,    26,    28,
    26,    26,    26,    26,    26,    26,    26,    26,   141,    26,
    27,    24,   148,   151,   152,   110,    26,   153,   154,   110,
   110,   110,    26,   110,   110,    23,   110,   110,   110,   110,
   110,   110,   110,   110,    19,   110,    18,    17,    16,   164,
   165,   140,   110,    14,   167,   140,   140,   140,   110,   140,
   140,     9,   140,   140,   140,   140,   140,   140,   140,   140,
     7,   140,     6,     1,   172,   175,   176,    52,   140,   177,
   178,    52,    52,    52,   140,    52,    52,   180,    52,    52,
    52,    52,    52,    52,    52,    52,   nil,    52,   nil,   nil,
   nil,   nil,   nil,     8,    52,   nil,   nil,     8,     8,     8,
    52,     8,     8,   nil,     8,     8,     8,     8,     8,     8,
     8,     8,   nil,     8,   nil,   nil,   nil,   nil,   nil,    58,
     8,   nil,   nil,    58,    58,    58,     8,    58,    58,   nil,
    58,    58,    58,    58,    58,    58,    58,    58,   nil,    58,
   nil,   nil,   nil,   nil,   nil,    59,    58,   nil,   nil,    59,
    59,    59,    58,    59,    59,   nil,    59,    59,    59,    59,
    59,    59,    59,    59,   nil,    59,   nil,   nil,   nil,   nil,
   nil,    51,    59,   nil,   nil,    51,    51,    51,    59,    51,
    51,   nil,    51,    51,    51,    51,    51,    51,    51,    51,
   nil,    51,   nil,   nil,   nil,   nil,   nil,    48,    51,   nil,
   nil,    48,    48,    48,    51,    48,    48,   nil,    48,    48,
    48,    48,    48,    48,    48,    48,   nil,    48,   nil,   120,
   120,   120,   120,   120,    48,   120,   120,   120,   nil,   nil,
    48,   nil,     0,   120,   nil,     0,   135,   135,   135,   135,
   135,   120,   135,   135,   135,     0,   nil,    45,   nil,   nil,
   135,    45,    45,    45,   nil,   nil,   113,   nil,   135,    45,
   113,   113,   113,   nil,   nil,    47,   nil,    45,   113,    47,
    47,    47,   nil,   nil,    43,   nil,   113,    47,    43,    43,
    43,   nil,   nil,    41,   nil,    47,    43,    41,    41,    41,
   nil,   nil,    40,   nil,    43,    41,    40,    40,    40,   nil,
   nil,    38,   nil,    41,    40,    38,    38,    38,   nil,   nil,
   137,   nil,    40,    38,   137,   137,   137,   nil,   nil,   108,
   nil,    38,   137,   108,   108,   108,   nil,   nil,   160,   nil,
   137,   108,   160,   160,   160,   nil,   nil,   163,   nil,   108,
   160,   163,   163,   163,   nil,   nil,   168,   nil,   160,   163,
   168,   168,   168,   nil,   nil,   169,   nil,   163,   168,   169,
   169,   169,   nil,   nil,   170,   nil,   168,   169,   170,   170,
   170,   nil,   nil,    60,   nil,   169,   170,    60,    60,    60,
   nil,   nil,    61,   nil,   170,    60,    61,    61,    61,   nil,
   nil,    46,   nil,    60,    61,    46,    46,    46,   nil,   nil,
   nil,     5,    61,    46,     5,     4,     3,   nil,     4,     3,
   nil,    46,   nil,   nil,     5,   nil,   nil,   nil,     4,     3 ]

racc_action_pointer = [
   509,   353,   nil,   683,   682,   678,   313,   311,   364,   341,
   nil,   nil,   nil,    20,   287,    13,   282,   281,   280,   278,
    43,   nil,   190,   269,   255,   234,   260,   254,   243,   232,
   nil,   nil,   nil,   226,   nil,   nil,   213,   204,   572,   156,
   563,   554,   207,   545,   191,   518,   662,   536,   468,   208,
   130,   442,   338,   172,   165,   191,   nil,     4,   390,   416,
   644,   653,   103,   145,   121,    29,   148,   164,    20,    22,
    86,    15,    96,   nil,    70,    44,    37,   268,   242,   nil,
    29,   257,    -7,   nil,    14,     1,   nil,    -6,    -1,    15,
    21,   nil,   nil,    11,   135,   nil,   nil,   nil,    17,    20,
   nil,   nil,   nil,   nil,    39,   182,    51,   nil,   590,    69,
   286,    52,    78,   527,   nil,   155,    81,   nil,   101,   nil,
   492,   181,   182,     9,   nil,   226,   nil,   216,   112,    14,
   244,   241,   nil,   nil,   -11,   509,   266,   581,   242,   242,
   312,   250,   nil,   nil,    52,   nil,   104,   nil,   263,   nil,
   nil,   264,   293,   256,   298,    30,   nil,   nil,   104,   nil,
   599,   nil,    16,   608,   289,   308,    86,   323,   617,   626,
   635,    18,   344,   nil,   nil,   315,   345,   348,   349,   nil,
   327,   nil,   nil ]

racc_action_default = [
    -5,   -78,    -1,    -5,    -5,    -5,   -78,   -78,   -78,   -78,
    -2,    -3,    -4,   -78,   -78,   -38,   -78,   -78,   -78,   -78,
   -78,   -46,   -47,   -78,   -78,   -78,   -78,   -78,   -78,   -78,
   -64,   -65,   -66,   -78,   183,    -9,   -78,   -22,   -78,   -78,
   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,
   -78,   -78,   -78,   -78,   -78,   -38,   -51,   -78,   -78,   -78,
   -78,   -78,   -78,   -78,   -78,   -78,   -39,   -48,   -78,   -78,
   -78,   -38,   -78,   -45,   -60,   -61,   -63,   -52,   -53,   -54,
   -55,   -56,   -78,   -69,   -78,   -73,   -57,   -78,   -78,   -78,
   -78,    -6,    -8,   -78,   -11,   -14,   -15,    -9,   -78,   -78,
   -40,   -41,   -42,   -43,   -78,   -78,   -78,   -70,   -78,   -78,
   -78,   -78,   -78,   -78,   -67,   -78,   -78,   -13,   -78,   -18,
   -25,   -78,   -45,   -78,   -68,   -71,   -50,   -72,   -75,   -78,
   -77,   -17,   -12,    -7,   -78,   -25,   -26,   -78,   -78,   -78,
   -78,   -19,   -44,   -49,   -78,   -59,   -78,   -10,   -78,   -23,
   -24,   -78,   -27,   -78,   -78,   -78,   -21,   -58,   -78,   -62,
   -78,   -16,   -45,   -78,   -78,   -35,   -74,   -76,   -78,   -78,
   -78,   -78,   -32,   -37,   -33,   -78,   -28,   -29,   -30,   -31,
   -78,   -34,   -36 ]

racc_goto_table = [
    22,    62,     1,     2,   119,   134,    10,    11,    12,    82,
    85,    65,    64,   132,   172,   147,   174,    56,    57,    99,
   150,   109,   144,   146,   124,   nil,   nil,   nil,   nil,   nil,
    66,    67,    68,    69,   nil,    72,   nil,    74,    75,    76,
    77,    78,    79,    80,    81,   154,   nil,   nil,   nil,   nil,
    87,    88,    89,    90,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   165,   nil,   118,   nil,   nil,   nil,   nil,   nil,   nil,
   173,   nil,   nil,   nil,   nil,   nil,   nil,   179,   nil,   nil,
   nil,   181,   nil,   nil,   nil,   nil,   182,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   123,   nil,   nil,
   125,   nil,   127,   128,   129,   130,   nil,   nil,   nil,   nil,
   nil,   nil,   136,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   136,   nil,   152,
   nil,   nil,   155,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   166,   nil,   167,   nil,   nil,   171,   nil,   nil,   nil,   nil,
   176,   177,   178 ]

racc_goto_check = [
    18,     6,     1,     2,    12,    14,     2,     2,     2,    20,
    20,    13,    11,    10,    17,     9,    19,    18,    18,     8,
    14,    21,    22,    23,    24,   nil,   nil,   nil,   nil,   nil,
    16,    18,    16,    16,   nil,    16,   nil,    16,    16,    16,
    18,    18,    18,    18,    18,    12,   nil,   nil,   nil,   nil,
    18,    18,    16,    16,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,
    12,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,
   nil,    12,   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,
    16,   nil,    18,    18,    18,    16,   nil,   nil,   nil,   nil,
   nil,   nil,    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    16,   nil,    16,
   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,   nil,    16,   nil,   nil,    16,   nil,   nil,   nil,   nil,
    16,    16,    16 ]

racc_goto_pointer = [
   nil,     2,     3,   nil,   nil,   nil,   -34,   nil,   -46,  -116,
  -103,   -25,   -94,   -26,  -115,   nil,    -8,  -150,    -8,  -149,
   -44,   -64,  -106,  -107,   -82 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,   nil,    92,    93,   nil,
    94,   nil,   nil,   nil,   nil,   135,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    83 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 54, :_reduce_1,
  2, 55, :_reduce_2,
  2, 55, :_reduce_3,
  2, 55, :_reduce_4,
  0, 55, :_reduce_5,
  5, 56, :_reduce_6,
  7, 56, :_reduce_7,
  2, 59, :_reduce_8,
  0, 59, :_reduce_9,
  4, 60, :_reduce_10,
  1, 61, :_reduce_11,
  3, 61, :_reduce_12,
  2, 61, :_reduce_13,
  1, 63, :_reduce_14,
  1, 63, :_reduce_15,
  2, 62, :_reduce_16,
  0, 62, :_reduce_17,
  6, 57, :_reduce_18,
  4, 64, :_reduce_19,
  0, 64, :_reduce_20,
  5, 66, :_reduce_21,
  0, 66, :_reduce_22,
  3, 65, :_reduce_23,
  2, 67, :_reduce_24,
  0, 67, :_reduce_25,
  1, 68, :_reduce_26,
  2, 68, :_reduce_27,
  5, 68, :_reduce_28,
  5, 68, :_reduce_29,
  5, 68, :_reduce_30,
  5, 68, :_reduce_31,
  4, 68, :_reduce_32,
  4, 68, :_reduce_33,
  2, 72, :_reduce_34,
  0, 72, :_reduce_35,
  3, 70, :_reduce_36,
  1, 70, :_reduce_37,
  1, 69, :_reduce_38,
  3, 69, :_reduce_39,
  4, 69, :_reduce_40,
  4, 69, :_reduce_41,
  4, 69, :_reduce_42,
  4, 69, :_reduce_43,
  6, 69, :_reduce_44,
  3, 69, :_reduce_45,
  1, 69, :_reduce_46,
  2, 58, :_reduce_47,
  4, 58, :_reduce_48,
  6, 71, :_reduce_49,
  5, 71, :_reduce_50,
  2, 71, :_reduce_51,
  3, 71, :_reduce_52,
  3, 71, :_reduce_53,
  3, 71, :_reduce_54,
  3, 71, :_reduce_55,
  3, 71, :_reduce_56,
  3, 71, :_reduce_57,
  7, 71, :_reduce_58,
  6, 71, :_reduce_59,
  3, 71, :_reduce_60,
  3, 71, :_reduce_61,
  7, 71, :_reduce_62,
  3, 71, :_reduce_63,
  1, 71, :_reduce_64,
  1, 71, :_reduce_65,
  1, 71, :_reduce_66,
  4, 71, :_reduce_67,
  3, 73, :_reduce_68,
  1, 73, :_reduce_69,
  2, 77, :_reduce_70,
  3, 77, :_reduce_71,
  2, 74, :_reduce_72,
  0, 74, :_reduce_73,
  3, 75, :_reduce_74,
  0, 75, :_reduce_75,
  3, 76, :_reduce_76,
  0, 76, :_reduce_77 ]

racc_reduce_n = 78

racc_shift_n = 183

racc_token_table = {
  false => 0,
  :error => 1,
  "==" => 2,
  "!=" => 3,
  :noassoc => 4,
  :NOT => 5,
  "<=>" => 6,
  "<=" => 7,
  "=>" => 8,
  :and => 9,
  :or => 10,
  "." => 11,
  "=" => 12,
  :class => 13,
  :extends => 14,
  :inverseof => 15,
  :action => 16,
  :foreach => 17,
  :either => 18,
  :create => 19,
  :delete => 20,
  :if => 21,
  :else => 22,
  :subset => 23,
  :oneof => 24,
  :allof => 25,
  :invariant => 26,
  :forall => 27,
  :exists => 28,
  :in => 29,
  :isempty => 30,
  :empty => 31,
  :true => 32,
  :false => 33,
  :not => 34,
  :equal => 35,
  :equiv => 36,
  :implies => 37,
  :unknown => 38,
  :IDENT => 39,
  "{" => 40,
  "}" => 41,
  ".." => 42,
  "+" => 43,
  "0" => 44,
  "1" => 45,
  "(" => 46,
  ")" => 47,
  "," => 48,
  "+=" => 49,
  "-=" => 50,
  ":" => 51,
  "*" => 52 }

racc_nt_base = 53

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"==\"",
  "\"!=\"",
  "noassoc",
  "NOT",
  "\"<=>\"",
  "\"<=\"",
  "\"=>\"",
  "and",
  "or",
  "\".\"",
  "\"=\"",
  "class",
  "extends",
  "inverseof",
  "action",
  "foreach",
  "either",
  "create",
  "delete",
  "if",
  "else",
  "subset",
  "oneof",
  "allof",
  "invariant",
  "forall",
  "exists",
  "in",
  "isempty",
  "empty",
  "true",
  "false",
  "not",
  "equal",
  "equiv",
  "implies",
  "unknown",
  "IDENT",
  "\"{\"",
  "\"}\"",
  "\"..\"",
  "\"+\"",
  "\"0\"",
  "\"1\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "\"+=\"",
  "\"-=\"",
  "\":\"",
  "\"*\"",
  "$start",
  "adslspec",
  "root_elems",
  "class_decl",
  "action_decl",
  "invariant_decl",
  "rel_decls",
  "rel_decl",
  "cardinality",
  "inverse_suffix",
  "card_number",
  "action_args",
  "block",
  "additional_args",
  "statements",
  "statement",
  "objset",
  "eitherblocks",
  "formula",
  "optelse",
  "quantifier_parameters_with_commas",
  "optional_formula",
  "additional_formulae",
  "additional_objsets",
  "quantifier_parameter" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'adsl_parser.racc', 13)
  def _reduce_1(val, _values, result)
     return ASTSpec.new :lineno => lineno, :classes => val[0][0], :actions => val[0][1], :invariants => val[0][2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 15)
  def _reduce_2(val, _values, result)
     val[1][0].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 16)
  def _reduce_3(val, _values, result)
     val[1][1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 17)
  def _reduce_4(val, _values, result)
     val[1][2].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 18)
  def _reduce_5(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 21)
  def _reduce_6(val, _values, result)
     return ASTClass.new :lineno => val[0], :name => val[1], :relations => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 23)
  def _reduce_7(val, _values, result)
     return ASTClass.new :lineno => val[0], :name => val[1], :parent_name => val[3], :relations => val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 25)
  def _reduce_8(val, _values, result)
     val[0] << val[1]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 26)
  def _reduce_9(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 28)
  def _reduce_10(val, _values, result)
     return ASTRelation.new :lineno => val[0][2], :cardinality => val[0].first(2), :to_class_name => val[1], :name => val[2], :inverse_of_name => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 30)
  def _reduce_11(val, _values, result)
     return [val[0][0], val[0][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 31)
  def _reduce_12(val, _values, result)
     return [val[0][0], val[2][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 32)
  def _reduce_13(val, _values, result)
     return [val[0][0], 1.0/0.0, val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 34)
  def _reduce_14(val, _values, result)
     return [0, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 35)
  def _reduce_15(val, _values, result)
     return [1, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 37)
  def _reduce_16(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 38)
  def _reduce_17(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 40)
  def _reduce_18(val, _values, result)
     return ASTAction.new(:lineno => val[0], :name => val[1], :arg_cardinalities => val[3][0], :arg_types => val[3][1], :arg_names => val[3][2], :block => val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 42)
  def _reduce_19(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 43)
  def _reduce_20(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 45)
  def _reduce_21(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 46)
  def _reduce_22(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 48)
  def _reduce_23(val, _values, result)
     return ASTBlock.new :lineno => val[0], :statements => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 50)
  def _reduce_24(val, _values, result)
     val[1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 51)
  def _reduce_25(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 53)
  def _reduce_26(val, _values, result)
     return ASTObjsetStmt.new :lineno => val[0].lineno, :objset => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 54)
  def _reduce_27(val, _values, result)
     return ASTDeleteObj.new :lineno => val[0], :objset => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 56)
  def _reduce_28(val, _values, result)
                   return ASTCreateTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 59)
  def _reduce_29(val, _values, result)
                   return ASTDeleteTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 62)
  def _reduce_30(val, _values, result)
                   return ASTSetTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 65)
  def _reduce_31(val, _values, result)
                   return ASTForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 67)
  def _reduce_32(val, _values, result)
     val[3].unshift val[1]; return ASTEither.new :lineno => val[0], :blocks => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 68)
  def _reduce_33(val, _values, result)
     return ASTIf.new :lineno => val[0], :condition => val[1], :then_block => val[2], :else_block => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 70)
  def _reduce_34(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 71)
  def _reduce_35(val, _values, result)
     return ASTBlock.new :statements => [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 73)
  def _reduce_36(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 74)
  def _reduce_37(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 76)
  def _reduce_38(val, _values, result)
     return ASTVariable.new :lineno => val[0].lineno, :var_name => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 77)
  def _reduce_39(val, _values, result)
     return ASTAssignment.new :lineno => val[0].lineno, :var_name => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 78)
  def _reduce_40(val, _values, result)
     return ASTSubset.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 79)
  def _reduce_41(val, _values, result)
     return ASTOneOf.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 80)
  def _reduce_42(val, _values, result)
     return ASTAllOf.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 81)
  def _reduce_43(val, _values, result)
     return ASTCreateObjset.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 83)
  def _reduce_44(val, _values, result)
                return ASTDereferenceBuild.new :lineno => val[0].lineno, :objset => val[2], :rel_name => val[4]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 85)
  def _reduce_45(val, _values, result)
     return ASTDereference.new :lineno => val[0].lineno, :objset => val[0], :rel_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 86)
  def _reduce_46(val, _values, result)
     return ASTEmptyObjset.new :lineno => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 88)
  def _reduce_47(val, _values, result)
     return ASTInvariant.new :lineno => val[0], :name => nil, :formula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 89)
  def _reduce_48(val, _values, result)
     return ASTInvariant.new :lineno => val[0], :name => val[1], :formula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 92)
  def _reduce_49(val, _values, result)
     return ASTForAll.new :lineno => val[0], :vars => val[2], :subformula => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 94)
  def _reduce_50(val, _values, result)
     return ASTExists.new :lineno => val[0], :vars => val[2], :subformula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 96)
  def _reduce_51(val, _values, result)
     return ASTNot.new :lineno => val[0], :subformula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 98)
  def _reduce_52(val, _values, result)
     return ASTAnd.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 100)
  def _reduce_53(val, _values, result)
     return ASTOr.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 102)
  def _reduce_54(val, _values, result)
     return ASTEquiv.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 104)
  def _reduce_55(val, _values, result)
     return ASTImplies.new :lineno => val[0].lineno, :subformula1 => val[0], :subformula2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 106)
  def _reduce_56(val, _values, result)
     return ASTImplies.new :lineno => val[0].lineno, :subformula1 => val[2], :subformula2 => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 107)
  def _reduce_57(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 109)
  def _reduce_58(val, _values, result)
     return ASTEquiv.new :lineno => val[0], :subformulae => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 111)
  def _reduce_59(val, _values, result)
     return ASTImplies.new :lineno => val[0], :subformula1 => val[2], :subformula2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 113)
  def _reduce_60(val, _values, result)
     return ASTEqual.new :lineno => val[0].lineno, :objsets => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 115)
  def _reduce_61(val, _values, result)
     return ASTNot.new(:lineno => val[0].lineno, :subformula => ASTEqual.new(:lineno => val[0].lineno, :objsets => [val[0], val[2]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 117)
  def _reduce_62(val, _values, result)
     return ASTEqual.new :lineno => val[0], :objsets => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 118)
  def _reduce_63(val, _values, result)
     return ASTIn.new :lineno => val[0].lineno, :objset1 => val[0], :objset2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 119)
  def _reduce_64(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => true  
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 120)
  def _reduce_65(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => false 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 121)
  def _reduce_66(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => nil   
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 122)
  def _reduce_67(val, _values, result)
     return ASTIsEmpty.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 125)
  def _reduce_68(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 126)
  def _reduce_69(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 128)
  def _reduce_70(val, _values, result)
     return [val[1], ASTAllOf.new(:lineno => val[0].lineno, :class_name => val[0]), val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 129)
  def _reduce_71(val, _values, result)
     return [val[0], val[2], val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 131)
  def _reduce_72(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 132)
  def _reduce_73(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 134)
  def _reduce_74(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 135)
  def _reduce_75(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 137)
  def _reduce_76(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 138)
  def _reduce_77(val, _values, result)
     return [] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ADSLParser


  end
end
