#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'adsl/parser/adsl_parser.rex'
require 'adsl/fol/first_order_logic'

module ADSL
module Parser

class ADSLParser < Racc::Parser

module_eval(<<'...end adsl_parser.racc/module_eval...', 'adsl_parser.racc', 233)

# generated by racc
  def generate_ast(str)
    scan str
    # do_parse
  end

  def parse(str)
    generate_ast(str).typecheck_and_resolve
  rescue ScanError, Racc::ParseError => e
    raise ADSLError, e.message
  end

...end adsl_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    44,    65,    73,    70,    72,    58,    58,    66,    67,    69,
    68,    71,   161,   149,    65,    73,    70,    72,    65,   144,
    66,    67,    69,    68,    30,    65,    73,    70,    72,    26,
    27,    28,    29,   138,    37,    38,    45,    32,    42,    43,
    39,    41,    40,    44,    46,    47,    48,   153,   142,    58,
   217,   141,    49,    35,    36,   151,    34,   142,    59,   133,
   146,    33,   147,   184,   185,   186,   182,    30,   143,   180,
   183,   160,    26,    27,    28,    29,    44,    37,    38,    45,
    32,    42,    43,    39,    41,    40,   154,    46,    47,    48,
    65,    73,    70,    72,   155,    49,    35,    36,   139,    34,
    30,   215,   216,   156,    33,    26,    27,    28,    29,    44,
    37,    38,    45,    32,    42,    43,    39,    41,    40,   159,
    46,    47,    48,    65,    73,   133,   132,   176,    49,    35,
    36,   173,    34,    30,    65,    73,   162,    33,    26,    27,
    28,    29,    44,    37,    38,    45,    32,    42,    43,    39,
    41,    40,   163,    46,    47,    48,    65,    73,    53,   117,
   130,    49,    35,    36,   167,    34,    30,   129,   128,   170,
    33,    26,    27,    28,    29,   171,    37,    38,    45,    32,
    42,    43,    39,    41,    40,   125,    46,    47,    48,    44,
    87,   117,    88,   117,    49,    35,    36,   187,    34,    65,
    73,    70,    72,    33,   188,    66,    67,    69,    68,    71,
   189,   105,   102,    30,    86,    85,    89,    90,    26,    27,
    28,    29,   -27,    37,    38,    45,    32,    42,    43,    39,
    41,    40,    44,    46,    47,    48,    94,    58,   193,   194,
   195,    49,    35,    36,   196,    34,    65,    73,    70,    72,
    33,    82,    66,    67,    81,    87,    30,    88,    80,   159,
   152,    26,    27,    28,    29,    44,    37,    38,    45,    32,
    42,    43,    39,    41,    40,    79,    46,    47,    48,    86,
    85,    89,    90,   202,    49,    35,    36,   203,    34,    30,
   204,   205,    78,    33,    26,    27,    28,    29,    44,    37,
    38,    45,    32,    42,    43,    39,    41,    40,   206,    46,
    47,    48,   207,    76,   208,    75,   210,    49,    35,    36,
   211,    34,    30,   212,   214,    64,    33,    26,    27,    28,
    29,    44,    37,    38,    45,    32,    42,    43,    39,    41,
    40,   159,    46,    47,    48,   221,    63,    62,    61,   225,
    25,    35,    36,    60,    34,    30,    57,    56,   229,    33,
    26,    27,    28,    29,    44,    37,    38,    45,    32,    42,
    43,    39,    41,    40,   159,    46,    47,    48,    55,    54,
    53,    24,    23,    49,    35,    36,    16,    34,    30,   159,
   nil,   nil,    33,    26,    27,    28,    29,    44,    37,    38,
    45,    32,    42,    43,    39,    41,    40,   nil,    46,    47,
    48,   nil,   nil,   nil,   nil,   nil,    49,    35,    36,   nil,
    34,    30,   nil,   nil,   nil,    33,    26,    27,    28,    29,
    44,    37,    38,    45,    32,    42,    43,    39,    41,    40,
   nil,    46,    47,    48,   nil,   nil,   nil,   nil,   nil,    49,
    35,    36,   nil,    34,    30,   nil,   nil,   nil,    33,    26,
    27,    28,    29,    44,    37,    38,    45,    32,    42,    43,
    39,    41,    40,   nil,    46,    47,    48,   nil,   nil,   nil,
   nil,   nil,    49,    35,    36,   nil,    34,    30,   nil,   nil,
   nil,    33,    26,    27,    28,    29,    44,    37,    38,    45,
    32,    42,    43,    39,    41,    40,   nil,    46,    47,    48,
   nil,   nil,   nil,   nil,   nil,    49,    35,    36,   nil,    34,
    30,   nil,   nil,   nil,    33,    26,    27,    28,    29,    44,
    37,    38,    45,    32,    42,    43,    39,    41,    40,   nil,
    46,    47,    48,   nil,   nil,   nil,   nil,   nil,    49,    35,
    36,   nil,    34,    30,   nil,   nil,   nil,    33,    26,    27,
    28,    29,    44,    37,    38,    45,    32,    42,    43,    39,
    41,    40,   nil,    46,    47,    48,   nil,   nil,   nil,   nil,
   nil,   103,    35,    36,   nil,    34,    30,   nil,   nil,   nil,
    33,    26,    27,    28,    29,    44,    37,    38,    45,    32,
    42,    43,    39,    41,    40,   nil,    46,    47,    48,   nil,
   nil,   nil,   nil,   nil,    49,    35,    36,   nil,    34,    30,
   nil,   nil,   nil,    33,    26,    27,    28,    29,    44,    37,
    38,    45,    32,    42,    43,    39,    41,    40,   nil,    46,
    47,    48,   nil,   nil,   nil,   nil,   nil,    49,    35,    36,
   nil,    34,    30,   nil,   nil,   nil,    33,    26,    27,    28,
    29,    44,    37,    38,    45,    32,    42,    43,    39,    41,
    40,   nil,    46,    47,    48,   nil,   nil,   nil,   nil,   nil,
    49,    35,    36,   nil,    34,    30,   nil,   nil,   nil,    33,
    26,    27,    28,    29,    44,    37,    38,    45,    32,    42,
    43,    39,    41,    40,   nil,    46,    47,    48,   nil,   nil,
   nil,   nil,   nil,    49,    35,    36,   nil,    34,    30,   nil,
   nil,   nil,    33,    26,    27,    28,    29,    44,    37,    38,
    45,    32,    42,    43,    39,    41,    40,   nil,    46,    47,
    48,   nil,   nil,   nil,   nil,   nil,    49,    35,    36,   nil,
    34,    30,   nil,   nil,   nil,    33,    26,    27,    28,    29,
    44,    37,    38,    45,    32,    42,    43,    39,    41,    40,
   nil,    46,    47,    48,   nil,   nil,   nil,   nil,   nil,    49,
    35,    36,   nil,    34,    30,   nil,   nil,   nil,    33,    26,
    27,    28,    29,    44,    37,    38,    45,    32,    42,    43,
    39,    41,    40,   nil,    46,    47,    48,   nil,   nil,   nil,
   nil,   nil,    49,    35,    36,   nil,    34,    30,   nil,   nil,
   nil,    33,    26,    27,    28,    29,    44,    37,    38,    45,
    32,    42,    43,    39,    41,    40,   nil,    46,    47,    48,
   nil,   nil,   nil,   nil,   nil,    49,    35,    36,   nil,    34,
    30,   nil,   nil,   nil,    33,    26,    27,    28,    29,    44,
    37,    38,    45,    32,    42,    43,    39,    41,    40,   nil,
    46,    47,    48,   nil,   nil,   nil,   nil,   nil,    49,    35,
    36,   nil,    34,    30,   nil,   nil,   nil,    33,    26,    27,
    28,    29,    44,    37,    38,    45,    32,    42,    43,    39,
    41,    40,   nil,    46,    47,    48,   nil,   nil,   nil,   nil,
   nil,    49,    35,    36,   nil,    34,    30,   nil,   nil,   nil,
    33,    26,    27,    28,    29,    44,    37,    38,    45,    32,
    42,    43,    39,    41,    40,   nil,    46,    47,    48,   nil,
   nil,   nil,   nil,   nil,    49,    35,    36,   nil,    34,    30,
   nil,   nil,   nil,    33,    26,    27,    28,    29,    44,    37,
    38,    45,    32,    42,    43,    39,    41,    40,   nil,    46,
    47,    48,   nil,   nil,   nil,   nil,   nil,    49,    35,    36,
   nil,    34,    30,   nil,   nil,   nil,    33,    26,    27,    28,
    29,    44,    37,    38,    45,    32,    42,    43,    39,    41,
    40,   nil,    46,    47,    48,   nil,   nil,   nil,   nil,   nil,
    49,    35,    36,   nil,    34,    30,   nil,   nil,   nil,    33,
    26,    27,    28,    29,   nil,    37,    38,    45,    32,    42,
    43,    39,    41,    40,    44,    46,    47,    48,   nil,   nil,
   nil,   nil,   nil,    49,    35,    36,   nil,    34,   nil,   nil,
   nil,   nil,    33,   nil,   184,   185,   186,   182,    30,   nil,
   180,   183,   nil,    26,    27,    28,    29,    44,    37,    38,
    45,    32,    42,    43,    39,    41,    40,   nil,    46,    47,
    48,   nil,   nil,   nil,   nil,   nil,    49,    35,    36,   nil,
    34,    30,   nil,   nil,   nil,    33,    26,    27,    28,    29,
    44,    37,    38,    45,    32,    42,    43,    39,    41,    40,
   nil,    46,    47,    48,   nil,   nil,   nil,   nil,   nil,    49,
    35,    36,   nil,    34,    30,   nil,   nil,   nil,    33,    26,
    27,    28,    29,    44,    37,    38,    45,    32,    42,    43,
    39,    41,    40,   nil,    46,    47,    48,   nil,   nil,   nil,
   nil,   nil,    49,    35,    36,   nil,    34,    30,   nil,   nil,
   nil,    33,    26,    27,    28,    29,    44,    37,    38,    45,
    32,    42,    43,    39,    41,    40,   nil,    46,    47,    48,
   nil,   nil,   nil,   nil,   nil,    49,    35,    36,   nil,    34,
    30,   nil,   nil,   nil,    33,    26,    27,    28,    29,    44,
    37,    38,    45,    32,    42,    43,    39,    41,    40,   nil,
    46,    47,    48,   nil,   nil,   nil,   nil,   nil,    49,    35,
    36,   nil,    34,    30,   nil,   nil,   nil,    33,    26,    27,
    28,    29,    44,    37,    38,    45,    32,    42,    43,    39,
    41,    40,   nil,    46,    47,    48,   nil,   nil,   nil,   nil,
   nil,   123,    35,    36,   nil,    34,    30,   nil,   nil,   nil,
    33,    26,    27,    28,    29,    44,    37,    38,    45,    32,
    42,    43,    39,    41,    40,   nil,    46,    47,    48,   nil,
   nil,   nil,   nil,   nil,    49,    35,    36,   nil,    34,    30,
   nil,   nil,   nil,    33,    26,    27,    28,    29,   nil,    37,
    38,    45,    32,    42,    43,    39,    41,    40,   nil,    46,
    47,    48,   nil,   nil,   nil,   nil,   nil,    49,    35,    36,
   nil,    34,    65,    73,    70,    72,    33,   nil,    66,    67,
    69,    68,    71,    65,    73,    70,    72,   nil,   nil,    66,
    67,    69,    68,    71,    65,    73,    70,    72,   nil,   nil,
    66,    67,    69,    68,    71,    65,    73,    70,    72,   nil,
   nil,    66,    67,    69,    68,    71,    65,    73,    70,    72,
   nil,   nil,    66,    67,    69,    68,    71,    65,    73,    70,
    72,   nil,   191,    66,    67,    69,    68,    71,    65,    73,
    70,    72,   nil,   190,    66,    67,    69,    68,    71,    65,
    73,    70,    72,   nil,   114,    66,    67,    69,    68,    71,
    65,    73,    70,    72,   nil,   150,    66,    67,    69,    68,
    71,    65,    73,    70,    72,   nil,   137,    66,    67,    69,
    68,    71,    65,    73,    70,    72,   nil,   136,    66,    67,
    69,    68,    71,   nil,   nil,   nil,   nil,   nil,   135,    10,
    15,   -11,   nil,   nil,    11,   159,    10,    15,   -11,   nil,
   nil,    11,    10,    15,   -11,   nil,   159,    11,    12,   nil,
   nil,    10,    15,   -11,   nil,    12,    11,   159,    10,    15,
   -11,    12,    14,    11,   nil,   nil,   nil,   nil,   159,    14,
    12,   nil,    13,   nil,   nil,    14,   nil,    12,   nil,    13,
   nil,    10,    15,   -11,    14,    13,    11,    10,    15,   -11,
   nil,    14,    11,   nil,    13,   nil,   nil,   nil,   nil,   nil,
    12,    13,    65,    73,    70,    72,    12,   nil,    66,    67,
    69,    68,    71,   nil,    14,    65,    73,    70,    72,   nil,
    14,    66,    67,   nil,    13,    65,    73,    70,    72,   nil,
    13,    66,    67,    69,    68,    71,    65,    73,    70,    72,
   nil,   nil,    66,    67,    69,    68,    71,    65,    73,    70,
    72,   nil,   nil,    66,    67,    69,    68,    71,    65,    73,
    70,    72,   nil,   nil,    66,    67,    69,    68,    71,    65,
    73,    70,    72,   nil,   nil,    66,    67,    69,    68,    71,
    65,    73,    70,    72,   nil,   nil,    66,    67,    69,    68,
    71,    65,    73,    70,    72,   nil,   nil,    66,    67,    69,
    68,    71,   198,    73,    70,    72,   nil,   nil,    66,    67,
    69,    68,    71,    65,    73,    70,    72,   nil,   nil,    66,
    67,    69,    68,    71,    65,    73,    70,    72,   nil,   nil,
    66,    67,    69,    68,    71,   140,    73,    70,    72,   nil,
   nil,    66,    67,    69,    68,    71,    65,    73,    70,    72,
   nil,   nil,    66,    67,    69,    68,    71,    65,    73,    70,
    72,   nil,   nil,    66,    67,    69,    68,    71,    65,    73,
    70,    72,   nil,   nil,    66,    67,    69,    68,    71 ]

racc_action_check = [
    78,   119,   119,   119,   119,    25,   123,   119,   119,   119,
   119,   119,   133,   121,   111,   111,   111,   111,   113,   117,
   111,   111,   111,   111,    78,   107,   107,   107,   107,    78,
    78,    78,    78,   102,    78,    78,    78,    78,    78,    78,
    78,    78,    78,   159,    78,    78,    78,   125,   115,   103,
   207,   115,    78,    78,    78,   123,    78,   118,    25,    96,
   118,    78,   119,   159,   159,   159,   159,   159,   117,   159,
   159,   133,   159,   159,   159,   159,    73,   159,   159,   159,
   159,   159,   159,   159,   159,   159,   127,   159,   159,   159,
   106,   106,   106,   106,   128,   159,   159,   159,   103,   159,
    73,   207,   207,   129,   159,    73,    73,    73,    73,    72,
    73,    73,    73,    73,    73,    73,    73,    73,    73,   132,
    73,    73,    73,    77,    77,   157,    95,   157,    73,    73,
    73,   157,    73,    72,   112,   112,   134,    73,    72,    72,
    72,    72,    71,    72,    72,    72,    72,    72,    72,    72,
    72,    72,   140,    72,    72,    72,   110,   110,    94,   142,
    93,    72,    72,    72,   145,    72,    71,    92,    91,   148,
    72,    71,    71,    71,    71,   152,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    82,    71,    71,    71,    70,
    51,    76,    51,    75,    71,    71,    71,   160,    71,   124,
   124,   124,   124,    71,   162,   124,   124,   124,   124,   124,
   163,    65,    63,    70,    51,    51,    51,    51,    70,    70,
    70,    70,    57,    70,    70,    70,    70,    70,    70,    70,
    70,    70,    69,    70,    70,    70,    56,    49,   171,   175,
   176,    70,    70,    70,   177,    70,   108,   108,   108,   108,
    70,    48,   108,   108,    47,   154,    69,   154,    45,   182,
   124,    69,    69,    69,    69,    68,    69,    69,    69,    69,
    69,    69,    69,    69,    69,    41,    69,    69,    69,   154,
   154,   154,   154,   184,    69,    69,    69,   185,    69,    68,
   186,   188,    40,    69,    68,    68,    68,    68,    12,    68,
    68,    68,    68,    68,    68,    68,    68,    68,   194,    68,
    68,    68,   198,    38,   200,    37,   202,    68,    68,    68,
   203,    68,    12,   204,   206,    30,    68,    12,    12,    12,
    12,    13,    12,    12,    12,    12,    12,    12,    12,    12,
    12,   208,    12,    12,    12,   209,    29,    28,    27,   214,
    12,    12,    12,    26,    12,    13,    24,    23,   218,    12,
    13,    13,    13,    13,    67,    13,    13,    13,    13,    13,
    13,    13,    13,    13,   221,    13,    13,    13,    16,    15,
    14,    11,     9,    13,    13,    13,     1,    13,    67,   229,
   nil,   nil,    13,    67,    67,    67,    67,    66,    67,    67,
    67,    67,    67,    67,    67,    67,    67,   nil,    67,    67,
    67,   nil,   nil,   nil,   nil,   nil,    67,    67,    67,   nil,
    67,    66,   nil,   nil,   nil,    67,    66,    66,    66,    66,
    79,    66,    66,    66,    66,    66,    66,    66,    66,    66,
   nil,    66,    66,    66,   nil,   nil,   nil,   nil,   nil,    66,
    66,    66,   nil,    66,    79,   nil,   nil,   nil,    66,    79,
    79,    79,    79,   217,    79,    79,    79,    79,    79,    79,
    79,    79,    79,   nil,    79,    79,    79,   nil,   nil,   nil,
   nil,   nil,    79,    79,    79,   nil,    79,   217,   nil,   nil,
   nil,    79,   217,   217,   217,   217,   216,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   nil,   217,   217,   217,
   nil,   nil,   nil,   nil,   nil,   217,   217,   217,   nil,   217,
   216,   nil,   nil,   nil,   217,   216,   216,   216,   216,    64,
   216,   216,   216,   216,   216,   216,   216,   216,   216,   nil,
   216,   216,   216,   nil,   nil,   nil,   nil,   nil,   216,   216,
   216,   nil,   216,    64,   nil,   nil,   nil,   216,    64,    64,
    64,    64,   215,    64,    64,    64,    64,    64,    64,    64,
    64,    64,   nil,    64,    64,    64,   nil,   nil,   nil,   nil,
   nil,    64,    64,    64,   nil,    64,   215,   nil,   nil,   nil,
    64,   215,   215,   215,   215,   212,   215,   215,   215,   215,
   215,   215,   215,   215,   215,   nil,   215,   215,   215,   nil,
   nil,   nil,   nil,   nil,   215,   215,   215,   nil,   215,   212,
   nil,   nil,   nil,   215,   212,   212,   212,   212,   211,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   nil,   212,
   212,   212,   nil,   nil,   nil,   nil,   nil,   212,   212,   212,
   nil,   212,   211,   nil,   nil,   nil,   212,   211,   211,   211,
   211,   210,   211,   211,   211,   211,   211,   211,   211,   211,
   211,   nil,   211,   211,   211,   nil,   nil,   nil,   nil,   nil,
   211,   211,   211,   nil,   211,   210,   nil,   nil,   nil,   211,
   210,   210,   210,   210,    80,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   nil,   210,   210,   210,   nil,   nil,
   nil,   nil,   nil,   210,   210,   210,   nil,   210,    80,   nil,
   nil,   nil,   210,    80,    80,    80,    80,    62,    80,    80,
    80,    80,    80,    80,    80,    80,    80,   nil,    80,    80,
    80,   nil,   nil,   nil,   nil,   nil,    80,    80,    80,   nil,
    80,    62,   nil,   nil,   nil,    80,    62,    62,    62,    62,
    33,    62,    62,    62,    62,    62,    62,    62,    62,    62,
   nil,    62,    62,    62,   nil,   nil,   nil,   nil,   nil,    62,
    62,    62,   nil,    62,    33,   nil,   nil,   nil,    62,    33,
    33,    33,    33,    61,    33,    33,    33,    33,    33,    33,
    33,    33,    33,   nil,    33,    33,    33,   nil,   nil,   nil,
   nil,   nil,    33,    33,    33,   nil,    33,    61,   nil,   nil,
   nil,    33,    61,    61,    61,    61,   141,    61,    61,    61,
    61,    61,    61,    61,    61,    61,   nil,    61,    61,    61,
   nil,   nil,   nil,   nil,   nil,    61,    61,    61,   nil,    61,
   141,   nil,   nil,   nil,    61,   141,   141,   141,   141,    39,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   nil,
   141,   141,   141,   nil,   nil,   nil,   nil,   nil,   141,   141,
   141,   nil,   141,    39,   nil,   nil,   nil,   141,    39,    39,
    39,    39,    59,    39,    39,    39,    39,    39,    39,    39,
    39,    39,   nil,    39,    39,    39,   nil,   nil,   nil,   nil,
   nil,    39,    39,    39,   nil,    39,    59,   nil,   nil,   nil,
    39,    59,    59,    59,    59,   183,    59,    59,    59,    59,
    59,    59,    59,    59,    59,   nil,    59,    59,    59,   nil,
   nil,   nil,   nil,   nil,    59,    59,    59,   nil,    59,   183,
   nil,   nil,   nil,    59,   183,   183,   183,   183,   180,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   nil,   183,
   183,   183,   nil,   nil,   nil,   nil,   nil,   183,   183,   183,
   nil,   183,   180,   nil,   nil,   nil,   183,   180,   180,   180,
   180,   146,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   nil,   180,   180,   180,   nil,   nil,   nil,   nil,   nil,
   180,   180,   180,   nil,   180,   146,   nil,   nil,   nil,   180,
   146,   146,   146,   146,   nil,   146,   146,   146,   146,   146,
   146,   146,   146,   146,   178,   146,   146,   146,   nil,   nil,
   nil,   nil,   nil,   146,   146,   146,   nil,   146,   nil,   nil,
   nil,   nil,   146,   nil,   178,   178,   178,   178,   178,   nil,
   178,   178,   nil,   178,   178,   178,   178,   170,   178,   178,
   178,   178,   178,   178,   178,   178,   178,   nil,   178,   178,
   178,   nil,   nil,   nil,   nil,   nil,   178,   178,   178,   nil,
   178,   170,   nil,   nil,   nil,   178,   170,   170,   170,   170,
   147,   170,   170,   170,   170,   170,   170,   170,   170,   170,
   nil,   170,   170,   170,   nil,   nil,   nil,   nil,   nil,   170,
   170,   170,   nil,   170,   147,   nil,   nil,   nil,   170,   147,
   147,   147,   147,    83,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   nil,   147,   147,   147,   nil,   nil,   nil,
   nil,   nil,   147,   147,   147,   nil,   147,    83,   nil,   nil,
   nil,   147,    83,    83,    83,    83,    60,    83,    83,    83,
    83,    83,    83,    83,    83,    83,   nil,    83,    83,    83,
   nil,   nil,   nil,   nil,   nil,    83,    83,    83,   nil,    83,
    60,   nil,   nil,   nil,    83,    60,    60,    60,    60,    81,
    60,    60,    60,    60,    60,    60,    60,    60,    60,   nil,
    60,    60,    60,   nil,   nil,   nil,   nil,   nil,    60,    60,
    60,   nil,    60,    81,   nil,   nil,   nil,    60,    81,    81,
    81,    81,    58,    81,    81,    81,    81,    81,    81,    81,
    81,    81,   nil,    81,    81,    81,   nil,   nil,   nil,   nil,
   nil,    81,    81,    81,   nil,    81,    58,   nil,   nil,   nil,
    81,    58,    58,    58,    58,   144,    58,    58,    58,    58,
    58,    58,    58,    58,    58,   nil,    58,    58,    58,   nil,
   nil,   nil,   nil,   nil,    58,    58,    58,   nil,    58,   144,
   nil,   nil,   nil,    58,   144,   144,   144,   144,   nil,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   nil,   144,
   144,   144,   nil,   nil,   nil,   nil,   nil,   144,   144,   144,
   nil,   144,   169,   169,   169,   169,   144,   nil,   169,   169,
   169,   169,   169,   164,   164,   164,   164,   nil,   nil,   164,
   164,   164,   164,   164,    74,    74,    74,    74,   nil,   nil,
    74,    74,    74,    74,    74,   122,   122,   122,   122,   nil,
   nil,   122,   122,   122,   122,   122,   101,   101,   101,   101,
   nil,   nil,   101,   101,   101,   101,   101,   100,   100,   100,
   100,   nil,   169,   100,   100,   100,   100,   100,    99,    99,
    99,    99,   nil,   164,    99,    99,    99,    99,    99,   222,
   222,   222,   222,   nil,    74,   222,   222,   222,   222,   222,
   223,   223,   223,   223,   nil,   122,   223,   223,   223,   223,
   223,   224,   224,   224,   224,   nil,   101,   224,   224,   224,
   224,   224,   201,   201,   201,   201,   nil,   100,   201,   201,
   201,   201,   201,   nil,   nil,   nil,   nil,   nil,    99,     0,
     0,     0,   nil,   nil,     0,   222,     8,     8,     8,   nil,
   nil,     8,     3,     3,     3,   nil,   223,     3,     0,   nil,
   nil,     6,     6,     6,   nil,     8,     6,   224,     7,     7,
     7,     3,     0,     7,   nil,   nil,   nil,   nil,   201,     8,
     6,   nil,     0,   nil,   nil,     3,   nil,     7,   nil,     8,
   nil,     5,     5,     5,     6,     3,     5,     4,     4,     4,
   nil,     7,     4,   nil,     6,   nil,   nil,   nil,   nil,   nil,
     5,     7,   226,   226,   226,   226,     4,   nil,   226,   226,
   226,   226,   226,   nil,     5,   109,   109,   109,   109,   nil,
     4,   109,   109,   nil,     5,   199,   199,   199,   199,   nil,
     4,   199,   199,   199,   199,   199,    31,    31,    31,    31,
   nil,   nil,    31,    31,    31,    31,    31,    50,    50,    50,
    50,   nil,   nil,    50,    50,    50,    50,    50,    97,    97,
    97,    97,   nil,   nil,    97,    97,    97,    97,    97,    98,
    98,    98,    98,   nil,   nil,    98,    98,    98,    98,    98,
   192,   192,   192,   192,   nil,   nil,   192,   192,   192,   192,
   192,   227,   227,   227,   227,   nil,   nil,   227,   227,   227,
   227,   227,   179,   179,   179,   179,   nil,   nil,   179,   179,
   179,   179,   179,   168,   168,   168,   168,   nil,   nil,   168,
   168,   168,   168,   168,   166,   166,   166,   166,   nil,   nil,
   166,   166,   166,   166,   166,   104,   104,   104,   104,   nil,
   nil,   104,   104,   104,   104,   104,   228,   228,   228,   228,
   nil,   nil,   228,   228,   228,   228,   228,   126,   126,   126,
   126,   nil,   nil,   126,   126,   126,   126,   126,   120,   120,
   120,   120,   nil,   nil,   120,   120,   120,   120,   120 ]

racc_action_pointer = [
  1433,   386,   nil,  1446,  1491,  1485,  1455,  1462,  1440,   364,
   nil,   327,   296,   329,   326,   325,   378,   nil,   nil,   nil,
   nil,   nil,   nil,   303,   293,   -10,   290,   285,   284,   283,
   262,  1552,   nil,   758,   nil,   nil,   nil,   252,   250,   857,
   229,   212,   nil,   nil,   nil,   195,   nil,   191,   188,   222,
  1563,   164,   nil,   nil,   nil,   nil,   217,   167,  1230,   890,
  1164,   791,   725,   158,   527,   157,   395,   362,   263,   230,
   187,   140,   107,    74,  1340,   139,   137,   119,    -2,   428,
   692,  1197,   131,  1131,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   103,   102,   100,   104,    62,     4,  1574,  1585,  1384,
  1373,  1362,   -31,    34,  1651,   nil,    86,    21,   242,  1531,
   152,    10,   130,    14,   nil,   -17,   nil,    14,    -8,    -3,
  1684,   -51,  1351,    -9,   195,   -17,  1673,    21,    40,    49,
   nil,   nil,    59,     9,    82,   nil,   nil,   nil,   nil,   nil,
    98,   824,   105,   nil,  1263,   100,   989,  1098,   104,   nil,
   nil,   nil,   121,   nil,   229,   nil,   nil,    70,   nil,    41,
   142,   nil,   150,   146,  1329,   nil,  1640,   nil,  1629,  1318,
  1065,   174,   nil,   nil,   nil,   185,   186,   183,  1032,  1618,
   956,   nil,   199,   923,   229,   233,   236,   nil,   226,   nil,
   nil,   nil,  1596,   nil,   254,   nil,   nil,   nil,   258,  1541,
   303,  1428,   248,   252,   255,   nil,   304,    35,   281,   315,
   659,   626,   593,   nil,   295,   560,   494,   461,   347,   nil,
   nil,   314,  1395,  1406,  1417,   nil,  1518,  1607,  1662,   329,
   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -8,  -111,    -1,    -8,    -8,    -8,    -8,    -8,    -8,  -111,
   -10,  -111,  -111,  -111,  -107,  -111,  -111,    -2,    -3,    -4,
    -5,    -6,    -7,  -111,  -111,   -46,  -111,  -111,  -111,  -111,
  -111,   -81,   -55,  -111,   -57,   -58,   -59,  -111,  -111,  -111,
  -111,  -111,   -73,   -74,   -75,  -111,   -77,  -111,  -111,   -46,
   -83,  -111,  -106,  -110,  -105,   235,   -13,   -25,  -111,  -111,
  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,
  -111,  -111,  -111,  -111,  -111,  -111,  -111,   -62,  -111,  -111,
  -111,  -111,  -111,  -111,   -87,   -88,   -89,   -90,   -91,   -92,
   -93,  -108,  -103,  -111,  -111,  -111,  -111,   -47,   -82,  -111,
  -111,  -111,  -111,   -46,  -111,   -54,   -63,   -64,   -65,   -66,
   -68,   -69,   -70,   -72,   -56,  -111,   -95,  -111,  -102,  -111,
  -100,  -111,  -111,   -46,  -111,  -111,   -84,   -85,  -111,  -111,
   -15,   -12,  -111,   -18,  -111,   -48,   -49,   -50,   -51,   -52,
  -111,  -111,  -111,   -96,  -111,  -111,  -111,  -111,   -98,   -71,
   -76,   -78,  -111,   -80,  -111,  -109,  -104,  -111,   -23,   -30,
  -111,   -20,  -111,   -54,  -111,   -94,   -97,   -61,  -101,  -111,
  -111,  -111,   -86,    -9,   -14,  -111,  -111,  -111,   -30,   -31,
  -111,   -36,  -111,  -111,  -111,  -111,  -111,   -19,   -24,   -53,
   -60,   -67,   -99,   -79,  -111,   -17,   -28,   -29,  -111,   -32,
  -111,  -111,  -111,  -111,  -111,   -26,   -22,   -54,  -111,   -43,
  -111,  -111,  -111,   -16,  -111,  -111,  -111,  -111,   -37,   -45,
   -38,  -111,  -111,  -111,  -111,   -21,   -33,   -34,   -35,  -111,
   -42,   -39,   -40,   -41,   -44 ]

racc_goto_table = [
    31,    50,    84,   158,    52,   177,   218,     2,   213,   134,
    17,    18,    19,    20,    21,    22,   115,   118,    96,   174,
   157,    74,    95,   220,   197,    93,   145,    77,   121,    51,
    83,     1,   127,   165,   148,    92,    91,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    97,    98,    99,   100,
   101,   nil,   104,   200,   106,   107,   108,   109,   110,   111,
   112,   113,   nil,   nil,   nil,   nil,   119,   120,   122,   124,
   175,   126,   209,   nil,   nil,   nil,   nil,   nil,   nil,   219,
   nil,   nil,   nil,   nil,   131,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   230,   231,   232,   233,   nil,   nil,   nil,   nil,
   234,   nil,   nil,   nil,   nil,   172,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   164,
   nil,   nil,   166,   nil,   168,   169,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   192,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   199,   nil,
   nil,   201,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   222,   223,
   224,   nil,   nil,   226,   227,   228 ]

racc_goto_check = [
    21,    21,    30,    17,    12,    19,    23,     2,    15,    14,
     2,     2,     2,     2,     2,     2,    25,    25,    18,    13,
    11,    21,    16,    24,    19,    10,    26,    21,    27,    28,
    29,     1,    31,    32,    33,    34,    35,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,    21,    21,    21,
    21,   nil,    21,    17,    21,    21,    21,    21,    21,    21,
    21,    21,   nil,   nil,   nil,   nil,    21,    21,    21,    21,
    14,    21,    17,   nil,   nil,   nil,   nil,   nil,   nil,    17,
   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    17,    17,    17,    17,   nil,   nil,   nil,   nil,
    17,   nil,   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,    21,   nil,    21,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,    21,
    21,   nil,   nil,    21,    21,    21 ]

racc_goto_pointer = [
   nil,    31,     7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -31,  -110,   -10,  -138,   -87,  -198,   -35,  -129,   -39,  -154,
   nil,   -12,   nil,  -202,  -186,   -59,   -92,   -51,    15,   -21,
   -49,   -52,  -109,   -86,   -19,   -17 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   178,   179,   181,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   116,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_1,
  2, 71, :_reduce_2,
  2, 71, :_reduce_3,
  2, 71, :_reduce_4,
  2, 71, :_reduce_5,
  2, 71, :_reduce_6,
  2, 71, :_reduce_7,
  0, 71, :_reduce_8,
  7, 72, :_reduce_9,
  1, 78, :_reduce_10,
  0, 78, :_reduce_11,
  2, 79, :_reduce_12,
  0, 79, :_reduce_13,
  2, 80, :_reduce_14,
  0, 80, :_reduce_15,
  4, 82, :_reduce_16,
  2, 82, :_reduce_17,
  1, 83, :_reduce_18,
  3, 83, :_reduce_19,
  2, 83, :_reduce_20,
  2, 84, :_reduce_21,
  0, 84, :_reduce_22,
  6, 73, :_reduce_23,
  4, 85, :_reduce_24,
  0, 85, :_reduce_25,
  5, 87, :_reduce_26,
  0, 87, :_reduce_27,
  3, 86, :_reduce_28,
  2, 88, :_reduce_29,
  0, 88, :_reduce_30,
  1, 89, :_reduce_31,
  2, 89, :_reduce_32,
  5, 89, :_reduce_33,
  5, 89, :_reduce_34,
  5, 89, :_reduce_35,
  1, 89, :_reduce_36,
  4, 89, :_reduce_37,
  4, 89, :_reduce_38,
  5, 91, :_reduce_39,
  5, 91, :_reduce_40,
  5, 91, :_reduce_41,
  2, 93, :_reduce_42,
  0, 93, :_reduce_43,
  3, 92, :_reduce_44,
  1, 92, :_reduce_45,
  1, 90, :_reduce_46,
  3, 90, :_reduce_47,
  4, 90, :_reduce_48,
  4, 90, :_reduce_49,
  4, 90, :_reduce_50,
  4, 90, :_reduce_51,
  4, 90, :_reduce_52,
  6, 90, :_reduce_53,
  3, 90, :_reduce_54,
  1, 90, :_reduce_55,
  3, 90, :_reduce_56,
  1, 90, :_reduce_57,
  1, 90, :_reduce_58,
  1, 90, :_reduce_59,
  6, 90, :_reduce_60,
  5, 90, :_reduce_61,
  2, 90, :_reduce_62,
  3, 90, :_reduce_63,
  3, 90, :_reduce_64,
  3, 90, :_reduce_65,
  3, 90, :_reduce_66,
  6, 90, :_reduce_67,
  3, 90, :_reduce_68,
  3, 90, :_reduce_69,
  3, 90, :_reduce_70,
  4, 90, :_reduce_71,
  3, 90, :_reduce_72,
  1, 90, :_reduce_73,
  1, 90, :_reduce_74,
  1, 90, :_reduce_75,
  4, 90, :_reduce_76,
  1, 90, :_reduce_77,
  4, 90, :_reduce_78,
  6, 90, :_reduce_79,
  4, 90, :_reduce_80,
  2, 74, :_reduce_81,
  4, 74, :_reduce_82,
  2, 77, :_reduce_83,
  4, 76, :_reduce_84,
  2, 98, :_reduce_85,
  3, 100, :_reduce_86,
  0, 100, :_reduce_87,
  1, 99, :_reduce_88,
  1, 99, :_reduce_89,
  1, 99, :_reduce_90,
  1, 99, :_reduce_91,
  1, 99, :_reduce_92,
  1, 99, :_reduce_93,
  3, 94, :_reduce_94,
  1, 94, :_reduce_95,
  2, 101, :_reduce_96,
  3, 101, :_reduce_97,
  2, 96, :_reduce_98,
  3, 102, :_reduce_99,
  0, 102, :_reduce_100,
  2, 95, :_reduce_101,
  0, 95, :_reduce_102,
  3, 75, :_reduce_103,
  3, 103, :_reduce_104,
  0, 103, :_reduce_105,
  1, 97, :_reduce_106,
  0, 97, :_reduce_107,
  2, 81, :_reduce_108,
  3, 104, :_reduce_109,
  0, 104, :_reduce_110 ]

racc_reduce_n = 111

racc_shift_n = 235

racc_token_table = {
  false => 0,
  :error => 1,
  "*" => 2,
  "+" => 3,
  "." => 4,
  :in => 5,
  "==" => 6,
  "!=" => 7,
  :noassoc => 8,
  :NOT => 9,
  :and => 10,
  :or => 11,
  "<=" => 12,
  "=>" => 13,
  "<=>" => 14,
  "=" => 15,
  :authenticable => 16,
  :usergroup => 17,
  :class => 18,
  :extends => 19,
  :inverseof => 20,
  :action => 21,
  :foreach => 22,
  :flatforeach => 23,
  :unflatforeach => 24,
  :either => 25,
  :create => 26,
  :derefcreate => 27,
  :delete => 28,
  :if => 29,
  :else => 30,
  :subset => 31,
  :oneof => 32,
  :tryoneof => 33,
  :allof => 34,
  :invariant => 35,
  :forall => 36,
  :exists => 37,
  :isempty => 38,
  :empty => 39,
  :true => 40,
  :false => 41,
  :not => 42,
  :equal => 43,
  :implies => 44,
  :unknown => 45,
  :currentuser => 46,
  :inusergroup => 47,
  :allofusergroup => 48,
  :permit => 49,
  :edit => 50,
  :read => 51,
  :assoc => 52,
  :deassoc => 53,
  :IDENT => 54,
  :NUMBER => 55,
  :STRING => 56,
  :BASIC_TYPE => 57,
  :JS => 58,
  :roole => 59,
  "{" => 60,
  "}" => 61,
  ".." => 62,
  "(" => 63,
  ")" => 64,
  "," => 65,
  "+=" => 66,
  "-=" => 67,
  ":" => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"*\"",
  "\"+\"",
  "\".\"",
  "in",
  "\"==\"",
  "\"!=\"",
  "noassoc",
  "NOT",
  "and",
  "or",
  "\"<=\"",
  "\"=>\"",
  "\"<=>\"",
  "\"=\"",
  "authenticable",
  "usergroup",
  "class",
  "extends",
  "inverseof",
  "action",
  "foreach",
  "flatforeach",
  "unflatforeach",
  "either",
  "create",
  "derefcreate",
  "delete",
  "if",
  "else",
  "subset",
  "oneof",
  "tryoneof",
  "allof",
  "invariant",
  "forall",
  "exists",
  "isempty",
  "empty",
  "true",
  "false",
  "not",
  "equal",
  "implies",
  "unknown",
  "currentuser",
  "inusergroup",
  "allofusergroup",
  "permit",
  "edit",
  "read",
  "assoc",
  "deassoc",
  "IDENT",
  "NUMBER",
  "STRING",
  "BASIC_TYPE",
  "JS",
  "roole",
  "\"{\"",
  "\"}\"",
  "\"..\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "\"+=\"",
  "\"-=\"",
  "\":\"",
  "$start",
  "adslspec",
  "root_elems",
  "class_decl",
  "action_decl",
  "invariant_decl",
  "usergroups_decl",
  "acrule_decl",
  "rule_decl",
  "opt_authenticable",
  "opt_parents",
  "member_decls",
  "ident_list",
  "member_decl",
  "cardinality",
  "opt_inverse",
  "action_args",
  "block",
  "additional_args",
  "statements",
  "statement",
  "expr",
  "foreach_stmt",
  "eitherblocks",
  "optelse",
  "quantifier_parameters_with_commas",
  "optional_expr",
  "comma_separated_exprs",
  "opt_ident_list",
  "perm_op_list",
  "perm_op",
  "more_perm_ops",
  "quantifier_parameter",
  "additional_exprs",
  "additional_ugs",
  "more_idents" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'adsl_parser.racc', 16)
  def _reduce_1(val, _values, result)
     return ASTSpec.new(:lineno => lineno,
                                            :classes => val[0][0],
                                            :actions => val[0][1],
                                            :invariants => val[0][2],
                                            :usergroups => val[0][3].flatten(1),
                                            :ac_rules => val[0][4],
                                            :rules => val[0][5]
                                            )
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 25)
  def _reduce_2(val, _values, result)
     val[1][0].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 26)
  def _reduce_3(val, _values, result)
     val[1][1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 27)
  def _reduce_4(val, _values, result)
     val[1][2].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 28)
  def _reduce_5(val, _values, result)
     val[1][3].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 29)
  def _reduce_6(val, _values, result)
     val[1][4].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 30)
  def _reduce_7(val, _values, result)
     val[1][5].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 31)
  def _reduce_8(val, _values, result)
     return [[], [], [], [], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 33)
  def _reduce_9(val, _values, result)
     return ASTClass.new(
                  :lineno => val[1],
                  :authenticable => val[0],
                  :name => val[2],
                  :parent_names => val[3],
                  :members => val[5]
              ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 41)
  def _reduce_10(val, _values, result)
     return true 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 42)
  def _reduce_11(val, _values, result)
     return false 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 44)
  def _reduce_12(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 45)
  def _reduce_13(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 47)
  def _reduce_14(val, _values, result)
     val[0] << val[1]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 48)
  def _reduce_15(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 50)
  def _reduce_16(val, _values, result)
     return ASTRelation.new(
                 :lineno => val[0][2], :cardinality => val[0].first(2), :to_class_name => val[1],
                 :name => val[2], :inverse_of_name => val[3]
               )
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 54)
  def _reduce_17(val, _values, result)
     return ASTField.new :lineno => val[0][1], :type_name => val[0][0], :name => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 56)
  def _reduce_18(val, _values, result)
     return [val[0][:value], val[0][:value], val[0][:lineno]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 57)
  def _reduce_19(val, _values, result)
     return [val[0][:value], val[2][:value], val[0][:lineno]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 58)
  def _reduce_20(val, _values, result)
     return [val[0][:value], Numeric::INFINITY, val[0][:lineno]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 60)
  def _reduce_21(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 61)
  def _reduce_22(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 63)
  def _reduce_23(val, _values, result)
     return ASTAction.new(
                 :lineno => val[0], :name => val[1], :arg_cardinalities => val[3][0],
                 :arg_types => val[3][1], :arg_names => val[3][2], :block => val[5]
               )
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 69)
  def _reduce_24(val, _values, result)
                     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0]
               
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 71)
  def _reduce_25(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 74)
  def _reduce_26(val, _values, result)
                         val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0]
                   
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 76)
  def _reduce_27(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 78)
  def _reduce_28(val, _values, result)
     return ASTBlock.new :lineno => val[0], :statements => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 80)
  def _reduce_29(val, _values, result)
     val[1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 81)
  def _reduce_30(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 83)
  def _reduce_31(val, _values, result)
     return ASTExprStmt.new :lineno => val[0].lineno, :expr => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 84)
  def _reduce_32(val, _values, result)
     return ASTDeleteObj.new :lineno => val[0], :objset => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 86)
  def _reduce_33(val, _values, result)
                   return ASTCreateTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 89)
  def _reduce_34(val, _values, result)
                   return ASTDeleteTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 92)
  def _reduce_35(val, _values, result)
                   return ASTMemberSet.new :lineno => val[0].lineno, :objset => val[0], :member_name => val[2], :expr => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 94)
  def _reduce_36(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 95)
  def _reduce_37(val, _values, result)
     val[3].unshift val[1]; return ASTEither.new :lineno => val[0], :blocks => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 96)
  def _reduce_38(val, _values, result)
     return ASTIf.new(
               :lineno => val[0], :condition => val[1], :then_block => val[2], :else_block => val[3]
             )
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 101)
  def _reduce_39(val, _values, result)
                      return ASTForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4]
                
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 104)
  def _reduce_40(val, _values, result)
                      f = ASTForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4]
                  f.force_flat(true)
                  return f
                
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 109)
  def _reduce_41(val, _values, result)
                      f = ASTForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4]
                  f.force_flat(false)
                  return f
                
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 114)
  def _reduce_42(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 115)
  def _reduce_43(val, _values, result)
     return ASTBlock.new :statements => [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 117)
  def _reduce_44(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 118)
  def _reduce_45(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 120)
  def _reduce_46(val, _values, result)
     return ASTVariable.new :lineno => val[0].lineno, :var_name => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 121)
  def _reduce_47(val, _values, result)
     return ASTAssignment.new :lineno => val[0].lineno, :var_name => val[0], :expr => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 122)
  def _reduce_48(val, _values, result)
     return ASTSubset.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 123)
  def _reduce_49(val, _values, result)
     return ASTOneOf.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 124)
  def _reduce_50(val, _values, result)
     return ASTTryOneOf.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 125)
  def _reduce_51(val, _values, result)
     return ASTAllOf.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 126)
  def _reduce_52(val, _values, result)
     return ASTCreateObjset.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 128)
  def _reduce_53(val, _values, result)
     return ASTDereferenceCreate.new :lineno => val[0], :objset => val[2], :rel_name => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 129)
  def _reduce_54(val, _values, result)
     return ASTMemberAccess.new :lineno => val[0].lineno, :objset => val[0], :member_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 130)
  def _reduce_55(val, _values, result)
     return ASTEmptyObjset.new :lineno => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 131)
  def _reduce_56(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 132)
  def _reduce_57(val, _values, result)
     return ASTJsExpr.new :lineno => val[0][:lineno], :js    => val[0][:js] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 133)
  def _reduce_58(val, _values, result)
     return ASTNumber.new :lineno => val[0][:lineno], :value => val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 134)
  def _reduce_59(val, _values, result)
     return ASTString.new :lineno => val[0][:lineno], :value => val[0][:value].gsub(%q{\'}, %q{'}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 136)
  def _reduce_60(val, _values, result)
     return ASTForAll.new :lineno => val[0], :vars => val[2], :subformula => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 138)
  def _reduce_61(val, _values, result)
     return ASTExists.new :lineno => val[0], :vars => val[2], :subformula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 140)
  def _reduce_62(val, _values, result)
     return ASTNot.new :lineno => val[0], :subformula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 141)
  def _reduce_63(val, _values, result)
     return ASTAnd.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 142)
  def _reduce_64(val, _values, result)
     return ASTOr.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 144)
  def _reduce_65(val, _values, result)
     return ASTImplies.new :lineno => val[0].lineno, :subformula1 => val[0], :subformula2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 146)
  def _reduce_66(val, _values, result)
     return ASTImplies.new :lineno => val[0].lineno, :subformula1 => val[2], :subformula2 => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 148)
  def _reduce_67(val, _values, result)
     return ASTImplies.new :lineno => val[0], :subformula1 => val[2], :subformula2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 150)
  def _reduce_68(val, _values, result)
     return ASTEqual.new :lineno => val[0].lineno, :exprs => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 152)
  def _reduce_69(val, _values, result)
     return ASTEqual.new :lineno => val[0].lineno, :exprs => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 153)
  def _reduce_70(val, _values, result)
     return ASTNot.new(
          :lineno => val[0].lineno, :subformula => ASTEqual.new(:lineno => val[0].lineno, :exprs => [val[0], val[2]])
        )
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 156)
  def _reduce_71(val, _values, result)
     return ASTEqual.new :lineno => val[0], :exprs => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 157)
  def _reduce_72(val, _values, result)
     return ASTIn.new :lineno => val[0].lineno, :objset1 => val[0], :objset2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 158)
  def _reduce_73(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => true  
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 159)
  def _reduce_74(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => false 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 160)
  def _reduce_75(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => nil   
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 161)
  def _reduce_76(val, _values, result)
     return ASTIsEmpty.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 162)
  def _reduce_77(val, _values, result)
     return ASTCurrentUser.new :lineno => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 164)
  def _reduce_78(val, _values, result)
     return ASTInUserGroup.new :lineno => val[0], :groupname => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 166)
  def _reduce_79(val, _values, result)
     return ASTInUserGroup.new :lineno => val[0], :objset => val[2], :groupname => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 167)
  def _reduce_80(val, _values, result)
     return ASTAllOfUserGroup.new :lineno => val[0], :groupname => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 170)
  def _reduce_81(val, _values, result)
              return ASTInvariant.new :lineno => val[0], :name => nil, :formula => val[1]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 173)
  def _reduce_82(val, _values, result)
              return ASTInvariant.new :lineno => val[0], :name => val[1], :formula => val[3]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 176)
  def _reduce_83(val, _values, result)
     return ASTRule.new :lineno => val[0], :formula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 179)
  def _reduce_84(val, _values, result)
     return ASTPermit.new :lineno => val[0], :group_names => val[1], :ops => val[2], :expr => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 181)
  def _reduce_85(val, _values, result)
     val[1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 182)
  def _reduce_86(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 183)
  def _reduce_87(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 185)
  def _reduce_88(val, _values, result)
     return [:read, val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 186)
  def _reduce_89(val, _values, result)
     return [:edit, val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 187)
  def _reduce_90(val, _values, result)
     return [:create, val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 188)
  def _reduce_91(val, _values, result)
     return [:delete, val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 189)
  def _reduce_92(val, _values, result)
     return [:assoc, val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 190)
  def _reduce_93(val, _values, result)
     return [:deassoc, val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 193)
  def _reduce_94(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 194)
  def _reduce_95(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 197)
  def _reduce_96(val, _values, result)
                              return [val[1], ASTAllOf.new(:lineno => val[0].lineno, :class_name => val[0]), val[0].lineno]
                        
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 199)
  def _reduce_97(val, _values, result)
     return [val[0], val[2], val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 201)
  def _reduce_98(val, _values, result)
     val[1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 203)
  def _reduce_99(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 204)
  def _reduce_100(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 206)
  def _reduce_101(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 207)
  def _reduce_102(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 210)
  def _reduce_103(val, _values, result)
     val[2].unshift ASTUserGroup.new(:lineno => val[1].lineno, :name => val[1]); return val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 212)
  def _reduce_104(val, _values, result)
     val[0] << ASTUserGroup.new(:lineno => val[2].lineno, :name => val[2]); return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 213)
  def _reduce_105(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 215)
  def _reduce_106(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 216)
  def _reduce_107(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 217)
  def _reduce_108(val, _values, result)
     val[1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 218)
  def _reduce_109(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 219)
  def _reduce_110(val, _values, result)
     return [] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ADSLParser


  end
end
