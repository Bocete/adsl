#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'adsl/parser/adsl_parser.rex'
require 'adsl/fol/first_order_logic'

module ADSL
  module Parser

class ADSLParser < Racc::Parser

module_eval(<<'...end adsl_parser.racc/module_eval...', 'adsl_parser.racc', 174)

# generated by racc
  def generate_ast(str)
    scan str
    # do_parse
  end

  def parse(str)
    generate_ast(str).typecheck_and_resolve
  end

...end adsl_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    48,    49,    56,    58,    57,    54,    55,    40,    40,    47,
    56,    58,    57,    54,    55,    56,    58,    57,    54,    55,
    47,   189,   173,    47,    47,    47,    47,    47,   172,   183,
    50,    56,    58,    57,    54,    55,    56,    58,    57,    54,
    55,    56,    58,    57,    54,    55,   126,    47,   110,   159,
   115,    83,    41,   175,   128,    47,   120,   157,     6,   174,
   114,     7,    84,   187,   188,   106,   108,   121,    83,   107,
    47,    40,   118,   131,     8,   102,   103,   119,    20,    76,
   128,   128,    16,    17,    18,    19,   132,    26,    27,   128,
    35,    22,    32,    33,    28,    31,    29,    30,   113,    51,
   -24,    24,   129,   130,   128,    92,    20,   117,   113,    23,
    16,    17,    18,    19,    34,    26,    27,   112,    35,    22,
    32,    33,    28,    31,    29,    30,    67,    51,   125,    24,
   136,   122,   102,   103,    20,   102,   103,    23,    16,    17,
    18,    19,    34,    26,    27,    66,    35,    22,    32,    33,
    28,    31,    29,    30,    65,    51,    64,    24,    56,    58,
    57,    63,    20,   141,   142,    23,    16,    17,    18,    19,
    34,    26,    27,   143,    35,    22,    32,    33,    28,    31,
    29,    30,    62,    15,    92,    24,    56,    58,    57,   155,
    20,   156,    60,    23,    16,    17,    18,    19,    34,    26,
    27,    47,    35,    22,    32,    33,    28,    31,    29,    30,
    92,    51,    56,    24,    59,    47,   161,   162,    20,    56,
   164,    23,    16,    17,    18,    19,    34,    26,    27,    46,
    35,    22,    32,    33,    28,    31,    29,    30,   128,    51,
    47,    24,   168,   169,   170,   171,    20,    47,    47,    23,
    16,    17,    18,    19,    34,    26,    27,   177,    35,    22,
    32,    33,    28,    31,    29,    30,   178,    51,    47,    24,
   179,    45,   181,   182,    20,    79,    44,    23,    16,    17,
    18,    19,    34,    26,    27,    43,    35,    22,    32,    33,
    28,    31,    29,    30,   186,    51,    42,    24,   128,   193,
    39,    38,    20,    36,   111,    23,    16,    17,    18,    19,
    34,    26,    27,    47,    35,    22,    32,    33,    28,    31,
    29,    30,    14,    51,    13,    24,   100,   200,   128,   109,
    20,    47,     9,    23,    16,    17,    18,    19,    34,    26,
    27,    47,    35,    22,    32,    33,    28,    31,    29,    30,
    47,    51,    47,    24,   128,   nil,   nil,   nil,    20,   nil,
   nil,    23,    16,    17,    18,    19,    34,    26,    27,   nil,
    35,    22,    32,    33,    28,    31,    29,    30,   nil,    51,
   nil,    24,   nil,   nil,   nil,   nil,    20,   nil,   nil,    23,
    16,    17,    18,    19,    34,    26,    27,   nil,    35,    22,
    32,    33,    28,    31,    29,    30,   nil,    51,   nil,    24,
   nil,   nil,   nil,   nil,    20,   nil,   nil,    23,    16,    17,
    18,    19,    34,    26,    27,   nil,    35,    22,    32,    33,
    28,    31,    29,    30,   nil,    51,   nil,    24,   nil,   nil,
   nil,   nil,    20,   nil,   nil,    23,    16,    17,    18,    19,
    34,    26,    27,   nil,    35,    22,    32,    33,    28,    31,
    29,    30,   nil,    51,   nil,    24,   nil,   nil,   nil,   nil,
    20,   nil,   nil,    23,    16,    17,    18,    19,    34,    26,
    27,   nil,    35,    22,    32,    33,    28,    31,    29,    30,
   nil,    51,   nil,    24,   nil,   nil,   nil,   nil,    20,   nil,
   nil,    23,    16,    17,    18,    19,    34,    26,    27,   nil,
    35,    22,    32,    33,    28,    31,    29,    30,   nil,    51,
   nil,    24,   nil,   nil,   nil,   nil,    20,   nil,   nil,    23,
    16,    17,    18,    19,    34,    26,    27,   nil,    35,    22,
    32,    33,    28,    31,    29,    30,   nil,    51,   nil,    24,
   151,   152,   153,   149,    20,   147,   150,    23,    16,    17,
    18,    19,    34,   nil,    48,    49,   nil,    22,    56,    58,
    57,    54,    55,    47,   nil,    51,   nil,    24,   151,   152,
   153,   149,    20,   147,   150,    71,    16,    17,    18,    19,
   nil,   nil,   nil,    20,    50,    22,   nil,    16,    17,    18,
    19,   nil,   nil,    51,    20,    24,    22,   nil,    16,    17,
    18,    19,   nil,    71,    51,    20,    24,    22,   nil,    16,
    17,    18,    19,   nil,    71,    51,    20,    24,    22,   nil,
    16,    17,    18,    19,   nil,    71,    51,    20,    24,    22,
   nil,    16,    17,    18,    19,   nil,    71,    51,    20,    24,
    22,   nil,    16,    17,    18,    19,   nil,    71,    77,    20,
    24,    22,   nil,    16,    17,    18,    19,   nil,    71,    51,
    20,    24,    22,   nil,    16,    17,    18,    19,   nil,    71,
    51,    20,    24,    22,   nil,    16,    17,    18,    19,   nil,
    71,    51,    20,    24,    22,   nil,    16,    17,    18,    19,
   nil,    71,    51,    20,    24,    22,   nil,    16,    17,    18,
    19,   nil,    71,    51,    20,    24,    22,   nil,    16,    17,
    18,    19,   nil,    71,    51,    20,    24,    22,   nil,    16,
    17,    18,    19,   nil,    71,    51,    20,    24,    22,   nil,
    16,    17,    18,    19,   nil,    71,    51,    20,    24,    22,
   nil,    16,    17,    18,    19,   nil,    71,    51,    20,    24,
    22,   nil,    16,    17,    18,    19,   nil,    71,    51,    20,
    24,    22,   nil,    16,    17,    18,    19,   nil,    71,    51,
    20,    24,    22,   nil,    16,    17,    18,    19,   nil,    71,
    51,    20,    24,    22,   nil,    16,    17,    18,    19,   nil,
    71,    51,    20,    24,    22,   nil,    16,    17,    18,    19,
   nil,    71,    51,    20,    24,    22,   nil,    16,    17,    18,
    19,     6,    71,    51,     7,    24,    22,     6,   nil,     6,
     7,   nil,     7,    71,    51,   nil,    24,     8,    56,    58,
    57,    54,    55,     8,    71,     8,    56,    58,    57,    54,
    55,    56,    58,    57,    54,    55,    56,    58,    57,    54,
    55 ]

racc_action_check = [
    52,    52,   139,   139,   139,   139,   139,    77,    15,    52,
   133,   133,   133,   133,   133,    53,    53,    53,    53,    53,
    96,   178,   158,    73,    75,    97,   105,    74,   158,   170,
    52,    94,    94,    94,    94,    94,    95,    95,    95,    95,
    95,   167,   167,   167,   167,   167,    99,   195,    77,   139,
    92,    52,    15,   160,   100,   194,    96,   133,     0,   160,
    92,     0,    53,   178,   178,    73,    75,    97,   105,    74,
   196,    51,    94,   104,     0,   129,   129,    95,    55,    45,
   167,   195,    55,    55,    55,    55,   111,    55,    55,   194,
    55,    55,    55,    55,    55,    55,    55,    55,    93,    55,
    39,    55,   101,   101,   196,   113,   150,    93,    90,    55,
   150,   150,   150,   150,    55,   150,   150,    90,   150,   150,
   150,   150,   150,   150,   150,   150,    38,   150,    98,   150,
   116,    98,    69,    69,    23,    98,    98,   150,    23,    23,
    23,    23,   150,    23,    23,    37,    23,    23,    23,    23,
    23,    23,    23,    23,    35,    23,    31,    23,    85,    85,
    85,    30,     8,   124,   125,    23,     8,     8,     8,     8,
    23,     8,     8,   126,     8,     8,     8,     8,     8,     8,
     8,     8,    29,     8,    59,     8,    86,    86,    86,   131,
    54,   132,    27,     8,    54,    54,    54,    54,     8,    54,
    54,   135,    54,    54,    54,    54,    54,    54,    54,    54,
    60,    54,    89,    54,    26,   140,   141,   144,   173,    88,
   146,    54,   173,   173,   173,   173,    54,   173,   173,    20,
   173,   173,   173,   173,   173,   173,   173,   173,   149,   173,
    82,   173,   151,   152,   153,   155,    28,    81,    80,   173,
    28,    28,    28,    28,   173,    28,    28,   161,    28,    28,
    28,    28,    28,    28,    28,    28,   164,    28,   165,    28,
   166,    19,   168,   169,    56,    47,    18,    28,    56,    56,
    56,    56,    28,    56,    56,    17,    56,    56,    56,    56,
    56,    56,    56,    56,   177,    56,    16,    56,   179,   180,
    14,    13,    63,     9,    78,    56,    63,    63,    63,    63,
    56,    63,    63,   185,    63,    63,    63,    63,    63,    63,
    63,    63,     7,    63,     6,    63,    68,   190,   193,    76,
   119,    70,     1,    63,   119,   119,   119,   119,    63,   119,
   119,   197,   119,   119,   119,   119,   119,   119,   119,   119,
   198,   119,   199,   119,   200,   nil,   nil,   nil,   118,   nil,
   nil,   119,   118,   118,   118,   118,   119,   118,   118,   nil,
   118,   118,   118,   118,   118,   118,   118,   118,   nil,   118,
   nil,   118,   nil,   nil,   nil,   nil,    57,   nil,   nil,   118,
    57,    57,    57,    57,   118,    57,    57,   nil,    57,    57,
    57,    57,    57,    57,    57,    57,   nil,    57,   nil,    57,
   nil,   nil,   nil,   nil,    62,   nil,   nil,    57,    62,    62,
    62,    62,    57,    62,    62,   nil,    62,    62,    62,    62,
    62,    62,    62,    62,   nil,    62,   nil,    62,   nil,   nil,
   nil,   nil,   112,   nil,   nil,    62,   112,   112,   112,   112,
    62,   112,   112,   nil,   112,   112,   112,   112,   112,   112,
   112,   112,   nil,   112,   nil,   112,   nil,   nil,   nil,   nil,
    58,   nil,   nil,   112,    58,    58,    58,    58,   112,    58,
    58,   nil,    58,    58,    58,    58,    58,    58,    58,    58,
   nil,    58,   nil,    58,   nil,   nil,   nil,   nil,    41,   nil,
   nil,    58,    41,    41,    41,    41,    58,    41,    41,   nil,
    41,    41,    41,    41,    41,    41,    41,    41,   nil,    41,
   nil,    41,   nil,   nil,   nil,   nil,   117,   nil,   nil,    41,
   117,   117,   117,   117,    41,   117,   117,   nil,   117,   117,
   117,   117,   117,   117,   117,   117,   nil,   117,   nil,   117,
   128,   128,   128,   128,   128,   128,   128,   117,   128,   128,
   128,   128,   117,   nil,    21,    21,   nil,   128,   138,   138,
   138,   138,   138,    21,   nil,   128,   nil,   128,   145,   145,
   145,   145,   145,   145,   145,   128,   145,   145,   145,   145,
   nil,   nil,   nil,    48,    21,   145,   nil,    48,    48,    48,
    48,   nil,   nil,   145,    49,   145,    48,   nil,    49,    49,
    49,    49,   nil,   145,    48,    50,    48,    49,   nil,    50,
    50,    50,    50,   nil,    48,    49,   183,    49,    50,   nil,
   183,   183,   183,   183,   nil,    49,    50,    46,    50,   183,
   nil,    46,    46,    46,    46,   nil,    50,   183,   187,   183,
    46,   nil,   187,   187,   187,   187,   nil,   183,    46,   182,
    46,   187,   nil,   182,   182,   182,   182,   nil,    46,   187,
    44,   187,   182,   nil,    44,    44,    44,    44,   nil,   187,
   182,    43,   182,    44,   nil,    43,    43,    43,    43,   nil,
   182,    44,    42,    44,    43,   nil,    42,    42,    42,    42,
   nil,    44,    43,    40,    43,    42,   nil,    40,    40,    40,
    40,   nil,    43,    42,    71,    42,    40,   nil,    71,    71,
    71,    71,   nil,    42,    40,   189,    40,    71,   nil,   189,
   189,   189,   189,   nil,    40,    71,   115,    71,   189,   nil,
   115,   115,   115,   115,   nil,    71,   189,   120,   189,   115,
   nil,   120,   120,   120,   120,   nil,   189,   115,    64,   115,
   120,   nil,    64,    64,    64,    64,   nil,   115,   120,    65,
   120,    64,   nil,    65,    65,    65,    65,   nil,   120,    64,
   181,    64,    65,   nil,   181,   181,   181,   181,   nil,    64,
    65,   175,    65,   181,   nil,   175,   175,   175,   175,   nil,
    65,   181,   147,   181,   175,   nil,   147,   147,   147,   147,
   nil,   181,   175,   188,   175,   147,   nil,   188,   188,   188,
   188,     5,   175,   147,     5,   147,   188,     3,   nil,     4,
     3,   nil,     4,   147,   188,   nil,   188,     5,    25,    25,
    25,    25,    25,     3,   188,     4,   137,   137,   137,   137,
   137,   184,   184,   184,   184,   184,    72,    72,    72,    72,
    72 ]

racc_action_pointer = [
    45,   332,   nil,   814,   816,   808,   282,   280,   141,   303,
   nil,   nil,   nil,   287,   248,    -4,   244,   233,   224,   219,
   177,   562,   nil,   113,   nil,   832,   162,   140,   225,   130,
   109,   104,   nil,   nil,   nil,   102,   nil,   100,    84,    47,
   682,   477,   671,   660,   649,    37,   616,   233,   572,   583,
   594,    59,    -2,     9,   169,    57,   253,   365,   449,   142,
   168,   nil,   393,   281,   737,   748,   nil,   nil,   273,    82,
   320,   693,   850,    12,    16,    13,   276,    -5,   293,   nil,
   237,   236,   229,   nil,   nil,   152,   180,   nil,   213,   206,
    61,   nil,    18,    51,    25,    30,     9,    14,    85,    -1,
     9,    54,   nil,   nil,    31,    15,   nil,   nil,   nil,   nil,
   nil,    44,   421,    63,   nil,   715,    77,   505,   337,   309,
   726,   nil,   nil,   nil,   121,   122,   131,   nil,   533,    25,
   nil,   147,   138,     4,   nil,   190,   nil,   840,   562,    -4,
   204,   174,   nil,   nil,   171,   561,   209,   781,   nil,   193,
    85,   200,   201,   202,   nil,   198,   nil,   nil,   -25,   nil,
     6,   242,   nil,   nil,   224,   257,   260,    35,   216,   217,
   -27,   nil,   nil,   197,   nil,   770,   nil,   252,     9,   253,
   275,   759,   638,   605,   845,   302,   nil,   627,   792,   704,
   317,   nil,   nil,   283,    44,    36,    59,   330,   339,   341,
   309,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -5,   -88,    -1,    -5,    -5,    -5,   -88,   -88,   -88,   -88,
    -2,    -3,    -4,    -8,   -88,   -45,   -88,   -88,   -88,   -88,
   -88,   -88,   -54,   -88,   -56,   -57,   -88,   -88,   -88,   -88,
   -88,   -88,   -74,   -75,   -76,   -88,   206,   -88,   -88,   -26,
   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,
   -88,   -45,   -88,   -88,   -88,   -88,   -88,   -88,   -88,   -88,
   -88,   -61,   -88,   -88,   -88,   -88,   -12,   -10,   -88,   -88,
   -46,   -88,   -58,   -88,   -88,   -88,   -88,   -45,   -88,   -53,
   -70,   -71,   -73,   -55,   -67,   -62,   -63,   -64,   -65,   -66,
   -88,   -79,   -88,   -83,   -88,   -88,   -88,   -88,   -88,    -7,
   -88,   -15,   -18,   -19,   -88,   -88,   -47,   -48,   -49,   -50,
   -51,   -88,   -88,   -88,   -80,   -88,   -88,   -88,   -88,   -88,
   -88,   -77,    -6,   -11,   -88,   -88,   -88,   -22,   -29,   -88,
   -17,   -88,   -53,   -88,   -78,   -81,   -60,   -82,   -85,   -88,
   -87,   -88,   -14,    -9,   -88,   -29,   -30,   -88,   -35,   -88,
   -88,   -88,   -88,   -88,   -16,   -23,   -52,   -59,   -88,   -69,
   -88,   -21,   -27,   -28,   -88,   -31,   -88,   -88,   -88,   -88,
   -88,   -25,   -68,   -88,   -72,   -88,   -13,   -88,   -53,   -88,
   -42,   -88,   -88,   -88,   -84,   -86,   -20,   -88,   -88,   -88,
   -36,   -44,   -37,   -88,   -88,   -88,   -88,   -32,   -33,   -34,
   -88,   -41,   -38,   -39,   -40,   -43 ]

racc_goto_table = [
    52,   104,    90,    93,     2,   144,   127,    10,    11,    12,
    69,   154,    68,   123,   176,    99,    98,    70,   190,    73,
    74,    75,   163,    78,    37,    80,    81,    82,   192,    25,
   124,     1,   116,   158,   160,   134,   nil,   nil,   nil,   nil,
   nil,    96,    97,   nil,    53,   nil,   nil,   nil,   105,    61,
   nil,   nil,   nil,   nil,   nil,   166,   nil,   nil,   nil,   nil,
   nil,   nil,    72,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   180,   nil,    85,    86,    87,    88,    89,
   nil,   nil,   nil,    94,    95,   191,   nil,   nil,   nil,   nil,
   nil,   nil,   135,   nil,   nil,   nil,   nil,   140,   nil,   201,
   202,   203,   204,   nil,   nil,   146,   205,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   146,   nil,   165,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   133,   nil,   nil,   nil,   nil,   137,   138,
   139,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   185,   nil,   nil,   nil,   nil,   nil,   194,   195,
   196,   nil,   nil,   nil,   197,   198,   199,   nil,   nil,   nil,
   nil,   167,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   184 ]

racc_goto_check = [
    18,    10,    23,    23,     2,    16,    14,     2,     2,     2,
    15,    12,    13,     9,    11,     8,     7,    18,    20,    18,
    18,    18,    16,    18,     6,    18,    18,    18,    22,    21,
    10,     1,    24,    25,    26,    27,   nil,   nil,   nil,   nil,
   nil,    18,    18,   nil,    21,   nil,   nil,   nil,    18,    21,
   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    14,   nil,    21,    21,    21,    21,    21,
   nil,   nil,   nil,    21,    21,    14,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   nil,   nil,   nil,   nil,    18,   nil,    14,
    14,    14,    14,   nil,   nil,    18,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    21,    21,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,    18,    18,
    18,   nil,   nil,   nil,    18,    18,    18,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21 ]

racc_goto_pointer = [
   nil,    31,     4,   nil,   nil,   nil,    11,   -50,   -52,   -85,
   -68,  -147,  -118,   -27,   -94,   -29,  -123,   nil,   -23,   nil,
  -161,    21,  -152,   -57,   -61,  -105,  -106,   -78 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,   nil,   nil,   nil,   nil,
   nil,   nil,   101,   nil,   nil,   nil,   nil,   145,    21,   148,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    91 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 59, :_reduce_1,
  2, 60, :_reduce_2,
  2, 60, :_reduce_3,
  2, 60, :_reduce_4,
  0, 60, :_reduce_5,
  6, 61, :_reduce_6,
  3, 64, :_reduce_7,
  0, 64, :_reduce_8,
  3, 66, :_reduce_9,
  0, 66, :_reduce_10,
  2, 65, :_reduce_11,
  0, 65, :_reduce_12,
  4, 67, :_reduce_13,
  2, 67, :_reduce_14,
  1, 68, :_reduce_15,
  3, 68, :_reduce_16,
  2, 68, :_reduce_17,
  1, 70, :_reduce_18,
  1, 70, :_reduce_19,
  2, 69, :_reduce_20,
  0, 69, :_reduce_21,
  6, 62, :_reduce_22,
  4, 71, :_reduce_23,
  0, 71, :_reduce_24,
  5, 73, :_reduce_25,
  0, 73, :_reduce_26,
  3, 72, :_reduce_27,
  2, 74, :_reduce_28,
  0, 74, :_reduce_29,
  1, 75, :_reduce_30,
  2, 75, :_reduce_31,
  5, 75, :_reduce_32,
  5, 75, :_reduce_33,
  5, 75, :_reduce_34,
  1, 75, :_reduce_35,
  4, 75, :_reduce_36,
  4, 75, :_reduce_37,
  5, 77, :_reduce_38,
  5, 77, :_reduce_39,
  5, 77, :_reduce_40,
  2, 80, :_reduce_41,
  0, 80, :_reduce_42,
  3, 78, :_reduce_43,
  1, 78, :_reduce_44,
  1, 76, :_reduce_45,
  3, 76, :_reduce_46,
  4, 76, :_reduce_47,
  4, 76, :_reduce_48,
  4, 76, :_reduce_49,
  4, 76, :_reduce_50,
  4, 76, :_reduce_51,
  6, 76, :_reduce_52,
  3, 76, :_reduce_53,
  1, 76, :_reduce_54,
  3, 76, :_reduce_55,
  1, 76, :_reduce_56,
  2, 63, :_reduce_57,
  4, 63, :_reduce_58,
  6, 79, :_reduce_59,
  5, 79, :_reduce_60,
  2, 79, :_reduce_61,
  3, 79, :_reduce_62,
  3, 79, :_reduce_63,
  3, 79, :_reduce_64,
  3, 79, :_reduce_65,
  3, 79, :_reduce_66,
  3, 79, :_reduce_67,
  7, 79, :_reduce_68,
  6, 79, :_reduce_69,
  3, 79, :_reduce_70,
  3, 79, :_reduce_71,
  7, 79, :_reduce_72,
  3, 79, :_reduce_73,
  1, 79, :_reduce_74,
  1, 79, :_reduce_75,
  1, 79, :_reduce_76,
  4, 79, :_reduce_77,
  3, 81, :_reduce_78,
  1, 81, :_reduce_79,
  2, 85, :_reduce_80,
  3, 85, :_reduce_81,
  2, 82, :_reduce_82,
  0, 82, :_reduce_83,
  3, 83, :_reduce_84,
  0, 83, :_reduce_85,
  3, 84, :_reduce_86,
  0, 84, :_reduce_87 ]

racc_reduce_n = 88

racc_shift_n = 206

racc_token_table = {
  false => 0,
  :error => 1,
  "==" => 2,
  "!=" => 3,
  :noassoc => 4,
  :NOT => 5,
  "<=>" => 6,
  "<=" => 7,
  "=>" => 8,
  :and => 9,
  :or => 10,
  "." => 11,
  "=" => 12,
  :class => 13,
  :extends => 14,
  :inverseof => 15,
  :action => 16,
  :foreach => 17,
  :flatforeach => 18,
  :unflatforeach => 19,
  :either => 20,
  :create => 21,
  :delete => 22,
  :if => 23,
  :else => 24,
  :subset => 25,
  :oneof => 26,
  :tryoneof => 27,
  :allof => 28,
  :invariant => 29,
  :forall => 30,
  :exists => 31,
  :in => 32,
  :isempty => 33,
  :empty => 34,
  :true => 35,
  :false => 36,
  :not => 37,
  :equal => 38,
  :equiv => 39,
  :implies => 40,
  :unknown => 41,
  :IDENT => 42,
  :BASIC_TYPE => 43,
  :JS => 44,
  "{" => 45,
  "}" => 46,
  "," => 47,
  ".." => 48,
  "+" => 49,
  "0" => 50,
  "1" => 51,
  "(" => 52,
  ")" => 53,
  "+=" => 54,
  "-=" => 55,
  ":" => 56,
  "*" => 57 }

racc_nt_base = 58

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"==\"",
  "\"!=\"",
  "noassoc",
  "NOT",
  "\"<=>\"",
  "\"<=\"",
  "\"=>\"",
  "and",
  "or",
  "\".\"",
  "\"=\"",
  "class",
  "extends",
  "inverseof",
  "action",
  "foreach",
  "flatforeach",
  "unflatforeach",
  "either",
  "create",
  "delete",
  "if",
  "else",
  "subset",
  "oneof",
  "tryoneof",
  "allof",
  "invariant",
  "forall",
  "exists",
  "in",
  "isempty",
  "empty",
  "true",
  "false",
  "not",
  "equal",
  "equiv",
  "implies",
  "unknown",
  "IDENT",
  "BASIC_TYPE",
  "JS",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"..\"",
  "\"+\"",
  "\"0\"",
  "\"1\"",
  "\"(\"",
  "\")\"",
  "\"+=\"",
  "\"-=\"",
  "\":\"",
  "\"*\"",
  "$start",
  "adslspec",
  "root_elems",
  "class_decl",
  "action_decl",
  "invariant_decl",
  "opt_parents",
  "member_decls",
  "more_parents",
  "member_decl",
  "cardinality",
  "inverse_suffix",
  "card_number",
  "action_args",
  "block",
  "additional_args",
  "statements",
  "statement",
  "expr",
  "foreach_stmt",
  "eitherblocks",
  "formula",
  "optelse",
  "quantifier_parameters_with_commas",
  "optional_formula",
  "additional_formulae",
  "additional_exprs",
  "quantifier_parameter" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'adsl_parser.racc', 13)
  def _reduce_1(val, _values, result)
     return ASTSpec.new :lineno => lineno, :classes => val[0][0], :actions => val[0][1], :invariants => val[0][2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 15)
  def _reduce_2(val, _values, result)
     val[1][0].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 16)
  def _reduce_3(val, _values, result)
     val[1][1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 17)
  def _reduce_4(val, _values, result)
     val[1][2].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 18)
  def _reduce_5(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 21)
  def _reduce_6(val, _values, result)
     return ASTClass.new :lineno => val[0], :name => val[1], :parent_names => val[2],  :members => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 23)
  def _reduce_7(val, _values, result)
     val[2].unshift val[1]; return val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 24)
  def _reduce_8(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 26)
  def _reduce_9(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 27)
  def _reduce_10(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 29)
  def _reduce_11(val, _values, result)
     val[0] << val[1]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 30)
  def _reduce_12(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 32)
  def _reduce_13(val, _values, result)
     return ASTRelation.new :lineno => val[0][2], :cardinality => val[0].first(2), :to_class_name => val[1], :name => val[2], :inverse_of_name => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 33)
  def _reduce_14(val, _values, result)
     return ASTBasicTypeField.new :lineno => val[0][1], :type_name => val[0][0], :name => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 35)
  def _reduce_15(val, _values, result)
     return [val[0][0], val[0][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 36)
  def _reduce_16(val, _values, result)
     return [val[0][0], val[2][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 37)
  def _reduce_17(val, _values, result)
     return [val[0][0], 1.0/0.0, val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 39)
  def _reduce_18(val, _values, result)
     return [0, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 40)
  def _reduce_19(val, _values, result)
     return [1, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 42)
  def _reduce_20(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 43)
  def _reduce_21(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 45)
  def _reduce_22(val, _values, result)
     return ASTAction.new(:lineno => val[0], :name => val[1], :arg_cardinalities => val[3][0], :arg_types => val[3][1], :arg_names => val[3][2], :block => val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 47)
  def _reduce_23(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 48)
  def _reduce_24(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 50)
  def _reduce_25(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 51)
  def _reduce_26(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 53)
  def _reduce_27(val, _values, result)
     return ASTBlock.new :lineno => val[0], :statements => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 55)
  def _reduce_28(val, _values, result)
     val[1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 56)
  def _reduce_29(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 58)
  def _reduce_30(val, _values, result)
     return ASTExprStmt.new :lineno => val[0].lineno, :expr => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 59)
  def _reduce_31(val, _values, result)
     return ASTDeleteObj.new :lineno => val[0], :objset => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 61)
  def _reduce_32(val, _values, result)
                   return ASTCreateTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 64)
  def _reduce_33(val, _values, result)
                   return ASTDeleteTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 67)
  def _reduce_34(val, _values, result)
                   return ASTMemberSet.new :lineno => val[0].lineno, :objset => val[0], :member_name => val[2], :expr => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 69)
  def _reduce_35(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 70)
  def _reduce_36(val, _values, result)
     val[3].unshift val[1]; return ASTEither.new :lineno => val[0], :blocks => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 71)
  def _reduce_37(val, _values, result)
     return ASTIf.new :lineno => val[0], :condition => val[1], :then_block => val[2], :else_block => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 74)
  def _reduce_38(val, _values, result)
                   return ASTForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 77)
  def _reduce_39(val, _values, result)
                   f = ASTForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4]
               f.force_flat(true)
               return f
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 82)
  def _reduce_40(val, _values, result)
                   f = ASTForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4]
               f.force_flat(false)
               return f
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 87)
  def _reduce_41(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 88)
  def _reduce_42(val, _values, result)
     return ASTBlock.new :statements => [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 90)
  def _reduce_43(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 91)
  def _reduce_44(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 93)
  def _reduce_45(val, _values, result)
     return ASTVariable.new :lineno => val[0].lineno, :var_name => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 94)
  def _reduce_46(val, _values, result)
     return ASTAssignment.new :lineno => val[0].lineno, :var_name => val[0], :expr => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 95)
  def _reduce_47(val, _values, result)
     return ASTSubset.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 96)
  def _reduce_48(val, _values, result)
     return ASTOneOf.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 97)
  def _reduce_49(val, _values, result)
     return ASTTryOneOf.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 98)
  def _reduce_50(val, _values, result)
     return ASTAllOf.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 99)
  def _reduce_51(val, _values, result)
     return ASTCreateObjset.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 101)
  def _reduce_52(val, _values, result)
              return ASTDereferenceCreate.new :lineno => val[0], :objset => val[2], :rel_name => val[4]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 103)
  def _reduce_53(val, _values, result)
     return ASTMemberAccess.new :lineno => val[0].lineno, :objset => val[0], :member_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 104)
  def _reduce_54(val, _values, result)
     return ASTEmptyObjset.new :lineno => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 105)
  def _reduce_55(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 106)
  def _reduce_56(val, _values, result)
     return ASTJsExpr.new :lineno => val[:lineno], :js => val[:js] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 108)
  def _reduce_57(val, _values, result)
     return ASTInvariant.new :lineno => val[0], :name => nil, :formula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 109)
  def _reduce_58(val, _values, result)
     return ASTInvariant.new :lineno => val[0], :name => val[1], :formula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 112)
  def _reduce_59(val, _values, result)
     return ASTForAll.new :lineno => val[0], :vars => val[2], :subformula => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 114)
  def _reduce_60(val, _values, result)
     return ASTExists.new :lineno => val[0], :vars => val[2], :subformula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 116)
  def _reduce_61(val, _values, result)
     return ASTNot.new :lineno => val[0], :subformula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 118)
  def _reduce_62(val, _values, result)
     return ASTAnd.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 120)
  def _reduce_63(val, _values, result)
     return ASTOr.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 122)
  def _reduce_64(val, _values, result)
     return ASTEquiv.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 124)
  def _reduce_65(val, _values, result)
     return ASTImplies.new :lineno => val[0].lineno, :subformula1 => val[0], :subformula2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 126)
  def _reduce_66(val, _values, result)
     return ASTImplies.new :lineno => val[0].lineno, :subformula1 => val[2], :subformula2 => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 127)
  def _reduce_67(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 129)
  def _reduce_68(val, _values, result)
     return ASTEquiv.new :lineno => val[0], :subformulae => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 131)
  def _reduce_69(val, _values, result)
     return ASTImplies.new :lineno => val[0], :subformula1 => val[2], :subformula2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 133)
  def _reduce_70(val, _values, result)
     return ASTEqual.new :lineno => val[0].lineno, :exprs => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 135)
  def _reduce_71(val, _values, result)
     return ASTNot.new(:lineno => val[0].lineno, :subformula => ASTEqual.new(:lineno => val[0].lineno, :exprs => [val[0], val[2]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 137)
  def _reduce_72(val, _values, result)
     return ASTEqual.new :lineno => val[0], :exprs => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 138)
  def _reduce_73(val, _values, result)
     return ASTIn.new :lineno => val[0].lineno, :objset1 => val[0], :objset2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 139)
  def _reduce_74(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => true  
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 140)
  def _reduce_75(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => false 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 141)
  def _reduce_76(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => nil   
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 142)
  def _reduce_77(val, _values, result)
     return ASTIsEmpty.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 145)
  def _reduce_78(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 146)
  def _reduce_79(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 149)
  def _reduce_80(val, _values, result)
                              return [val[1], ASTAllOf.new(:lineno => val[0].lineno, :class_name => val[0]), val[0].lineno]
                        
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 151)
  def _reduce_81(val, _values, result)
     return [val[0], val[2], val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 153)
  def _reduce_82(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 154)
  def _reduce_83(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 156)
  def _reduce_84(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 157)
  def _reduce_85(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 159)
  def _reduce_86(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 160)
  def _reduce_87(val, _values, result)
     return [] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ADSLParser


  end
end
