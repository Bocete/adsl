#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'adsl/parser/adsl_parser.rex'
require 'adsl/fol/first_order_logic'

module ADSL
  module Parser

class ADSLParser < Racc::Parser

module_eval(<<'...end adsl_parser.racc/module_eval...', 'adsl_parser.racc', 142)

# generated by racc
  def generate_ast(str)
    scan str
    # do_parse
  end

  def parse(str)
    generate_ast(str).typecheck_and_resolve
  end

...end adsl_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    38,    39,    44,    46,    45,    42,    43,    44,    46,    45,
    42,    43,    44,    46,    45,    42,    43,    44,    46,    45,
    42,    43,    32,    40,    44,    46,    45,    42,    43,   119,
   143,   144,    60,   141,    62,    63,    64,   108,   111,   101,
    82,    67,    37,   112,    31,   107,   106,    84,   139,   106,
    68,   105,   150,    16,   110,    17,   119,    21,    22,   152,
    19,    28,    29,    23,    27,    25,    26,    49,    16,   113,
    17,    37,    21,    22,    24,    19,    28,    29,    23,    27,
    25,    26,    49,    16,   120,    17,   121,    21,    22,    24,
    19,    28,    29,    23,    27,    25,    26,    49,    16,   -20,
    17,    56,    21,    22,    24,    19,    28,    29,    23,    27,
    25,    26,    49,    16,   124,    17,   125,    21,    22,    24,
    19,    28,    29,    23,    27,    25,    26,    49,    16,    54,
    17,    82,    21,    22,    24,    19,    28,    29,    23,    27,
    25,    26,    49,    16,    53,    17,   129,    21,    22,    24,
    19,    28,    29,    23,    27,    25,    26,    49,    16,    52,
    17,    48,    21,    22,    24,    19,    28,    29,    23,    27,
    25,    26,    49,    16,    47,    17,    69,    21,    22,    24,
    19,    28,    29,    23,    27,    25,    26,    49,    16,   134,
    17,    44,    21,    22,    24,    19,    28,    29,    23,    27,
    25,    26,    49,    16,    44,    17,    41,    21,    22,    24,
    19,    28,    29,    23,    27,    25,    26,    49,    16,   145,
    17,   146,    21,    22,    24,    19,    28,    29,    23,    27,
    25,    26,    49,    16,    37,    17,    37,    21,    22,    24,
    19,    28,    29,    23,    27,    25,    26,    49,    16,   149,
    17,    36,    21,    22,    24,    19,    28,    29,    23,    27,
    25,    26,    49,    16,   101,    17,    37,    21,    22,    24,
    19,    28,    29,    23,    27,    25,    26,    15,    16,   103,
    17,    35,    21,    22,    24,    19,    28,    29,    23,    27,
    25,    26,    49,    44,    46,    45,    42,    43,    37,    24,
   143,   144,    60,   141,    62,    63,    64,    44,    46,    45,
    60,    67,    62,    63,    64,    44,    46,    45,   139,    67,
    60,   155,    62,    63,    64,   156,    61,    34,    60,    67,
    62,    63,    64,    92,    93,   158,    61,    67,    60,   -41,
    62,    63,    64,    33,    61,   160,    60,    67,    62,    63,
    64,   164,   165,   161,    61,    67,    60,   119,    62,    63,
    64,   163,    61,   100,    60,    67,    62,    63,    64,    92,
    93,   114,    61,    67,    60,   168,    62,    63,    64,    30,
    61,   101,    60,    67,    62,    63,    64,   115,   116,   170,
    61,    67,    60,   171,    62,    63,    64,    16,    61,    17,
    16,    67,    17,    16,    71,    17,   102,    71,    61,   101,
    71,    49,   172,    16,    49,    17,    16,    49,    17,    16,
    71,    17,    16,    71,    17,    14,    71,    49,     6,    71,
    49,     7,     6,    49,     6,     7,    49,     7,     6,     8,
    13,     7,   101,     8,   136,     8,    99,    92,    93,     8,
    44,    46,    45,    42,    43,    44,    46,    45,    42,    43,
    88,   166,   167,    92,    93,    44,    46,    45,    42,    43,
    44,    46,    45,    42,    43,   147,   104,    98,   101,    37,
   177,   148,   175,   176,   101,   119,    97,    37,    95,    94,
     9,    82,   185,   101,   101,   101,   119 ]

racc_action_check = [
    18,    18,    85,    85,    85,    85,    85,    86,    86,    86,
    86,    86,    51,    51,    51,    51,    51,   126,   126,   126,
   126,   126,    13,    18,   132,   132,   132,   132,   132,   178,
   119,   119,   119,   119,   119,   119,   119,    82,    85,   178,
    47,   119,    18,    86,    13,    82,    80,    51,   119,    83,
    36,    80,   126,   110,    83,   110,    95,   110,   110,   132,
   110,   110,   110,   110,   110,   110,   110,   110,    42,    87,
    42,    87,    42,    42,   110,    42,    42,    42,    42,    42,
    42,    42,    42,   165,    96,   165,    97,   165,   165,    42,
   165,   165,   165,   165,   165,   165,   165,   165,    52,    33,
    52,    32,    52,    52,   165,    52,    52,    52,    52,    52,
    52,    52,    52,    34,   100,    34,   101,    34,    34,    52,
    34,    34,    34,    34,    34,    34,    34,    34,    53,    27,
    53,   106,    53,    53,    34,    53,    53,    53,    53,    53,
    53,    53,    53,    46,    26,    46,   109,    46,    46,    53,
    46,    46,    46,    46,    46,    46,    46,    46,    45,    25,
    45,    22,    45,    45,    46,    45,    45,    45,    45,    45,
    45,    45,    45,   105,    21,   105,    37,   105,   105,    45,
   105,   105,   105,   105,   105,   105,   105,   105,    43,   114,
    43,    79,    43,    43,   105,    43,    43,    43,    43,    43,
    43,    43,    43,   112,    78,   112,    19,   112,   112,    43,
   112,   112,   112,   112,   112,   112,   112,   112,   111,   120,
   111,   121,   111,   111,   112,   111,   111,   111,   111,   111,
   111,   111,   111,    23,    73,    23,    72,    23,    23,   111,
    23,    23,    23,    23,    23,    23,    23,    23,    24,   124,
    24,    17,    24,    24,    23,    24,    24,    24,    24,    24,
    24,    24,    24,     8,   128,     8,    70,     8,     8,    24,
     8,     8,     8,     8,     8,     8,     8,     8,    44,    68,
    44,    16,    44,    44,     8,    44,    44,    44,    44,    44,
    44,    44,    44,   173,   173,   173,   173,   173,   133,    44,
   138,   138,   138,   138,   138,   138,   138,    76,    76,    76,
    98,   138,    98,    98,    98,    75,    75,    75,   138,    98,
    99,   134,    99,    99,    99,   137,    98,    15,    35,    99,
    35,    35,    35,   115,   115,   139,    99,    35,   176,   140,
   176,   176,   176,    14,    35,   142,   177,   176,   177,   177,
   177,   151,   151,   143,   176,   177,   141,   144,   141,   141,
   141,   145,   177,    64,   171,   141,   171,   171,   171,    58,
    58,    90,   141,   171,   175,   155,   175,   175,   175,     9,
   171,   159,   108,   175,   108,   108,   108,    91,    91,   160,
   175,   108,   158,   161,   158,   158,   158,    41,   108,    41,
   113,   158,   113,    40,    41,    40,    66,   113,   158,    66,
    40,    41,   162,    39,   113,    39,   167,    40,   167,    38,
    39,    38,    54,   167,    54,     7,    38,    39,     0,    54,
   167,     0,     5,    38,     4,     5,    54,     4,     3,     0,
     6,     3,   169,     5,   117,     4,    63,   117,   117,     3,
    59,    59,    59,    59,    59,    20,    20,    20,    20,    20,
    55,   153,   153,    55,    55,   131,   131,   131,   131,   131,
   130,   130,   130,   130,   130,   122,    74,    62,   122,    74,
   170,   123,   170,   170,   123,   172,    60,   174,    57,    56,
     1,    48,   179,   181,   182,   183,   185 ]

racc_action_pointer = [
   417,   490,   nil,   427,   423,   421,   407,   392,   244,   379,
   nil,   nil,   nil,    10,   303,   280,   241,   211,    -2,   166,
   449,   134,   121,   214,   229,   119,   104,    89,   nil,   nil,
   nil,   nil,    68,    58,    94,   311,    17,   143,   400,   394,
   384,   378,    49,   169,   259,   139,   124,     7,   458,   nil,
   nil,     6,    79,   109,   403,   425,   455,   447,   331,   444,
   446,   nil,   437,   406,   323,   nil,   365,   nil,   238,   nil,
   222,   nil,   192,   190,   435,   309,   301,   nil,   198,   185,
     4,   nil,    12,     7,   nil,    -4,     1,    27,   nil,   nil,
   338,   351,   nil,   nil,   nil,    22,    51,    53,   293,   303,
    81,    83,   nil,   nil,   nil,   154,    98,   nil,   365,   105,
    34,   199,   184,   381,   156,   295,   nil,   409,   nil,    15,
   186,   180,   434,   440,   208,   nil,    11,   nil,   220,   nil,
   464,   459,    18,   254,   308,   nil,   nil,   290,   285,   292,
   295,   339,   301,   320,   323,   319,   nil,   nil,   nil,   nil,
   nil,   310,   nil,   420,   nil,   342,   nil,   nil,   375,   337,
   356,   346,   402,   nil,   nil,    64,   nil,   397,   nil,   398,
   437,   347,   451,   287,   443,   357,   321,   329,    -5,   482,
   nil,   449,   450,   451,   nil,   462,   nil ]

racc_action_default = [
    -5,   -79,    -1,    -5,    -5,    -5,   -79,   -79,   -79,   -79,
    -2,    -3,    -4,   -79,   -79,   -44,   -79,   -79,   -79,   -48,
   -49,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -66,   -67,
   187,    -9,   -79,   -22,   -79,   -79,   -79,   -79,   -79,   -79,
   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -44,
   -53,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -50,
   -79,   -37,   -79,   -79,   -79,   -41,   -79,   -43,   -79,   -47,
   -62,   -48,   -63,   -65,   -79,   -54,   -55,   -56,   -57,   -58,
   -79,   -70,   -79,   -74,   -59,   -79,   -79,   -79,    -6,    -8,
   -79,   -11,   -14,   -15,    -9,   -79,   -79,   -79,   -79,   -79,
   -79,   -79,   -45,   -46,   -68,   -79,   -79,   -71,   -79,   -79,
   -79,   -79,   -79,   -79,   -79,   -79,   -13,   -79,   -18,   -25,
   -79,   -79,   -79,   -79,   -79,   -42,   -79,   -69,   -72,   -52,
   -73,   -76,   -79,   -78,   -17,   -12,    -7,   -79,   -25,   -37,
   -27,   -79,   -79,   -79,   -79,   -19,   -36,   -38,   -39,   -40,
   -51,   -79,   -61,   -79,   -10,   -79,   -23,   -24,   -79,   -28,
   -79,   -79,   -79,   -21,   -60,   -79,   -64,   -79,   -16,   -26,
   -42,   -79,   -79,   -75,   -77,   -79,   -79,   -79,   -79,   -33,
   -35,   -29,   -30,   -31,   -32,   -79,   -34 ]

racc_goto_table = [
    20,    66,    70,    72,    73,    74,   118,    55,   137,   140,
    80,    83,     1,    58,    57,    50,    51,     2,    87,   179,
    10,    11,    12,   135,   154,    96,    59,   157,   140,   109,
   151,   153,   127,   nil,    75,    76,    77,    78,    79,   nil,
   nil,   nil,   nil,   nil,    85,    86,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   162,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   122,   123,   nil,   nil,   nil,   nil,
   117,   nil,   nil,   nil,   128,   nil,   nil,   133,   nil,   nil,
   nil,   nil,   nil,   180,   nil,   nil,   nil,   nil,   nil,   184,
   nil,   nil,   nil,   nil,   nil,   nil,   186,   126,   nil,   nil,
   nil,   nil,   130,   131,   132,   nil,   nil,   159,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   169,   nil,   nil,   nil,   nil,   nil,
   nil,   174,   nil,   nil,   nil,   nil,   nil,   178,   nil,   nil,
   nil,   181,   182,   183,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   173 ]

racc_goto_check = [
    20,    16,    19,    19,    19,    19,    12,     6,    14,    17,
    21,    21,     1,    13,    11,    20,    20,     2,    19,    18,
     2,     2,     2,    10,     9,     8,    20,    14,    17,    22,
    23,    24,    25,   nil,    20,    20,    20,    20,    20,   nil,
   nil,   nil,   nil,   nil,    20,    20,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    16,    16,   nil,   nil,   nil,   nil,
     6,   nil,   nil,   nil,    16,   nil,   nil,    19,   nil,   nil,
   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,    12,
   nil,   nil,   nil,   nil,   nil,   nil,    12,    20,   nil,   nil,
   nil,   nil,    20,    20,    20,   nil,   nil,    16,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,   nil,
   nil,    19,   nil,   nil,   nil,   nil,   nil,    16,   nil,   nil,
   nil,    16,    16,    16,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20 ]

racc_goto_pointer = [
   nil,    12,    17,   nil,   nil,   nil,   -24,   nil,   -33,  -110,
   -92,   -19,   -89,   -20,  -111,   nil,   -34,  -110,  -153,   -36,
    -8,   -37,   -54,  -101,  -102,   -74 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,   nil,    89,    90,   nil,
    91,   nil,   nil,   nil,   nil,   138,   142,    65,   nil,    18,
   nil,   nil,   nil,   nil,   nil,    81 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 49, :_reduce_1,
  2, 50, :_reduce_2,
  2, 50, :_reduce_3,
  2, 50, :_reduce_4,
  0, 50, :_reduce_5,
  5, 51, :_reduce_6,
  7, 51, :_reduce_7,
  2, 54, :_reduce_8,
  0, 54, :_reduce_9,
  4, 55, :_reduce_10,
  1, 56, :_reduce_11,
  3, 56, :_reduce_12,
  2, 56, :_reduce_13,
  1, 58, :_reduce_14,
  1, 58, :_reduce_15,
  2, 57, :_reduce_16,
  0, 57, :_reduce_17,
  6, 52, :_reduce_18,
  4, 59, :_reduce_19,
  0, 59, :_reduce_20,
  5, 61, :_reduce_21,
  0, 61, :_reduce_22,
  3, 60, :_reduce_23,
  2, 62, :_reduce_24,
  0, 62, :_reduce_25,
  3, 63, :_reduce_26,
  1, 63, :_reduce_27,
  2, 63, :_reduce_28,
  5, 63, :_reduce_29,
  5, 63, :_reduce_30,
  5, 63, :_reduce_31,
  5, 63, :_reduce_32,
  4, 63, :_reduce_33,
  3, 66, :_reduce_34,
  1, 66, :_reduce_35,
  4, 65, :_reduce_36,
  1, 64, :_reduce_37,
  4, 64, :_reduce_38,
  4, 64, :_reduce_39,
  4, 64, :_reduce_40,
  1, 64, :_reduce_41,
  3, 64, :_reduce_42,
  1, 64, :_reduce_43,
  1, 67, :_reduce_44,
  4, 67, :_reduce_45,
  4, 67, :_reduce_46,
  3, 67, :_reduce_47,
  1, 67, :_reduce_48,
  2, 53, :_reduce_49,
  4, 53, :_reduce_50,
  6, 68, :_reduce_51,
  5, 68, :_reduce_52,
  2, 68, :_reduce_53,
  3, 68, :_reduce_54,
  3, 68, :_reduce_55,
  3, 68, :_reduce_56,
  3, 68, :_reduce_57,
  3, 68, :_reduce_58,
  3, 68, :_reduce_59,
  7, 68, :_reduce_60,
  6, 68, :_reduce_61,
  3, 68, :_reduce_62,
  3, 68, :_reduce_63,
  7, 68, :_reduce_64,
  3, 68, :_reduce_65,
  1, 68, :_reduce_66,
  1, 68, :_reduce_67,
  4, 68, :_reduce_68,
  3, 69, :_reduce_69,
  1, 69, :_reduce_70,
  2, 73, :_reduce_71,
  3, 73, :_reduce_72,
  2, 70, :_reduce_73,
  0, 70, :_reduce_74,
  3, 71, :_reduce_75,
  0, 71, :_reduce_76,
  3, 72, :_reduce_77,
  0, 72, :_reduce_78 ]

racc_reduce_n = 79

racc_shift_n = 187

racc_token_table = {
  false => 0,
  :error => 1,
  "==" => 2,
  "!=" => 3,
  :noassoc => 4,
  :NOT => 5,
  "<=>" => 6,
  "<=" => 7,
  "=>" => 8,
  :and => 9,
  :or => 10,
  :class => 11,
  :extends => 12,
  :inverseof => 13,
  :action => 14,
  :foreach => 15,
  :either => 16,
  :create => 17,
  :delete => 18,
  :subset => 19,
  :oneof => 20,
  :allof => 21,
  :invariant => 22,
  :forall => 23,
  :exists => 24,
  :in => 25,
  :empty => 26,
  :true => 27,
  :false => 28,
  :not => 29,
  :equal => 30,
  :equiv => 31,
  :implies => 32,
  :IDENT => 33,
  "{" => 34,
  "}" => 35,
  ".." => 36,
  "+" => 37,
  "0" => 38,
  "1" => 39,
  "(" => 40,
  ")" => 41,
  "," => 42,
  "=" => 43,
  "." => 44,
  "+=" => 45,
  "-=" => 46,
  ":" => 47 }

racc_nt_base = 48

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"==\"",
  "\"!=\"",
  "noassoc",
  "NOT",
  "\"<=>\"",
  "\"<=\"",
  "\"=>\"",
  "and",
  "or",
  "class",
  "extends",
  "inverseof",
  "action",
  "foreach",
  "either",
  "create",
  "delete",
  "subset",
  "oneof",
  "allof",
  "invariant",
  "forall",
  "exists",
  "in",
  "empty",
  "true",
  "false",
  "not",
  "equal",
  "equiv",
  "implies",
  "IDENT",
  "\"{\"",
  "\"}\"",
  "\"..\"",
  "\"+\"",
  "\"0\"",
  "\"1\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "\"=\"",
  "\".\"",
  "\"+=\"",
  "\"-=\"",
  "\":\"",
  "$start",
  "adslspec",
  "root_elems",
  "class_decl",
  "action_decl",
  "invariant_decl",
  "rel_decls",
  "rel_decl",
  "cardinality",
  "inverse_suffix",
  "card_number",
  "action_args",
  "block",
  "additional_args",
  "statements",
  "statement",
  "objset",
  "create_objset",
  "eitherblocks",
  "invariant_objset",
  "formula",
  "quantifier_parameters_with_commas",
  "optional_formula",
  "additional_formulae",
  "additional_invariant_objsets",
  "quantifier_parameter" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'adsl_parser.racc', 11)
  def _reduce_1(val, _values, result)
     return ASTSpec.new :lineno => lineno, :classes => val[0][0], :actions => val[0][1], :invariants => val[0][2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 13)
  def _reduce_2(val, _values, result)
     val[1][0].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 14)
  def _reduce_3(val, _values, result)
     val[1][1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 15)
  def _reduce_4(val, _values, result)
     val[1][2].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 16)
  def _reduce_5(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 19)
  def _reduce_6(val, _values, result)
     return ASTClass.new :lineno => val[0], :name => val[1], :relations => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 21)
  def _reduce_7(val, _values, result)
     return ASTClass.new :lineno => val[0], :name => val[1], :parent_name => val[3], :relations => val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 23)
  def _reduce_8(val, _values, result)
     val[0] << val[1]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 24)
  def _reduce_9(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 26)
  def _reduce_10(val, _values, result)
     return ASTRelation.new :lineno => val[0][2], :cardinality => val[0].first(2), :to_class_name => val[1], :name => val[2], :inverse_of_name => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 28)
  def _reduce_11(val, _values, result)
     return [val[0][0], val[0][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 29)
  def _reduce_12(val, _values, result)
     return [val[0][0], val[2][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 30)
  def _reduce_13(val, _values, result)
     return [val[0][0], 1.0/0.0, val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 32)
  def _reduce_14(val, _values, result)
     return [0, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 33)
  def _reduce_15(val, _values, result)
     return [1, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 35)
  def _reduce_16(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 36)
  def _reduce_17(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 38)
  def _reduce_18(val, _values, result)
     return ASTAction.new(:lineno => val[0], :name => val[1], :arg_cardinalities => val[3][0], :arg_types => val[3][1], :arg_names => val[3][2], :block => val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 40)
  def _reduce_19(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 41)
  def _reduce_20(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 43)
  def _reduce_21(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 44)
  def _reduce_22(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 46)
  def _reduce_23(val, _values, result)
     return ASTBlock.new :lineno => val[0], :statements => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 48)
  def _reduce_24(val, _values, result)
     val[1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 49)
  def _reduce_25(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 51)
  def _reduce_26(val, _values, result)
     return ASTAssignment.new :lineno => val[0].lineno, :var_name => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 52)
  def _reduce_27(val, _values, result)
     return ASTObjsetStmt.new :lineno => val[0].lineno, :objset => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 53)
  def _reduce_28(val, _values, result)
     return ASTDeleteObj.new :lineno => val[0], :objset => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 54)
  def _reduce_29(val, _values, result)
     return ASTCreateTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 55)
  def _reduce_30(val, _values, result)
     return ASTDeleteTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 56)
  def _reduce_31(val, _values, result)
     return ASTSetTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 57)
  def _reduce_32(val, _values, result)
     return ASTForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 58)
  def _reduce_33(val, _values, result)
     val[3].unshift val[1]; return ASTEither.new :lineno => val[0], :blocks => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 60)
  def _reduce_34(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 61)
  def _reduce_35(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 63)
  def _reduce_36(val, _values, result)
     return ASTCreateObjset.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 65)
  def _reduce_37(val, _values, result)
     return ASTVariable.new :lineno => val[0].lineno, :var_name => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 66)
  def _reduce_38(val, _values, result)
     return ASTSubset.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 67)
  def _reduce_39(val, _values, result)
     return ASTOneOf.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 68)
  def _reduce_40(val, _values, result)
     return ASTAllOf.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 69)
  def _reduce_41(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 70)
  def _reduce_42(val, _values, result)
     return ASTDereference.new :lineno => val[0].lineno, :objset => val[0], :rel_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 71)
  def _reduce_43(val, _values, result)
     return ASTEmptyObjset.new :lineno => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 73)
  def _reduce_44(val, _values, result)
     return ASTVariable.new :lineno => val[0].lineno, :var_name => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 74)
  def _reduce_45(val, _values, result)
     return ASTSubset.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 75)
  def _reduce_46(val, _values, result)
     return ASTAllOf.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 76)
  def _reduce_47(val, _values, result)
     return ASTDereference.new :lineno => val[0].lineno, :objset => val[0], :rel_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 77)
  def _reduce_48(val, _values, result)
     return ASTEmptyObjset.new :lineno => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 79)
  def _reduce_49(val, _values, result)
     return ASTInvariant.new :lineno => val[0], :name => nil, :formula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 80)
  def _reduce_50(val, _values, result)
     return ASTInvariant.new :lineno => val[0], :name => val[1], :formula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 83)
  def _reduce_51(val, _values, result)
     return ASTForAll.new :lineno => val[0], :vars => val[2], :subformula => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 85)
  def _reduce_52(val, _values, result)
     return ASTExists.new :lineno => val[0], :vars => val[2], :subformula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 87)
  def _reduce_53(val, _values, result)
     return ASTNot.new :lineno => val[0], :subformula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 89)
  def _reduce_54(val, _values, result)
     return ASTAnd.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 91)
  def _reduce_55(val, _values, result)
     return ASTOr.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 93)
  def _reduce_56(val, _values, result)
     return ASTEquiv.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 95)
  def _reduce_57(val, _values, result)
     return ASTImplies.new :lineno => val[0].lineno, :subformula1 => val[0], :subformula2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 97)
  def _reduce_58(val, _values, result)
     return ASTImplies.new :lineno => val[0].lineno, :subformula1 => val[2], :subformula2 => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 98)
  def _reduce_59(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 100)
  def _reduce_60(val, _values, result)
     return ASTEquiv.new :lineno => val[0], :subformulae => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 102)
  def _reduce_61(val, _values, result)
     return ASTImplies.new :lineno => val[0], :subformula1 => val[2], :subformula2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 104)
  def _reduce_62(val, _values, result)
     return ASTEqual.new :lineno => val[0].lineno, :objsets => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 106)
  def _reduce_63(val, _values, result)
     return ASTNot.new(:lineno => val[0].lineno, :subformula => ASTEqual.new(:lineno => val[0].lineno, :objsets => [val[0], val[2]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 108)
  def _reduce_64(val, _values, result)
     return ASTEqual.new :lineno => val[0], :objsets => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 109)
  def _reduce_65(val, _values, result)
     return ASTIn.new :lineno => val[0].lineno, :objset1 => val[0], :objset2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 110)
  def _reduce_66(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => true 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 111)
  def _reduce_67(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => false 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 112)
  def _reduce_68(val, _values, result)
     return ASTEmpty.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 115)
  def _reduce_69(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 116)
  def _reduce_70(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 118)
  def _reduce_71(val, _values, result)
     return [val[1], ASTAllOf.new(:lineno => val[0].lineno, :class_name => val[0]), val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 119)
  def _reduce_72(val, _values, result)
     return [val[0], val[2], val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 121)
  def _reduce_73(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 122)
  def _reduce_74(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 124)
  def _reduce_75(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 125)
  def _reduce_76(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 127)
  def _reduce_77(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 128)
  def _reduce_78(val, _values, result)
     return [] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ADSLParser


  end
end
