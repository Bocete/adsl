#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'adsl/parser/adsl_parser.rex'
require 'adsl/fol/first_order_logic'

module ADSL
  module Parser

class ADSLParser < Racc::Parser

module_eval(<<'...end adsl_parser.racc/module_eval...', 'adsl_parser.racc', 157)

# generated by racc
  def generate_ast(str)
    scan str
    # do_parse
  end

  def parse(str)
    generate_ast(str).typecheck_and_resolve
  end

...end adsl_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    52,    54,    53,    50,    51,    52,    54,    53,    50,    51,
    52,    54,    53,    50,    51,    39,    46,    46,   175,   152,
    46,    46,    46,    52,    52,    54,    53,    50,    51,    52,
    54,    53,    50,    51,    39,    52,    54,    53,    50,    51,
    46,    47,    48,   149,    46,   161,    46,    46,   147,   115,
    46,   160,   110,    89,   102,    40,   173,   174,   103,   116,
   101,   114,   109,    52,    54,    53,   113,   106,    20,    49,
   122,   105,    16,    17,    18,    19,   122,    24,    25,   108,
    34,    22,    31,    32,    26,    30,    28,    29,   112,    57,
    52,    54,    53,   120,    20,   122,   108,    27,    16,    17,
    18,    19,    33,    24,    25,   107,    34,    22,    31,    32,
    26,    30,    28,    29,   117,    57,   163,   104,    98,    99,
    20,   125,   162,    27,    16,    17,    18,    19,    33,    24,
    25,   126,    34,    22,    31,    32,    26,    30,    28,    29,
    46,    57,   123,   124,    98,    99,    20,    98,    99,    27,
    16,    17,    18,    19,    33,    24,    25,    87,    34,    22,
    31,    32,    26,    30,    28,    29,    96,    15,   130,    39,
    87,    87,    20,    76,   135,    27,    16,    17,    18,    19,
    33,    24,    25,   136,    34,    22,    31,    32,    26,    30,
    28,    29,    73,    57,   -23,   145,   146,    65,    20,    46,
    64,    27,    16,    17,    18,    19,    33,    24,    25,    63,
    34,    22,    31,    32,    26,    30,    28,    29,    62,    57,
    46,   151,    52,    61,    20,   154,    60,    27,    16,    17,
    18,    19,    33,    24,    25,   156,    34,    22,    31,    32,
    26,    30,    28,    29,   122,    57,    56,   159,    55,    45,
    20,   165,   166,    27,    16,    17,    18,    19,    33,    24,
    25,    46,    34,    22,    31,    32,    26,    30,    28,    29,
   167,    57,   168,    44,    43,    42,    20,   172,    41,    27,
    16,    17,    18,    19,    33,    24,    25,    38,    34,    22,
    31,    32,    26,    30,    28,    29,   122,    57,   180,    37,
    46,    35,    20,    14,    13,    27,    16,    17,    18,    19,
    33,    24,    25,     9,    34,    22,    31,    32,    26,    30,
    28,    29,   185,    57,   122,    46,    46,    46,    20,   122,
   nil,    27,    16,    17,    18,    19,    33,    24,    25,   nil,
    34,    22,    31,    32,    26,    30,    28,    29,   nil,    57,
   nil,   nil,   nil,   nil,    20,   nil,   nil,    27,    16,    17,
    18,    19,    33,    24,    25,   nil,    34,    22,    31,    32,
    26,    30,    28,    29,   nil,    57,   nil,   nil,   nil,   nil,
    20,   nil,   nil,    27,    16,    17,    18,    19,    33,    24,
    25,   nil,    34,    22,    31,    32,    26,    30,    28,    29,
   nil,    57,   nil,   nil,   nil,   nil,    20,   nil,   nil,    27,
    16,    17,    18,    19,    33,    24,    25,   nil,    34,    22,
    31,    32,    26,    30,    28,    29,   nil,    57,   nil,   nil,
   nil,   nil,    20,   nil,   nil,    27,    16,    17,    18,    19,
    33,    24,    25,   nil,    34,    22,    31,    32,    26,    30,
    28,    29,   nil,    57,   nil,   nil,   nil,   nil,    20,   nil,
   nil,    27,    16,    17,    18,    19,    33,    24,    25,   nil,
    34,    22,    31,    32,    26,    30,    28,    29,   nil,    57,
   nil,   nil,   nil,   nil,    20,   nil,   nil,    27,    16,    17,
    18,    19,    33,    24,    25,   nil,    34,    22,    31,    32,
    26,    30,    28,    29,   nil,    57,   nil,   nil,   141,   142,
    20,   140,   143,    27,    16,    17,    18,    19,    33,   nil,
   nil,   nil,     6,    22,   nil,     7,   141,   142,    20,   140,
   143,    57,    16,    17,    18,    19,     8,   nil,    20,   nil,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    74,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,   nil,    20,    57,
   nil,    22,    16,    17,    18,    19,   nil,     6,   nil,    57,
     7,    22,     6,     6,   nil,     7,     7,   nil,   nil,    57,
   nil,     8,   nil,   nil,   nil,   nil,     8,     8,    52,    54,
    53,    50,    51,    52,    54,    53,    50,    51,    52,    54,
    53,    50,    51,    52,    54,    53,    50,    51,    52,    54,
    53,    50,    51 ]

racc_action_check = [
   133,   133,   133,   133,   133,   127,   127,   127,   127,   127,
    59,    59,    59,    59,    59,    15,    71,    92,   166,   137,
    72,    93,    70,    83,    91,    91,    91,    91,    91,    90,
    90,    90,    90,    90,    74,   158,   158,   158,   158,   158,
    79,    21,    21,   133,    78,   148,   176,    77,   127,    92,
    21,   148,    87,    59,    71,    15,   166,   166,    72,    93,
    70,    91,    87,    80,    80,    80,    90,    75,    27,    21,
   158,    74,    27,    27,    27,    27,   176,    27,    27,    88,
    27,    27,    27,    27,    27,    27,    27,    27,    88,    27,
    81,    81,    81,    95,   161,    96,    85,    27,   161,   161,
   161,   161,    27,   161,   161,    85,   161,   161,   161,   161,
   161,   161,   161,   161,    94,   161,   150,    73,    94,    94,
   112,   100,   150,   161,   112,   112,   112,   112,   161,   112,
   112,   106,   112,   112,   112,   112,   112,   112,   112,   112,
    68,   112,    97,    97,    67,    67,     8,   123,   123,   112,
     8,     8,     8,     8,   112,     8,     8,   108,     8,     8,
     8,     8,     8,     8,     8,     8,    66,     8,   111,    57,
    56,    55,    51,    46,   119,     8,    51,    51,    51,    51,
     8,    51,    51,   120,    51,    51,    51,    51,    51,    51,
    51,    51,    44,    51,    38,   125,   126,    37,    60,   129,
    36,    51,    60,    60,    60,    60,    51,    60,    60,    34,
    60,    60,    60,    60,    60,    60,    60,    60,    30,    60,
   134,   135,    84,    29,    61,   139,    28,    60,    61,    61,
    61,    61,    60,    61,    61,   141,    61,    61,    61,    61,
    61,    61,    61,    61,   142,    61,    25,   145,    24,    20,
   143,   151,   154,    61,   143,   143,   143,   143,    61,   143,
   143,   155,   143,   143,   143,   143,   143,   143,   143,   143,
   156,   143,   157,    19,    18,    17,    26,   165,    16,   143,
    26,    26,    26,    26,   143,    26,    26,    14,    26,    26,
    26,    26,    26,    26,    26,    26,   168,    26,   169,    13,
   171,     9,   113,     7,     6,    26,   113,   113,   113,   113,
    26,   113,   113,     1,   113,   113,   113,   113,   113,   113,
   113,   113,   177,   113,   180,   181,   182,   183,    53,   185,
   nil,   113,    53,    53,    53,    53,   113,    53,    53,   nil,
    53,    53,    53,    53,    53,    53,    53,    53,   nil,    53,
   nil,   nil,   nil,   nil,    50,   nil,   nil,    53,    50,    50,
    50,    50,    53,    50,    50,   nil,    50,    50,    50,    50,
    50,    50,    50,    50,   nil,    50,   nil,   nil,   nil,   nil,
    40,   nil,   nil,    50,    40,    40,    40,    40,    50,    40,
    40,   nil,    40,    40,    40,    40,    40,    40,    40,    40,
   nil,    40,   nil,   nil,   nil,   nil,    54,   nil,   nil,    40,
    54,    54,    54,    54,    40,    54,    54,   nil,    54,    54,
    54,    54,    54,    54,    54,    54,   nil,    54,   nil,   nil,
   nil,   nil,   107,   nil,   nil,    54,   107,   107,   107,   107,
    54,   107,   107,   nil,   107,   107,   107,   107,   107,   107,
   107,   107,   nil,   107,   nil,   nil,   nil,   nil,    52,   nil,
   nil,   107,    52,    52,    52,    52,   107,    52,    52,   nil,
    52,    52,    52,    52,    52,    52,    52,    52,   nil,    52,
   nil,   nil,   nil,   nil,   114,   nil,   nil,    52,   114,   114,
   114,   114,    52,   114,   114,   nil,   114,   114,   114,   114,
   114,   114,   114,   114,   nil,   114,   nil,   nil,   138,   138,
   138,   138,   138,   114,   138,   138,   138,   138,   114,   nil,
   nil,   nil,     0,   138,   nil,     0,   122,   122,   122,   122,
   122,   138,   122,   122,   122,   122,     0,   nil,   110,   nil,
   nil,   122,   110,   110,   110,   110,   nil,   nil,    45,   122,
   nil,   110,    45,    45,    45,    45,   nil,   nil,   115,   110,
   nil,    45,   115,   115,   115,   115,   nil,   nil,    47,    45,
   nil,   115,    47,    47,    47,    47,   nil,   nil,    48,   115,
   nil,    47,    48,    48,    48,    48,   nil,   nil,    49,    47,
   nil,    48,    49,    49,    49,    49,   nil,   nil,    42,    48,
   nil,    49,    42,    42,    42,    42,   nil,   nil,    41,    49,
   nil,    42,    41,    41,    41,    41,   nil,   nil,    39,    42,
   nil,    41,    39,    39,    39,    39,   nil,   nil,    63,    41,
   nil,    39,    63,    63,    63,    63,   nil,   nil,    43,    39,
   nil,    63,    43,    43,    43,    43,   nil,   nil,   140,    63,
   nil,    43,   140,   140,   140,   140,   nil,   nil,   163,    43,
   nil,   140,   163,   163,   163,   163,   nil,   nil,   167,   140,
   nil,   163,   167,   167,   167,   167,   nil,   nil,   173,   163,
   nil,   167,   173,   173,   173,   173,   nil,   nil,   174,   167,
   nil,   173,   174,   174,   174,   174,   nil,   nil,   175,   173,
   nil,   174,   175,   175,   175,   175,   nil,   nil,    62,   174,
   nil,   175,    62,    62,    62,    62,   nil,     4,   nil,   175,
     4,    62,     5,     3,   nil,     5,     3,   nil,   nil,    62,
   nil,     4,   nil,   nil,   nil,   nil,     5,     3,    69,    69,
    69,    69,    69,   170,   170,   170,   170,   170,    23,    23,
    23,    23,    23,   131,   131,   131,   131,   131,   132,   132,
   132,   132,   132 ]

racc_action_pointer = [
   509,   313,   nil,   710,   704,   709,   264,   263,   127,   301,
   nil,   nil,   nil,   285,   239,     3,   230,   227,   226,   225,
   201,    39,   nil,   742,   200,   198,   257,    49,   178,   175,
   170,   nil,   nil,   nil,   161,   nil,   159,   157,   145,   599,
   361,   589,   579,   619,   152,   529,   133,   549,   559,   569,
   335,   153,   439,   309,   387,   131,   130,   157,   nil,     4,
   179,   205,   689,   609,   nil,   nil,   117,    98,   129,   732,
    11,     5,     9,    68,    22,    56,   nil,    36,    33,    29,
    57,    84,   nil,    17,   216,    53,   nil,    22,    36,   nil,
    23,    18,     6,    10,    72,    50,    54,    98,   nil,   nil,
    81,   nil,   nil,   nil,   nil,   nil,    91,   413,   117,   nil,
   519,   119,   101,   283,   465,   539,   nil,   nil,   nil,   134,
   143,   nil,   509,   101,   nil,   155,   147,    -1,   nil,   188,
   nil,   747,   752,    -6,   209,   181,   nil,   -23,   491,   214,
   629,   195,   203,   231,   nil,   204,   nil,   nil,     2,   nil,
    73,   236,   nil,   nil,   212,   250,   218,   262,    29,   nil,
   nil,    75,   nil,   639,   nil,   237,     6,   649,   255,   276,
   737,   289,   nil,   659,   669,   679,    35,   312,   nil,   nil,
   283,   314,   315,   316,   nil,   288,   nil,   nil ]

racc_action_default = [
    -5,   -82,    -1,    -5,    -5,    -5,   -82,   -82,   -82,   -82,
    -2,    -3,    -4,    -8,   -82,   -41,   -82,   -82,   -82,   -82,
   -82,   -82,   -50,   -51,   -82,   -82,   -82,   -82,   -82,   -82,
   -82,   -68,   -69,   -70,   -82,   188,   -82,   -82,   -25,   -82,
   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -82,
   -82,   -82,   -82,   -82,   -82,   -82,   -82,   -41,   -55,   -82,
   -82,   -82,   -82,   -82,   -12,   -10,   -82,   -82,   -42,   -52,
   -82,   -82,   -82,   -82,   -41,   -82,   -49,   -64,   -65,   -67,
   -56,   -57,   -58,   -59,   -60,   -82,   -73,   -82,   -77,   -61,
   -82,   -82,   -82,   -82,   -82,    -7,   -82,   -14,   -17,   -18,
   -82,   -43,   -44,   -45,   -46,   -47,   -82,   -82,   -82,   -74,
   -82,   -82,   -82,   -82,   -82,   -82,   -71,    -6,   -11,   -82,
   -82,   -21,   -28,   -82,   -16,   -82,   -49,   -82,   -72,   -75,
   -54,   -76,   -79,   -82,   -81,   -82,    -9,   -82,   -28,   -29,
   -82,   -82,   -82,   -82,   -15,   -22,   -48,   -53,   -82,   -63,
   -82,   -20,   -26,   -27,   -82,   -30,   -82,   -82,   -82,   -24,
   -62,   -82,   -66,   -82,   -13,   -82,   -49,   -82,   -82,   -38,
   -78,   -80,   -19,   -82,   -82,   -82,   -82,   -35,   -40,   -36,
   -82,   -31,   -32,   -33,   -34,   -82,   -37,   -39 ]

racc_goto_table = [
    23,   100,    68,   121,    70,    71,    72,   137,    75,    67,
    77,    78,    79,    85,    88,   144,    66,     2,    58,    59,
    10,    11,    12,   153,   118,    92,    93,   164,   119,    95,
    94,   177,    69,    36,   179,     1,   111,   148,   150,   128,
   nil,   nil,    80,    81,    82,    83,    84,   nil,   nil,   157,
   nil,   nil,    90,    91,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   169,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   129,   nil,   178,   nil,   nil,   134,   nil,
   nil,   nil,   nil,   184,   nil,   139,   nil,   186,   nil,   nil,
   nil,   nil,   187,   nil,   nil,   nil,   nil,   nil,   nil,   127,
   nil,   139,   nil,   155,   131,   132,   133,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   171,   nil,   nil,   nil,
   176,   nil,   nil,   nil,   nil,   158,   181,   182,   183,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   170 ]

racc_goto_check = [
    20,    10,    18,    14,    18,    18,    18,    16,    18,    15,
    18,    18,    18,    22,    22,    12,    13,     2,    20,    20,
     2,     2,     2,    16,     9,    18,    18,    11,    10,     8,
     7,    19,    20,     6,    21,     1,    23,    24,    25,    26,
   nil,   nil,    20,    20,    20,    20,    20,   nil,   nil,    14,
   nil,   nil,    20,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    18,   nil,    14,   nil,   nil,    18,   nil,
   nil,   nil,   nil,    14,   nil,    18,   nil,    14,   nil,   nil,
   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,    20,
   nil,    18,   nil,    18,    20,    20,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,
    18,   nil,   nil,   nil,   nil,    20,    18,    18,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    20 ]

racc_goto_pointer = [
   nil,    35,    17,   nil,   nil,   nil,    20,   -34,   -36,   -70,
   -66,  -124,  -108,   -22,   -93,   -29,  -115,   nil,   -37,  -137,
    -8,  -135,   -42,   -52,   -95,   -96,   -69 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,   nil,   nil,   nil,   nil,
   nil,   nil,    97,   nil,   nil,   nil,   nil,   138,    21,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    86 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 55, :_reduce_1,
  2, 56, :_reduce_2,
  2, 56, :_reduce_3,
  2, 56, :_reduce_4,
  0, 56, :_reduce_5,
  6, 57, :_reduce_6,
  3, 60, :_reduce_7,
  0, 60, :_reduce_8,
  3, 62, :_reduce_9,
  0, 62, :_reduce_10,
  2, 61, :_reduce_11,
  0, 61, :_reduce_12,
  4, 63, :_reduce_13,
  1, 64, :_reduce_14,
  3, 64, :_reduce_15,
  2, 64, :_reduce_16,
  1, 66, :_reduce_17,
  1, 66, :_reduce_18,
  2, 65, :_reduce_19,
  0, 65, :_reduce_20,
  6, 58, :_reduce_21,
  4, 67, :_reduce_22,
  0, 67, :_reduce_23,
  5, 69, :_reduce_24,
  0, 69, :_reduce_25,
  3, 68, :_reduce_26,
  2, 70, :_reduce_27,
  0, 70, :_reduce_28,
  1, 71, :_reduce_29,
  2, 71, :_reduce_30,
  5, 71, :_reduce_31,
  5, 71, :_reduce_32,
  5, 71, :_reduce_33,
  5, 71, :_reduce_34,
  4, 71, :_reduce_35,
  4, 71, :_reduce_36,
  2, 75, :_reduce_37,
  0, 75, :_reduce_38,
  3, 73, :_reduce_39,
  1, 73, :_reduce_40,
  1, 72, :_reduce_41,
  3, 72, :_reduce_42,
  4, 72, :_reduce_43,
  4, 72, :_reduce_44,
  4, 72, :_reduce_45,
  4, 72, :_reduce_46,
  4, 72, :_reduce_47,
  6, 72, :_reduce_48,
  3, 72, :_reduce_49,
  1, 72, :_reduce_50,
  2, 59, :_reduce_51,
  4, 59, :_reduce_52,
  6, 74, :_reduce_53,
  5, 74, :_reduce_54,
  2, 74, :_reduce_55,
  3, 74, :_reduce_56,
  3, 74, :_reduce_57,
  3, 74, :_reduce_58,
  3, 74, :_reduce_59,
  3, 74, :_reduce_60,
  3, 74, :_reduce_61,
  7, 74, :_reduce_62,
  6, 74, :_reduce_63,
  3, 74, :_reduce_64,
  3, 74, :_reduce_65,
  7, 74, :_reduce_66,
  3, 74, :_reduce_67,
  1, 74, :_reduce_68,
  1, 74, :_reduce_69,
  1, 74, :_reduce_70,
  4, 74, :_reduce_71,
  3, 76, :_reduce_72,
  1, 76, :_reduce_73,
  2, 80, :_reduce_74,
  3, 80, :_reduce_75,
  2, 77, :_reduce_76,
  0, 77, :_reduce_77,
  3, 78, :_reduce_78,
  0, 78, :_reduce_79,
  3, 79, :_reduce_80,
  0, 79, :_reduce_81 ]

racc_reduce_n = 82

racc_shift_n = 188

racc_token_table = {
  false => 0,
  :error => 1,
  "==" => 2,
  "!=" => 3,
  :noassoc => 4,
  :NOT => 5,
  "<=>" => 6,
  "<=" => 7,
  "=>" => 8,
  :and => 9,
  :or => 10,
  "." => 11,
  "=" => 12,
  :class => 13,
  :extends => 14,
  :inverseof => 15,
  :action => 16,
  :foreach => 17,
  :either => 18,
  :create => 19,
  :delete => 20,
  :if => 21,
  :else => 22,
  :subset => 23,
  :oneof => 24,
  :forceoneof => 25,
  :allof => 26,
  :invariant => 27,
  :forall => 28,
  :exists => 29,
  :in => 30,
  :isempty => 31,
  :empty => 32,
  :true => 33,
  :false => 34,
  :not => 35,
  :equal => 36,
  :equiv => 37,
  :implies => 38,
  :unknown => 39,
  :IDENT => 40,
  "{" => 41,
  "}" => 42,
  "," => 43,
  ".." => 44,
  "+" => 45,
  "0" => 46,
  "1" => 47,
  "(" => 48,
  ")" => 49,
  "+=" => 50,
  "-=" => 51,
  ":" => 52,
  "*" => 53 }

racc_nt_base = 54

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"==\"",
  "\"!=\"",
  "noassoc",
  "NOT",
  "\"<=>\"",
  "\"<=\"",
  "\"=>\"",
  "and",
  "or",
  "\".\"",
  "\"=\"",
  "class",
  "extends",
  "inverseof",
  "action",
  "foreach",
  "either",
  "create",
  "delete",
  "if",
  "else",
  "subset",
  "oneof",
  "forceoneof",
  "allof",
  "invariant",
  "forall",
  "exists",
  "in",
  "isempty",
  "empty",
  "true",
  "false",
  "not",
  "equal",
  "equiv",
  "implies",
  "unknown",
  "IDENT",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"..\"",
  "\"+\"",
  "\"0\"",
  "\"1\"",
  "\"(\"",
  "\")\"",
  "\"+=\"",
  "\"-=\"",
  "\":\"",
  "\"*\"",
  "$start",
  "adslspec",
  "root_elems",
  "class_decl",
  "action_decl",
  "invariant_decl",
  "opt_parents",
  "rel_decls",
  "more_parents",
  "rel_decl",
  "cardinality",
  "inverse_suffix",
  "card_number",
  "action_args",
  "block",
  "additional_args",
  "statements",
  "statement",
  "objset",
  "eitherblocks",
  "formula",
  "optelse",
  "quantifier_parameters_with_commas",
  "optional_formula",
  "additional_formulae",
  "additional_objsets",
  "quantifier_parameter" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'adsl_parser.racc', 13)
  def _reduce_1(val, _values, result)
     return ASTSpec.new :lineno => lineno, :classes => val[0][0], :actions => val[0][1], :invariants => val[0][2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 15)
  def _reduce_2(val, _values, result)
     val[1][0].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 16)
  def _reduce_3(val, _values, result)
     val[1][1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 17)
  def _reduce_4(val, _values, result)
     val[1][2].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 18)
  def _reduce_5(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 21)
  def _reduce_6(val, _values, result)
     return ASTClass.new :lineno => val[0], :name => val[1], :parent_names => val[2],  :relations => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 23)
  def _reduce_7(val, _values, result)
     val[2].unshift val[1]; return val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 24)
  def _reduce_8(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 26)
  def _reduce_9(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 27)
  def _reduce_10(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 29)
  def _reduce_11(val, _values, result)
     val[0] << val[1]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 30)
  def _reduce_12(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 32)
  def _reduce_13(val, _values, result)
     return ASTRelation.new :lineno => val[0][2], :cardinality => val[0].first(2), :to_class_name => val[1], :name => val[2], :inverse_of_name => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 34)
  def _reduce_14(val, _values, result)
     return [val[0][0], val[0][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 35)
  def _reduce_15(val, _values, result)
     return [val[0][0], val[2][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 36)
  def _reduce_16(val, _values, result)
     return [val[0][0], 1.0/0.0, val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 38)
  def _reduce_17(val, _values, result)
     return [0, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 39)
  def _reduce_18(val, _values, result)
     return [1, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 41)
  def _reduce_19(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 42)
  def _reduce_20(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 44)
  def _reduce_21(val, _values, result)
     return ASTAction.new(:lineno => val[0], :name => val[1], :arg_cardinalities => val[3][0], :arg_types => val[3][1], :arg_names => val[3][2], :block => val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 46)
  def _reduce_22(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 47)
  def _reduce_23(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 49)
  def _reduce_24(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 50)
  def _reduce_25(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 52)
  def _reduce_26(val, _values, result)
     return ASTBlock.new :lineno => val[0], :statements => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 54)
  def _reduce_27(val, _values, result)
     val[1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 55)
  def _reduce_28(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 57)
  def _reduce_29(val, _values, result)
     return ASTObjsetStmt.new :lineno => val[0].lineno, :objset => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 58)
  def _reduce_30(val, _values, result)
     return ASTDeleteObj.new :lineno => val[0], :objset => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 60)
  def _reduce_31(val, _values, result)
                   return ASTCreateTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 63)
  def _reduce_32(val, _values, result)
                   return ASTDeleteTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 66)
  def _reduce_33(val, _values, result)
                   return ASTSetTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 69)
  def _reduce_34(val, _values, result)
                   return ASTForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 71)
  def _reduce_35(val, _values, result)
     val[3].unshift val[1]; return ASTEither.new :lineno => val[0], :blocks => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 72)
  def _reduce_36(val, _values, result)
     return ASTIf.new :lineno => val[0], :condition => val[1], :then_block => val[2], :else_block => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 74)
  def _reduce_37(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 75)
  def _reduce_38(val, _values, result)
     return ASTBlock.new :statements => [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 77)
  def _reduce_39(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 78)
  def _reduce_40(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 80)
  def _reduce_41(val, _values, result)
     return ASTVariable.new :lineno => val[0].lineno, :var_name => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 81)
  def _reduce_42(val, _values, result)
     return ASTAssignment.new :lineno => val[0].lineno, :var_name => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 82)
  def _reduce_43(val, _values, result)
     return ASTSubset.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 83)
  def _reduce_44(val, _values, result)
     return ASTOneOf.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 84)
  def _reduce_45(val, _values, result)
     return ASTForceOneOf.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 85)
  def _reduce_46(val, _values, result)
     return ASTAllOf.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 86)
  def _reduce_47(val, _values, result)
     return ASTCreateObjset.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 88)
  def _reduce_48(val, _values, result)
                return ASTDereferenceBuild.new :lineno => val[0].lineno, :objset => val[2], :rel_name => val[4]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 90)
  def _reduce_49(val, _values, result)
     return ASTDereference.new :lineno => val[0].lineno, :objset => val[0], :rel_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 91)
  def _reduce_50(val, _values, result)
     return ASTEmptyObjset.new :lineno => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 93)
  def _reduce_51(val, _values, result)
     return ASTInvariant.new :lineno => val[0], :name => nil, :formula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 94)
  def _reduce_52(val, _values, result)
     return ASTInvariant.new :lineno => val[0], :name => val[1], :formula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 97)
  def _reduce_53(val, _values, result)
     return ASTForAll.new :lineno => val[0], :vars => val[2], :subformula => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 99)
  def _reduce_54(val, _values, result)
     return ASTExists.new :lineno => val[0], :vars => val[2], :subformula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 101)
  def _reduce_55(val, _values, result)
     return ASTNot.new :lineno => val[0], :subformula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 103)
  def _reduce_56(val, _values, result)
     return ASTAnd.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 105)
  def _reduce_57(val, _values, result)
     return ASTOr.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 107)
  def _reduce_58(val, _values, result)
     return ASTEquiv.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 109)
  def _reduce_59(val, _values, result)
     return ASTImplies.new :lineno => val[0].lineno, :subformula1 => val[0], :subformula2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 111)
  def _reduce_60(val, _values, result)
     return ASTImplies.new :lineno => val[0].lineno, :subformula1 => val[2], :subformula2 => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 112)
  def _reduce_61(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 114)
  def _reduce_62(val, _values, result)
     return ASTEquiv.new :lineno => val[0], :subformulae => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 116)
  def _reduce_63(val, _values, result)
     return ASTImplies.new :lineno => val[0], :subformula1 => val[2], :subformula2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 118)
  def _reduce_64(val, _values, result)
     return ASTEqual.new :lineno => val[0].lineno, :objsets => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 120)
  def _reduce_65(val, _values, result)
     return ASTNot.new(:lineno => val[0].lineno, :subformula => ASTEqual.new(:lineno => val[0].lineno, :objsets => [val[0], val[2]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 122)
  def _reduce_66(val, _values, result)
     return ASTEqual.new :lineno => val[0], :objsets => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 123)
  def _reduce_67(val, _values, result)
     return ASTIn.new :lineno => val[0].lineno, :objset1 => val[0], :objset2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 124)
  def _reduce_68(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => true  
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 125)
  def _reduce_69(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => false 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 126)
  def _reduce_70(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => nil   
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 127)
  def _reduce_71(val, _values, result)
     return ASTIsEmpty.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 130)
  def _reduce_72(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 131)
  def _reduce_73(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 133)
  def _reduce_74(val, _values, result)
     return [val[1], ASTAllOf.new(:lineno => val[0].lineno, :class_name => val[0]), val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 134)
  def _reduce_75(val, _values, result)
     return [val[0], val[2], val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 136)
  def _reduce_76(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 137)
  def _reduce_77(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 139)
  def _reduce_78(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 140)
  def _reduce_79(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 142)
  def _reduce_80(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 143)
  def _reduce_81(val, _values, result)
     return [] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ADSLParser


  end
end
