#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'adsl/parser/adsl_parser.rex'
require 'adsl/fol/first_order_logic'

module ADSL
  module Parser

class ADSLParser < Racc::Parser

module_eval(<<'...end adsl_parser.racc/module_eval...', 'adsl_parser.racc', 169)

# generated by racc
  def generate_ast(str)
    scan str
    # do_parse
  end

  def parse(str)
    generate_ast(str).typecheck_and_resolve
  end

...end adsl_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    52,    54,    53,    50,    51,    52,    54,    53,    50,    51,
    52,    54,    53,    50,    51,    39,    46,    46,   182,   161,
    46,    46,    46,    52,    52,    54,    53,    50,    51,    39,
    52,    54,    53,    50,    51,    52,    54,    53,    50,    51,
   120,    46,   110,   122,   108,   152,    46,    46,   168,    46,
    89,   115,   109,   112,   167,   150,   102,    40,   180,   181,
   103,   116,   101,   113,   125,   166,   123,   124,   105,   114,
    20,   165,   122,   122,    16,    17,    18,    19,   122,    24,
    25,   122,    34,    22,    31,    32,    26,    30,    28,    29,
   117,    57,    98,    99,    98,    99,    20,   126,   108,    27,
    16,    17,    18,    19,    33,    24,    25,   107,    34,    22,
    31,    32,    26,    30,    28,    29,    46,    57,    52,    54,
    53,    87,    20,    98,    99,    27,    16,    17,    18,    19,
    33,    24,    25,    46,    34,    22,    31,    32,    26,    30,
    28,    29,   130,    15,    52,    54,    53,   106,    20,   104,
    46,    27,    16,    17,    18,    19,    33,    24,    25,    96,
    34,    22,    31,    32,    26,    30,    28,    29,   135,    57,
   136,    39,    87,   148,    20,   149,    87,    27,    16,    17,
    18,    19,    33,    24,    25,    46,    34,    22,    31,    32,
    26,    30,    28,    29,    76,    57,    73,   -23,    46,   154,
    20,   155,    65,    27,    16,    17,    18,    19,    33,    24,
    25,   157,    34,    22,    31,    32,    26,    30,    28,    29,
    64,    57,   122,    63,    52,   162,    20,   163,   164,    27,
    16,    17,    18,    19,    33,    24,    25,    62,    34,    22,
    31,    32,    26,    30,    28,    29,    61,    57,   170,   171,
    46,   172,    20,    60,   174,    27,    16,    17,    18,    19,
    33,    24,    25,   175,    34,    22,    31,    32,    26,    30,
    28,    29,   176,    57,    56,    55,   179,    45,    20,   122,
   186,    27,    16,    17,    18,    19,    33,    24,    25,    44,
    34,    22,    31,    32,    26,    30,    28,    29,    43,    57,
    42,    41,    46,    38,    20,    37,    35,    27,    16,    17,
    18,    19,    33,    24,    25,   193,    34,    22,    31,    32,
    26,    30,    28,    29,   122,    57,    14,    13,     9,    46,
    20,    46,    46,    27,    16,    17,    18,    19,    33,    24,
    25,   122,    34,    22,    31,    32,    26,    30,    28,    29,
   nil,    57,   nil,   nil,   nil,   nil,    20,   nil,   nil,    27,
    16,    17,    18,    19,    33,    24,    25,   nil,    34,    22,
    31,    32,    26,    30,    28,    29,   nil,    57,   nil,   nil,
   nil,   nil,    20,   nil,   nil,    27,    16,    17,    18,    19,
    33,    24,    25,   nil,    34,    22,    31,    32,    26,    30,
    28,    29,   nil,    57,   nil,   nil,   nil,   nil,    20,   nil,
   nil,    27,    16,    17,    18,    19,    33,    24,    25,   nil,
    34,    22,    31,    32,    26,    30,    28,    29,   nil,    57,
   nil,   nil,   nil,   nil,    20,   nil,   nil,    27,    16,    17,
    18,    19,    33,    24,    25,   nil,    34,    22,    31,    32,
    26,    30,    28,    29,   nil,    57,   nil,   nil,   nil,   nil,
    20,   nil,   nil,    27,    16,    17,    18,    19,    33,    24,
    25,   nil,    34,    22,    31,    32,    26,    30,    28,    29,
   nil,    57,   nil,   nil,   nil,   nil,    20,   nil,   nil,    27,
    16,    17,    18,    19,    33,    24,    25,   nil,    34,    22,
    31,    32,    26,    30,    28,    29,   nil,    57,    47,    48,
   nil,   nil,   nil,     6,   nil,    27,     7,    46,     6,   nil,
    33,     7,   144,   145,   146,   142,    20,   140,   143,     8,
    16,    17,    18,    19,     8,   nil,   nil,   nil,    49,    22,
   144,   145,   146,   142,    20,   140,   143,    57,    16,    17,
    18,    19,   nil,   nil,    20,   nil,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    74,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,   nil,    20,    57,   nil,    22,    16,    17,
    18,    19,   nil,     6,    20,    57,     7,    22,    16,    17,
    18,    19,   nil,     6,   nil,    57,     7,    22,   nil,     8,
    52,    54,    53,    50,    51,    57,   nil,   nil,   nil,     8,
    52,    54,    53,    50,    51,    52,    54,    53,    50,    51,
    52,    54,    53,    50,    51,    52,    54,    53,    50,    51 ]

racc_action_check = [
   133,   133,   133,   133,   133,    59,    59,    59,    59,    59,
   127,   127,   127,   127,   127,    15,    71,    92,   171,   144,
    72,    93,    70,    83,    90,    90,    90,    90,    90,    74,
    91,    91,    91,    91,    91,   160,   160,   160,   160,   160,
    95,   187,    87,    96,    88,   133,   189,    79,   153,   188,
    59,    92,    87,    88,   153,   127,    71,    15,   171,   171,
    72,    93,    70,    90,   100,   151,    97,    97,    74,    91,
   114,   151,   160,   187,   114,   114,   114,   114,   189,   114,
   114,   188,   114,   114,   114,   114,   114,   114,   114,   114,
    94,   114,    67,    67,    94,    94,    52,   106,    85,   114,
    52,    52,    52,    52,   114,    52,    52,    85,    52,    52,
    52,    52,    52,    52,    52,    52,    78,    52,    81,    81,
    81,   108,     8,   123,   123,    52,     8,     8,     8,     8,
    52,     8,     8,    77,     8,     8,     8,     8,     8,     8,
     8,     8,   111,     8,    80,    80,    80,    75,   107,    73,
    68,     8,   107,   107,   107,   107,     8,   107,   107,    66,
   107,   107,   107,   107,   107,   107,   107,   107,   119,   107,
   120,    57,    56,   125,    50,   126,    55,   107,    50,    50,
    50,    50,   107,    50,    50,   129,    50,    50,    50,    50,
    50,    50,    50,    50,    46,    50,    44,    38,   134,   135,
    61,   137,    37,    50,    61,    61,    61,    61,    50,    61,
    61,   139,    61,    61,    61,    61,    61,    61,    61,    61,
    36,    61,   142,    34,    84,   145,    53,   146,   148,    61,
    53,    53,    53,    53,    61,    53,    53,    30,    53,    53,
    53,    53,    53,    53,    53,    53,    29,    53,   154,   157,
   158,   159,   166,    28,   161,    53,   166,   166,   166,   166,
    53,   166,   166,   162,   166,   166,   166,   166,   166,   166,
   166,   166,   163,   166,    25,    24,   170,    20,    26,   172,
   173,   166,    26,    26,    26,    26,   166,    26,    26,    19,
    26,    26,    26,    26,    26,    26,    26,    26,    18,    26,
    17,    16,   178,    14,    27,    13,     9,    26,    27,    27,
    27,    27,    26,    27,    27,   183,    27,    27,    27,    27,
    27,    27,    27,    27,   186,    27,     7,     6,     1,   190,
    60,   191,   192,    27,    60,    60,    60,    60,    27,    60,
    60,   193,    60,    60,    60,    60,    60,    60,    60,    60,
   nil,    60,   nil,   nil,   nil,   nil,   112,   nil,   nil,    60,
   112,   112,   112,   112,    60,   112,   112,   nil,   112,   112,
   112,   112,   112,   112,   112,   112,   nil,   112,   nil,   nil,
   nil,   nil,    54,   nil,   nil,   112,    54,    54,    54,    54,
   112,    54,    54,   nil,    54,    54,    54,    54,    54,    54,
    54,    54,   nil,    54,   nil,   nil,   nil,   nil,   143,   nil,
   nil,    54,   143,   143,   143,   143,    54,   143,   143,   nil,
   143,   143,   143,   143,   143,   143,   143,   143,   nil,   143,
   nil,   nil,   nil,   nil,   113,   nil,   nil,   143,   113,   113,
   113,   113,   143,   113,   113,   nil,   113,   113,   113,   113,
   113,   113,   113,   113,   nil,   113,   nil,   nil,   nil,   nil,
    40,   nil,   nil,   113,    40,    40,    40,    40,   113,    40,
    40,   nil,    40,    40,    40,    40,    40,    40,    40,    40,
   nil,    40,   nil,   nil,   nil,   nil,    51,   nil,   nil,    40,
    51,    51,    51,    51,    40,    51,    51,   nil,    51,    51,
    51,    51,    51,    51,    51,    51,   nil,    51,    21,    21,
   nil,   nil,   nil,     0,   nil,    51,     0,    21,     3,   nil,
    51,     3,   122,   122,   122,   122,   122,   122,   122,     0,
   122,   122,   122,   122,     3,   nil,   nil,   nil,    21,   122,
   138,   138,   138,   138,   138,   138,   138,   122,   138,   138,
   138,   138,   nil,   nil,   175,   nil,   nil,   138,   175,   175,
   175,   175,   nil,   nil,    47,   138,   nil,   175,    47,    47,
    47,    47,   nil,   nil,    48,   175,   nil,    47,    48,    48,
    48,    48,   nil,   nil,    49,    47,   nil,    48,    49,    49,
    49,    49,   nil,   nil,    45,    48,   nil,    49,    45,    45,
    45,    45,   nil,   nil,   174,    49,   nil,    45,   174,   174,
   174,   174,   nil,   nil,   110,    45,   nil,   174,   110,   110,
   110,   110,   nil,   nil,   176,   174,   nil,   110,   176,   176,
   176,   176,   nil,   nil,   180,   110,   nil,   176,   180,   180,
   180,   180,   nil,   nil,   181,   176,   nil,   180,   181,   181,
   181,   181,   nil,   nil,   182,   180,   nil,   181,   182,   182,
   182,   182,   nil,   nil,   140,   181,   nil,   182,   140,   140,
   140,   140,   nil,   nil,    43,   182,   nil,   140,    43,    43,
    43,    43,   nil,   nil,    42,   140,   nil,    43,    42,    42,
    42,    42,   nil,   nil,    41,    43,   nil,    42,    41,    41,
    41,    41,   nil,   nil,    62,    42,   nil,    41,    62,    62,
    62,    62,   nil,   nil,    63,    41,   nil,    62,    63,    63,
    63,    63,   nil,   nil,   115,    62,   nil,    63,   115,   115,
   115,   115,   nil,   nil,    39,    63,   nil,   115,    39,    39,
    39,    39,   nil,     4,   168,   115,     4,    39,   168,   168,
   168,   168,   nil,     5,   nil,    39,     5,   168,   nil,     4,
   132,   132,   132,   132,   132,   168,   nil,   nil,   nil,     5,
   177,   177,   177,   177,   177,   131,   131,   131,   131,   131,
    23,    23,    23,    23,    23,    69,    69,    69,    69,    69 ]

racc_action_pointer = [
   500,   328,   nil,   505,   730,   740,   285,   284,   101,   306,
   nil,   nil,   nil,   291,   253,     3,   251,   250,   248,   239,
   227,   506,   nil,   774,   225,   224,   257,   283,   203,   196,
   187,   nil,   nil,   nil,   173,   nil,   177,   160,   146,   713,
   439,   673,   663,   653,   154,   573,   152,   543,   553,   563,
   153,   465,    75,   205,   361,   134,   130,   159,   nil,    -1,
   309,   179,   683,   693,   nil,   nil,   108,    44,   139,   779,
    11,     5,     9,    98,    17,   136,   nil,   122,   105,    36,
   138,   112,   nil,    17,   218,    53,   nil,    10,    -1,   nil,
    18,    24,     6,    10,    46,    -5,     0,    20,   nil,   nil,
    22,   nil,   nil,   nil,   nil,   nil,    55,   127,    79,   nil,
   593,    91,   335,   413,    49,   703,   nil,   nil,   nil,   126,
   128,   nil,   505,    75,   nil,   131,   124,     4,   nil,   174,
   nil,   769,   754,    -6,   187,   157,   nil,   157,   523,   200,
   643,   nil,   179,   387,   -23,   183,   185,   nil,   183,   nil,
   nil,    20,   nil,     3,   233,   nil,   nil,   207,   239,   241,
    29,   200,   209,   218,   nil,   nil,   231,   nil,   723,   nil,
   234,     6,   236,   256,   583,   533,   603,   764,   291,   nil,
   613,   623,   633,   305,   nil,   nil,   281,    30,    38,    35,
   318,   320,   321,   298,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -5,   -85,    -1,    -5,    -5,    -5,   -85,   -85,   -85,   -85,
    -2,    -3,    -4,    -8,   -85,   -44,   -85,   -85,   -85,   -85,
   -85,   -85,   -53,   -54,   -85,   -85,   -85,   -85,   -85,   -85,
   -85,   -71,   -72,   -73,   -85,   199,   -85,   -85,   -25,   -85,
   -85,   -85,   -85,   -85,   -85,   -85,   -85,   -85,   -85,   -85,
   -85,   -85,   -85,   -85,   -85,   -85,   -85,   -44,   -58,   -85,
   -85,   -85,   -85,   -85,   -12,   -10,   -85,   -85,   -45,   -55,
   -85,   -85,   -85,   -85,   -44,   -85,   -52,   -67,   -68,   -70,
   -59,   -60,   -61,   -62,   -63,   -85,   -76,   -85,   -80,   -64,
   -85,   -85,   -85,   -85,   -85,    -7,   -85,   -14,   -17,   -18,
   -85,   -46,   -47,   -48,   -49,   -50,   -85,   -85,   -85,   -77,
   -85,   -85,   -85,   -85,   -85,   -85,   -74,    -6,   -11,   -85,
   -85,   -21,   -28,   -85,   -16,   -85,   -52,   -85,   -75,   -78,
   -57,   -79,   -82,   -85,   -84,   -85,    -9,   -85,   -28,   -29,
   -85,   -34,   -85,   -85,   -85,   -85,   -85,   -15,   -22,   -51,
   -56,   -85,   -66,   -85,   -20,   -26,   -27,   -85,   -30,   -85,
   -85,   -85,   -85,   -85,   -24,   -65,   -85,   -69,   -85,   -13,
   -85,   -52,   -85,   -41,   -85,   -85,   -85,   -81,   -83,   -19,
   -85,   -85,   -85,   -35,   -43,   -36,   -85,   -85,   -85,   -85,
   -31,   -32,   -33,   -85,   -40,   -37,   -38,   -39,   -42 ]

racc_goto_table = [
    23,    68,   100,    70,    71,    72,   137,    75,    67,    77,
    78,    79,    85,    88,   147,    66,   118,   121,    58,    59,
   169,    95,   156,     2,    92,    93,    10,    11,    12,   119,
    94,   183,    69,    36,   185,     1,   111,   151,   153,   128,
   nil,   nil,    80,    81,    82,    83,    84,   nil,   nil,   nil,
   nil,   nil,    90,    91,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   159,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   129,   nil,   nil,   nil,   nil,   134,   nil,   nil,
   nil,   173,   nil,   nil,   139,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   184,   nil,   nil,   nil,   nil,   nil,   127,
   139,   nil,   158,   nil,   131,   132,   133,   194,   195,   196,
   197,   nil,   nil,   nil,   198,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   178,   nil,   nil,   nil,   nil,   160,   187,   188,   189,   nil,
   nil,   nil,   190,   191,   192,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   177 ]

racc_goto_check = [
    21,    18,    10,    18,    18,    18,    16,    18,    15,    18,
    18,    18,    23,    23,    12,    13,     9,    14,    21,    21,
    11,     8,    16,     2,    18,    18,     2,     2,     2,    10,
     7,    20,    21,     6,    22,     1,    24,    25,    26,    27,
   nil,   nil,    21,    21,    21,    21,    21,   nil,   nil,   nil,
   nil,   nil,    21,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   nil,   nil,   nil,   nil,    18,   nil,   nil,
   nil,    14,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,    21,
    18,   nil,    18,   nil,    21,    21,    21,    14,    14,    14,
    14,   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,   nil,   nil,   nil,   nil,    21,    18,    18,    18,   nil,
   nil,   nil,    18,    18,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21 ]

racc_goto_pointer = [
   nil,    35,    23,   nil,   nil,   nil,    20,   -34,   -44,   -78,
   -65,  -134,  -109,   -23,   -79,   -30,  -116,   nil,   -38,   nil,
  -141,    -8,  -139,   -43,   -52,   -95,   -96,   -69 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,   nil,   nil,   nil,   nil,
   nil,   nil,    97,   nil,   nil,   nil,   nil,   138,    21,   141,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    86 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 57, :_reduce_1,
  2, 58, :_reduce_2,
  2, 58, :_reduce_3,
  2, 58, :_reduce_4,
  0, 58, :_reduce_5,
  6, 59, :_reduce_6,
  3, 62, :_reduce_7,
  0, 62, :_reduce_8,
  3, 64, :_reduce_9,
  0, 64, :_reduce_10,
  2, 63, :_reduce_11,
  0, 63, :_reduce_12,
  4, 65, :_reduce_13,
  1, 66, :_reduce_14,
  3, 66, :_reduce_15,
  2, 66, :_reduce_16,
  1, 68, :_reduce_17,
  1, 68, :_reduce_18,
  2, 67, :_reduce_19,
  0, 67, :_reduce_20,
  6, 60, :_reduce_21,
  4, 69, :_reduce_22,
  0, 69, :_reduce_23,
  5, 71, :_reduce_24,
  0, 71, :_reduce_25,
  3, 70, :_reduce_26,
  2, 72, :_reduce_27,
  0, 72, :_reduce_28,
  1, 73, :_reduce_29,
  2, 73, :_reduce_30,
  5, 73, :_reduce_31,
  5, 73, :_reduce_32,
  5, 73, :_reduce_33,
  1, 73, :_reduce_34,
  4, 73, :_reduce_35,
  4, 73, :_reduce_36,
  5, 75, :_reduce_37,
  5, 75, :_reduce_38,
  5, 75, :_reduce_39,
  2, 78, :_reduce_40,
  0, 78, :_reduce_41,
  3, 76, :_reduce_42,
  1, 76, :_reduce_43,
  1, 74, :_reduce_44,
  3, 74, :_reduce_45,
  4, 74, :_reduce_46,
  4, 74, :_reduce_47,
  4, 74, :_reduce_48,
  4, 74, :_reduce_49,
  4, 74, :_reduce_50,
  6, 74, :_reduce_51,
  3, 74, :_reduce_52,
  1, 74, :_reduce_53,
  2, 61, :_reduce_54,
  4, 61, :_reduce_55,
  6, 77, :_reduce_56,
  5, 77, :_reduce_57,
  2, 77, :_reduce_58,
  3, 77, :_reduce_59,
  3, 77, :_reduce_60,
  3, 77, :_reduce_61,
  3, 77, :_reduce_62,
  3, 77, :_reduce_63,
  3, 77, :_reduce_64,
  7, 77, :_reduce_65,
  6, 77, :_reduce_66,
  3, 77, :_reduce_67,
  3, 77, :_reduce_68,
  7, 77, :_reduce_69,
  3, 77, :_reduce_70,
  1, 77, :_reduce_71,
  1, 77, :_reduce_72,
  1, 77, :_reduce_73,
  4, 77, :_reduce_74,
  3, 79, :_reduce_75,
  1, 79, :_reduce_76,
  2, 83, :_reduce_77,
  3, 83, :_reduce_78,
  2, 80, :_reduce_79,
  0, 80, :_reduce_80,
  3, 81, :_reduce_81,
  0, 81, :_reduce_82,
  3, 82, :_reduce_83,
  0, 82, :_reduce_84 ]

racc_reduce_n = 85

racc_shift_n = 199

racc_token_table = {
  false => 0,
  :error => 1,
  "==" => 2,
  "!=" => 3,
  :noassoc => 4,
  :NOT => 5,
  "<=>" => 6,
  "<=" => 7,
  "=>" => 8,
  :and => 9,
  :or => 10,
  "." => 11,
  "=" => 12,
  :class => 13,
  :extends => 14,
  :inverseof => 15,
  :action => 16,
  :foreach => 17,
  :flatforeach => 18,
  :unflatforeach => 19,
  :either => 20,
  :create => 21,
  :delete => 22,
  :if => 23,
  :else => 24,
  :subset => 25,
  :oneof => 26,
  :forceoneof => 27,
  :allof => 28,
  :invariant => 29,
  :forall => 30,
  :exists => 31,
  :in => 32,
  :isempty => 33,
  :empty => 34,
  :true => 35,
  :false => 36,
  :not => 37,
  :equal => 38,
  :equiv => 39,
  :implies => 40,
  :unknown => 41,
  :IDENT => 42,
  "{" => 43,
  "}" => 44,
  "," => 45,
  ".." => 46,
  "+" => 47,
  "0" => 48,
  "1" => 49,
  "(" => 50,
  ")" => 51,
  "+=" => 52,
  "-=" => 53,
  ":" => 54,
  "*" => 55 }

racc_nt_base = 56

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"==\"",
  "\"!=\"",
  "noassoc",
  "NOT",
  "\"<=>\"",
  "\"<=\"",
  "\"=>\"",
  "and",
  "or",
  "\".\"",
  "\"=\"",
  "class",
  "extends",
  "inverseof",
  "action",
  "foreach",
  "flatforeach",
  "unflatforeach",
  "either",
  "create",
  "delete",
  "if",
  "else",
  "subset",
  "oneof",
  "forceoneof",
  "allof",
  "invariant",
  "forall",
  "exists",
  "in",
  "isempty",
  "empty",
  "true",
  "false",
  "not",
  "equal",
  "equiv",
  "implies",
  "unknown",
  "IDENT",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"..\"",
  "\"+\"",
  "\"0\"",
  "\"1\"",
  "\"(\"",
  "\")\"",
  "\"+=\"",
  "\"-=\"",
  "\":\"",
  "\"*\"",
  "$start",
  "adslspec",
  "root_elems",
  "class_decl",
  "action_decl",
  "invariant_decl",
  "opt_parents",
  "rel_decls",
  "more_parents",
  "rel_decl",
  "cardinality",
  "inverse_suffix",
  "card_number",
  "action_args",
  "block",
  "additional_args",
  "statements",
  "statement",
  "objset",
  "foreach_stmt",
  "eitherblocks",
  "formula",
  "optelse",
  "quantifier_parameters_with_commas",
  "optional_formula",
  "additional_formulae",
  "additional_objsets",
  "quantifier_parameter" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'adsl_parser.racc', 13)
  def _reduce_1(val, _values, result)
     return ASTSpec.new :lineno => lineno, :classes => val[0][0], :actions => val[0][1], :invariants => val[0][2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 15)
  def _reduce_2(val, _values, result)
     val[1][0].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 16)
  def _reduce_3(val, _values, result)
     val[1][1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 17)
  def _reduce_4(val, _values, result)
     val[1][2].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 18)
  def _reduce_5(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 21)
  def _reduce_6(val, _values, result)
     return ASTClass.new :lineno => val[0], :name => val[1], :parent_names => val[2],  :relations => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 23)
  def _reduce_7(val, _values, result)
     val[2].unshift val[1]; return val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 24)
  def _reduce_8(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 26)
  def _reduce_9(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 27)
  def _reduce_10(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 29)
  def _reduce_11(val, _values, result)
     val[0] << val[1]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 30)
  def _reduce_12(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 32)
  def _reduce_13(val, _values, result)
     return ASTRelation.new :lineno => val[0][2], :cardinality => val[0].first(2), :to_class_name => val[1], :name => val[2], :inverse_of_name => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 34)
  def _reduce_14(val, _values, result)
     return [val[0][0], val[0][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 35)
  def _reduce_15(val, _values, result)
     return [val[0][0], val[2][0], val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 36)
  def _reduce_16(val, _values, result)
     return [val[0][0], 1.0/0.0, val[0][1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 38)
  def _reduce_17(val, _values, result)
     return [0, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 39)
  def _reduce_18(val, _values, result)
     return [1, lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 41)
  def _reduce_19(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 42)
  def _reduce_20(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 44)
  def _reduce_21(val, _values, result)
     return ASTAction.new(:lineno => val[0], :name => val[1], :arg_cardinalities => val[3][0], :arg_types => val[3][1], :arg_names => val[3][2], :block => val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 46)
  def _reduce_22(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 47)
  def _reduce_23(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 49)
  def _reduce_24(val, _values, result)
     val[0][0] << val[1]; val[0][1] << val[2]; val[0][2] << val[3]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 50)
  def _reduce_25(val, _values, result)
     return [[], [], []] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 52)
  def _reduce_26(val, _values, result)
     return ASTBlock.new :lineno => val[0], :statements => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 54)
  def _reduce_27(val, _values, result)
     val[1].unshift val[0]; return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 55)
  def _reduce_28(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 57)
  def _reduce_29(val, _values, result)
     return ASTObjsetStmt.new :lineno => val[0].lineno, :objset => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 58)
  def _reduce_30(val, _values, result)
     return ASTDeleteObj.new :lineno => val[0], :objset => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 60)
  def _reduce_31(val, _values, result)
                   return ASTCreateTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 63)
  def _reduce_32(val, _values, result)
                   return ASTDeleteTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 66)
  def _reduce_33(val, _values, result)
                   return ASTSetTup.new :lineno => val[0].lineno, :objset1 => val[0], :rel_name => val[2], :objset2 => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 68)
  def _reduce_34(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 69)
  def _reduce_35(val, _values, result)
     val[3].unshift val[1]; return ASTEither.new :lineno => val[0], :blocks => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 70)
  def _reduce_36(val, _values, result)
     return ASTIf.new :lineno => val[0], :condition => val[1], :then_block => val[2], :else_block => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 73)
  def _reduce_37(val, _values, result)
                   return ASTForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 76)
  def _reduce_38(val, _values, result)
                   f = ASTForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4]
               f.force_flat(true)
               return f
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 81)
  def _reduce_39(val, _values, result)
                   f = ASTForEach.new :lineno => val[0], :var_name => val[1], :objset => val[3], :block => val[4]
               f.force_flat(false)
               return f
             
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 86)
  def _reduce_40(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 87)
  def _reduce_41(val, _values, result)
     return ASTBlock.new :statements => [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 89)
  def _reduce_42(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 90)
  def _reduce_43(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 92)
  def _reduce_44(val, _values, result)
     return ASTVariable.new :lineno => val[0].lineno, :var_name => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 93)
  def _reduce_45(val, _values, result)
     return ASTAssignment.new :lineno => val[0].lineno, :var_name => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 94)
  def _reduce_46(val, _values, result)
     return ASTSubset.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 95)
  def _reduce_47(val, _values, result)
     return ASTOneOf.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 96)
  def _reduce_48(val, _values, result)
     return ASTForceOneOf.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 97)
  def _reduce_49(val, _values, result)
     return ASTAllOf.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 98)
  def _reduce_50(val, _values, result)
     return ASTCreateObjset.new :lineno => val[0], :class_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 100)
  def _reduce_51(val, _values, result)
                return ASTDereferenceCreate.new :lineno => val[0], :objset => val[2], :rel_name => val[4]
          
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 102)
  def _reduce_52(val, _values, result)
     return ASTDereference.new :lineno => val[0].lineno, :objset => val[0], :rel_name => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 103)
  def _reduce_53(val, _values, result)
     return ASTEmptyObjset.new :lineno => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 105)
  def _reduce_54(val, _values, result)
     return ASTInvariant.new :lineno => val[0], :name => nil, :formula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 106)
  def _reduce_55(val, _values, result)
     return ASTInvariant.new :lineno => val[0], :name => val[1], :formula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 109)
  def _reduce_56(val, _values, result)
     return ASTForAll.new :lineno => val[0], :vars => val[2], :subformula => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 111)
  def _reduce_57(val, _values, result)
     return ASTExists.new :lineno => val[0], :vars => val[2], :subformula => val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 113)
  def _reduce_58(val, _values, result)
     return ASTNot.new :lineno => val[0], :subformula => val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 115)
  def _reduce_59(val, _values, result)
     return ASTAnd.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 117)
  def _reduce_60(val, _values, result)
     return ASTOr.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 119)
  def _reduce_61(val, _values, result)
     return ASTEquiv.new :lineno => val[0].lineno, :subformulae => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 121)
  def _reduce_62(val, _values, result)
     return ASTImplies.new :lineno => val[0].lineno, :subformula1 => val[0], :subformula2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 123)
  def _reduce_63(val, _values, result)
     return ASTImplies.new :lineno => val[0].lineno, :subformula1 => val[2], :subformula2 => val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 124)
  def _reduce_64(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 126)
  def _reduce_65(val, _values, result)
     return ASTEquiv.new :lineno => val[0], :subformulae => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 128)
  def _reduce_66(val, _values, result)
     return ASTImplies.new :lineno => val[0], :subformula1 => val[2], :subformula2 => val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 130)
  def _reduce_67(val, _values, result)
     return ASTEqual.new :lineno => val[0].lineno, :objsets => [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 132)
  def _reduce_68(val, _values, result)
     return ASTNot.new(:lineno => val[0].lineno, :subformula => ASTEqual.new(:lineno => val[0].lineno, :objsets => [val[0], val[2]])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 134)
  def _reduce_69(val, _values, result)
     return ASTEqual.new :lineno => val[0], :objsets => [val[2], val[4]] + val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 135)
  def _reduce_70(val, _values, result)
     return ASTIn.new :lineno => val[0].lineno, :objset1 => val[0], :objset2 => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 136)
  def _reduce_71(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => true  
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 137)
  def _reduce_72(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => false 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 138)
  def _reduce_73(val, _values, result)
     return ASTBoolean.new :lineno => val[0], :bool_value => nil   
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 139)
  def _reduce_74(val, _values, result)
     return ASTIsEmpty.new :lineno => val[0], :objset => val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 142)
  def _reduce_75(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 143)
  def _reduce_76(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 145)
  def _reduce_77(val, _values, result)
     return [val[1], ASTAllOf.new(:lineno => val[0].lineno, :class_name => val[0]), val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 146)
  def _reduce_78(val, _values, result)
     return [val[0], val[2], val[0].lineno] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 148)
  def _reduce_79(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 149)
  def _reduce_80(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 151)
  def _reduce_81(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 152)
  def _reduce_82(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 154)
  def _reduce_83(val, _values, result)
     val[0] << val[2]; return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'adsl_parser.racc', 155)
  def _reduce_84(val, _values, result)
     return [] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ADSLParser


  end
end
